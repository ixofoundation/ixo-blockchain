name: Prepare Release

on:
  push:
    tags:
      - v*

jobs:
  gather-build-info:
    name: Gather Build Info
    runs-on: ubuntu-latest
    outputs:
      is-prerelease: ${{ startsWith(steps.get_version.outputs.prerelease, 'rc') }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - id: get_version
        uses: battila7/get-version-action@master

  test-code:
    name: ${{ matrix.test.name }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    needs:
      - gather-build-info
    strategy:
      fail-fast: false
      matrix:
        test:
          - name: Unit Tests (Code)
            command: npm run test:code
            experimental: true
            artifact: ""
            enabled: true

          - name: Snyk (Security)
            command: npm run test:security
            experimental: true
            enabled: true

        exclude:
          - test:
              enabled: false
    steps:
      - uses: actions/checkout@v2
      - name: Install Npm Dependencies
        run: npm install --ignore-scripts
      - name: Run Test
        run: ${{ matrix.test.command }}

  build:
    name: ${{ matrix.build.name }}
    runs-on: ubuntu-latest
    needs:
      - gather-build-info
    strategy:
      fail-fast: false
      matrix:
        build:
          - name: Build docker image
            enabled: true
            target: dist-stable
            file: .infra/docker/Dockerfile
            artifact: ""
            os: ubuntu-latest
            command: | 
              docker build -t $IMAGE_NAME:$VERSION -f .infra/docker .

          - name: Build debian package
            command: docker build -t $IMAGE_NAME:$VERSION .
            os: ubuntu-latest
            artifact: ""
            enabled: false

          - name: Build macos binary
            command: docker build -t $IMAGE_NAME:$VERSION .
            os: ubuntu-latest
            artifact: ""
            enabled: false

        exclude:
          - build:
              enabled: false

    steps:
      - uses: actions/checkout@v2
        
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: false
          context: .
          tags: ${{ matrix.build.artifact }}:tmp
          target: ${{ matrix.build.target }}
          file: ${{ matrix.build.file }}
          outputs: "type=local,dest=./docker.tar"
      - run: ls -l
        
  test-artifact:
    name: ${{ matrix.artifact.name }}
    runs-on: ubuntu-latest
    needs:
      - build
    strategy:
      matrix:
        artifact:
          - name: Upload Release Artifacts
            command: docker build -t $IMAGE_NAME:$VERSION .
            os: ubuntu-latest
            artifact: ""
            enabled: true

        exclude:
          - artifact:
              enabled: false

    steps:
      - run: echo "All Good"

  publish-release:
    name: ${{ matrix.release.name }}
    runs-on: ubuntu-latest
    needs:
      - gather-build-info
      - test-code
      - build
      - test-artifact
    strategy:
      fail-fast: false
      matrix:
        release:
          - name: Publish Release
            enabled: ${{ !needs.gather-build-info.outputs.is-prerelease }}
            config: release-config.yaml

          - name: Publish Pre-Release
            enabled: ${{ needs.gather-build-info.outputs.is-prerelease }}
            config: prerelease-config.yaml

        exclude:
          - release:
              enabled: false
    steps:
      - name: Create Release
        id: release
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-name: ${{ matrix.release.config }}
          tag: ${{ needs.gather-build-info.outputs.version }}
          publish: true
          commitish: ${{ github.sha }}

  publish-release-artifacts:
    name: ${{ matrix.artifact.name }}
    runs-on: ubuntu-latest
    needs:
      - gather-build-info
      - build
      - publish-release
    strategy:
      matrix:
        artifact:
          - name: Upload Release Artifacts
            command: docker build -t $IMAGE_NAME:$VERSION .
            os: ubuntu-latest
            artifact: ""
            enabled: true

        exclude:
          - artifact:
              enabled: false

    steps:
      - run: echo "All Good"
