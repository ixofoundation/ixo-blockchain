name: Prepare Release

on:
  push:
    tags:
      - v*

jobs:
  gather-build-info:
    name: Gather Build Info
    runs-on: ubuntu-latest
    outputs:
      is-prerelease: ${{ startsWith(steps.get_version.outputs.prerelease, 'rc') }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - id: get_version
        uses: battila7/get-version-action@master

  test-code:
    name: ${{ matrix.test.name }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.test.experimental }}
    needs:
      - gather-build-info
    strategy:
      fail-fast: false
      matrix:
        test:
          - name: Unit Tests (Code)
            command: npm run test:code
            experimental: true
            artifact: ""
            enabled: true

          - name: Snyk (Security)
            command: npm run test:security
            experimental: true
            enabled: true

        exclude:
          - test:
              enabled: false
    steps:
      - uses: actions/checkout@v2
      - name: Install Npm Dependencies
        run: npm install --ignore-scripts
      - name: Run Test
        run: ${{ matrix.test.command }}

  build:
    name: ${{ matrix.build.name }}
    runs-on: ubuntu-latest
    needs:
      - gather-build-info
    strategy:
      fail-fast: false
      matrix:
        build:
          - name: Build docker image
            os: ubuntu-latest
            enabled: true
            artifact: ixo-chain
            docker:
              file: .infra/dockerfiles/Dockerfile
              target: dist-stable
            post-build:
              enabled: false
              command: | 
                docker build -t $IMAGE_NAME:$VERSION -f .infra/docker .

          - name: Build debian package
            os: ubuntu-latest
            artifact: "ixod"
            enabled: false
            docker:
              file: .infra/dockerfiles/Dockerfile
              target: dist-stable
            post-build:
              enabled: false
              command: | 
                docker build -t $IMAGE_NAME:$VERSION -f .infra/docker .

          - name: Build macos binary
            command: docker build -t $IMAGE_NAME:$VERSION .
            os: ubuntu-latest
            artifact: ""
            enabled: false

        exclude:
          - build:
              enabled: false

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: false
          context: .
          tags: ${{ matrix.build.artifact }}:tmp
          target: ${{ matrix.build.docker.target }}
          file: ${{ matrix.build.docker.file }}
          outputs: type=docker,dest=/tmp/${{ matrix.build.artifact }}.tar

      - run: ls -l
      - if: matrix.build.post-command.enabled
        run: echo "hi"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.build.artifact }}
          path: /tmp/${{ matrix.build.artifact }}.tar

  test-artifact:
    name: ${{ matrix.artifact.name }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.test.experimental }}
    needs:
      - build
    strategy:
      matrix:
        test:
          - name: Upload Release Artifacts
            os: ubuntu-latest
            artifact: ixo-chain
            enabled: true
            experimental: true
        exclude:
          - artifact:
              enabled: false

    steps: 
      - run: mkdir -p /artifacts
        
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact.artifact }}
          path: /artifacts

      - name: Load image
        run: |
          docker load --input /artifacts/${{ matrix.artifact.artifact }}.tar
          docker image ls -a

  publish-release:
    name: ${{ matrix.release.name }}
    runs-on: ubuntu-latest
    needs:
      - gather-build-info
      - test-code
      - build
      - test-artifact
    strategy:
      fail-fast: false
      matrix:
        release:
          - name: Publish Release
            enabled: ${{ !needs.gather-build-info.outputs.is-prerelease }}
            config: release-config.yaml

          - name: Publish Pre-Release
            enabled: ${{ needs.gather-build-info.outputs.is-prerelease }}
            config: prerelease-config.yaml

        exclude:
          - release:
              enabled: false
    steps:
      - name: Create Release
        id: release
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-name: ${{ matrix.release.config }}
          tag: ${{ needs.gather-build-info.outputs.version }}
          publish: true
          commitish: ${{ github.sha }}

  publish-release-artifacts:
    name: ${{ matrix.artifact.name }}
    runs-on: ubuntu-latest
    needs:
      - gather-build-info
      - build
      - publish-release
    env: 
      registry: ${{ needs.gather-build-info.outputs.version }}
      owner: wgmouton
      image: ixo-blockchain
      tag: ${{ needs.gather-build-info.outputs.version }}
    strategy:
      matrix:
        artifact:
          - name: Upload Release Artifacts
            command: docker build -t $IMAGE_NAME:$VERSION .
            os: ubuntu-latest
            artifact: ixo-chain
            enabled: true

        exclude:
          - artifact:
              enabled: false

    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact.artifact }}
          path: /artifacts
      -
        name: Load image
        run: |
          docker load --input /artifacts/${{ matrix.artifact.artifact }}.tar
          docker ${{ matrix.artifact.artifact }}:tmp ${{ env.registry}}/${{ env.owner }}/${{ env.image }}:${{ env.version }}
          docker push ${{ env.registry}}/${{ env.owner }}/${{ env.image }}:${{ env.tag }}
