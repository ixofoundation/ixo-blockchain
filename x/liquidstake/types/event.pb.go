// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ixo/liquidstake/v1beta1/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LiquidStakeParamsUpdatedEvent is triggered when a the Params is updated.
type LiquidStakeParamsUpdatedEvent struct {
	Params    *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	Authority string  `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *LiquidStakeParamsUpdatedEvent) Reset()         { *m = LiquidStakeParamsUpdatedEvent{} }
func (m *LiquidStakeParamsUpdatedEvent) String() string { return proto.CompactTextString(m) }
func (*LiquidStakeParamsUpdatedEvent) ProtoMessage()    {}
func (*LiquidStakeParamsUpdatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2774d61dc12f431, []int{0}
}
func (m *LiquidStakeParamsUpdatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidStakeParamsUpdatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidStakeParamsUpdatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidStakeParamsUpdatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidStakeParamsUpdatedEvent.Merge(m, src)
}
func (m *LiquidStakeParamsUpdatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *LiquidStakeParamsUpdatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidStakeParamsUpdatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidStakeParamsUpdatedEvent proto.InternalMessageInfo

// LiquidStakeEvent is triggered when a liquid stake is performed.
type LiquidStakeEvent struct {
	Delegator          string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	LiquidAmount       string `protobuf:"bytes,2,opt,name=liquid_amount,json=liquidAmount,proto3" json:"liquid_amount,omitempty"`
	StkIxoMintedAmount string `protobuf:"bytes,3,opt,name=stk_ixo_minted_amount,json=stkIxoMintedAmount,proto3" json:"stk_ixo_minted_amount,omitempty"`
}

func (m *LiquidStakeEvent) Reset()         { *m = LiquidStakeEvent{} }
func (m *LiquidStakeEvent) String() string { return proto.CompactTextString(m) }
func (*LiquidStakeEvent) ProtoMessage()    {}
func (*LiquidStakeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2774d61dc12f431, []int{1}
}
func (m *LiquidStakeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidStakeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidStakeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidStakeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidStakeEvent.Merge(m, src)
}
func (m *LiquidStakeEvent) XXX_Size() int {
	return m.Size()
}
func (m *LiquidStakeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidStakeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidStakeEvent proto.InternalMessageInfo

// LiquidUnstakeEvent is triggered when a liquid unstake is performed.
type LiquidUnstakeEvent struct {
	Delegator       string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	UnstakeAmount   string `protobuf:"bytes,2,opt,name=unstake_amount,json=unstakeAmount,proto3" json:"unstake_amount,omitempty"`
	UnbondingAmount string `protobuf:"bytes,3,opt,name=unbonding_amount,json=unbondingAmount,proto3" json:"unbonding_amount,omitempty"`
	UnbondedAmount  string `protobuf:"bytes,4,opt,name=unbonded_amount,json=unbondedAmount,proto3" json:"unbonded_amount,omitempty"`
	CompletionTime  string `protobuf:"bytes,5,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
}

func (m *LiquidUnstakeEvent) Reset()         { *m = LiquidUnstakeEvent{} }
func (m *LiquidUnstakeEvent) String() string { return proto.CompactTextString(m) }
func (*LiquidUnstakeEvent) ProtoMessage()    {}
func (*LiquidUnstakeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2774d61dc12f431, []int{2}
}
func (m *LiquidUnstakeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidUnstakeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidUnstakeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidUnstakeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidUnstakeEvent.Merge(m, src)
}
func (m *LiquidUnstakeEvent) XXX_Size() int {
	return m.Size()
}
func (m *LiquidUnstakeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidUnstakeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidUnstakeEvent proto.InternalMessageInfo

// LiquidRedelegateEvent is triggered when a liquid validator is added.
type AddLiquidValidatorEvent struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *AddLiquidValidatorEvent) Reset()         { *m = AddLiquidValidatorEvent{} }
func (m *AddLiquidValidatorEvent) String() string { return proto.CompactTextString(m) }
func (*AddLiquidValidatorEvent) ProtoMessage()    {}
func (*AddLiquidValidatorEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2774d61dc12f431, []int{3}
}
func (m *AddLiquidValidatorEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddLiquidValidatorEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddLiquidValidatorEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddLiquidValidatorEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLiquidValidatorEvent.Merge(m, src)
}
func (m *AddLiquidValidatorEvent) XXX_Size() int {
	return m.Size()
}
func (m *AddLiquidValidatorEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLiquidValidatorEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AddLiquidValidatorEvent proto.InternalMessageInfo

// RebalancedEvent is triggered after a rebalance is performed.
type RebalancedLiquidStakeEvent struct {
	Delegator             string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	RedelegationCount     string `protobuf:"bytes,2,opt,name=redelegation_count,json=redelegationCount,proto3" json:"redelegation_count,omitempty"`
	RedelegationFailCount string `protobuf:"bytes,3,opt,name=redelegation_fail_count,json=redelegationFailCount,proto3" json:"redelegation_fail_count,omitempty"`
}

func (m *RebalancedLiquidStakeEvent) Reset()         { *m = RebalancedLiquidStakeEvent{} }
func (m *RebalancedLiquidStakeEvent) String() string { return proto.CompactTextString(m) }
func (*RebalancedLiquidStakeEvent) ProtoMessage()    {}
func (*RebalancedLiquidStakeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2774d61dc12f431, []int{4}
}
func (m *RebalancedLiquidStakeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RebalancedLiquidStakeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RebalancedLiquidStakeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RebalancedLiquidStakeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RebalancedLiquidStakeEvent.Merge(m, src)
}
func (m *RebalancedLiquidStakeEvent) XXX_Size() int {
	return m.Size()
}
func (m *RebalancedLiquidStakeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RebalancedLiquidStakeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RebalancedLiquidStakeEvent proto.InternalMessageInfo

// AutocompoundEvent is triggered after a epoch is triggered for autocompound.
type AutocompoundStakingRewardsEvent struct {
	Delegator             string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	TotalAmount           string `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	FeeAmount             string `protobuf:"bytes,3,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`
	RedelegateAmount      string `protobuf:"bytes,4,opt,name=redelegate_amount,json=redelegateAmount,proto3" json:"redelegate_amount,omitempty"`
	WeightedRewardsAmount string `protobuf:"bytes,5,opt,name=weighted_rewards_amount,json=weightedRewardsAmount,proto3" json:"weighted_rewards_amount,omitempty"`
}

func (m *AutocompoundStakingRewardsEvent) Reset()         { *m = AutocompoundStakingRewardsEvent{} }
func (m *AutocompoundStakingRewardsEvent) String() string { return proto.CompactTextString(m) }
func (*AutocompoundStakingRewardsEvent) ProtoMessage()    {}
func (*AutocompoundStakingRewardsEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2774d61dc12f431, []int{5}
}
func (m *AutocompoundStakingRewardsEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutocompoundStakingRewardsEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutocompoundStakingRewardsEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutocompoundStakingRewardsEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutocompoundStakingRewardsEvent.Merge(m, src)
}
func (m *AutocompoundStakingRewardsEvent) XXX_Size() int {
	return m.Size()
}
func (m *AutocompoundStakingRewardsEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AutocompoundStakingRewardsEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AutocompoundStakingRewardsEvent proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LiquidStakeParamsUpdatedEvent)(nil), "ixo.liquidstake.v1beta1.LiquidStakeParamsUpdatedEvent")
	proto.RegisterType((*LiquidStakeEvent)(nil), "ixo.liquidstake.v1beta1.LiquidStakeEvent")
	proto.RegisterType((*LiquidUnstakeEvent)(nil), "ixo.liquidstake.v1beta1.LiquidUnstakeEvent")
	proto.RegisterType((*AddLiquidValidatorEvent)(nil), "ixo.liquidstake.v1beta1.AddLiquidValidatorEvent")
	proto.RegisterType((*RebalancedLiquidStakeEvent)(nil), "ixo.liquidstake.v1beta1.RebalancedLiquidStakeEvent")
	proto.RegisterType((*AutocompoundStakingRewardsEvent)(nil), "ixo.liquidstake.v1beta1.AutocompoundStakingRewardsEvent")
}

func init() {
	proto.RegisterFile("ixo/liquidstake/v1beta1/event.proto", fileDescriptor_c2774d61dc12f431)
}

var fileDescriptor_c2774d61dc12f431 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6b, 0xd4, 0x4e,
	0x18, 0xde, 0xf9, 0xfd, 0xb4, 0xb8, 0x6f, 0xff, 0x58, 0x83, 0xcb, 0x2e, 0x4b, 0x9b, 0xad, 0x2d,
	0x62, 0x8b, 0x34, 0x61, 0x15, 0x56, 0xf0, 0x20, 0xac, 0x45, 0x41, 0x50, 0x90, 0xd5, 0x8a, 0x78,
	0x59, 0x26, 0xc9, 0x6c, 0x76, 0xd8, 0x64, 0x66, 0x4d, 0x26, 0xdb, 0xf4, 0xe6, 0xd1, 0xa3, 0xf8,
	0x09, 0x7a, 0xf7, 0x8b, 0x78, 0xec, 0xd1, 0x63, 0xd9, 0xbd, 0x78, 0xf4, 0x23, 0x48, 0x66, 0x26,
	0x9b, 0xa4, 0x50, 0xa8, 0xb7, 0xe4, 0x79, 0x9f, 0xf7, 0x9d, 0xe7, 0x79, 0x9f, 0x61, 0x60, 0x8f,
	0xa6, 0xdc, 0x0e, 0xe8, 0xe7, 0x84, 0x7a, 0xb1, 0xc0, 0x13, 0x62, 0xcf, 0xba, 0x0e, 0x11, 0xb8,
	0x6b, 0x93, 0x19, 0x61, 0xc2, 0x9a, 0x46, 0x5c, 0x70, 0xa3, 0x49, 0x53, 0x6e, 0x95, 0x48, 0x96,
	0x26, 0xb5, 0xef, 0xfa, 0xdc, 0xe7, 0x92, 0x63, 0x67, 0x5f, 0x8a, 0xde, 0x3e, 0xb8, 0x6a, 0x66,
	0x79, 0x84, 0xa4, 0xee, 0x7e, 0x41, 0xb0, 0xfd, 0x5a, 0xa2, 0xef, 0x32, 0xf4, 0x2d, 0x8e, 0x70,
	0x18, 0x1f, 0x4f, 0x3d, 0x2c, 0x88, 0xf7, 0x22, 0x53, 0x60, 0x3c, 0x81, 0x95, 0xa9, 0x44, 0x5b,
	0x68, 0x07, 0xed, 0xaf, 0x3e, 0xea, 0x58, 0x57, 0x88, 0xb1, 0x54, 0xf3, 0x40, 0xd3, 0x8d, 0x2d,
	0xa8, 0xe3, 0x44, 0x8c, 0x79, 0x44, 0xc5, 0x69, 0xeb, 0xbf, 0x1d, 0xb4, 0x5f, 0x1f, 0x14, 0xc0,
	0xd3, 0x5b, 0x5f, 0xcf, 0x3a, 0xb5, 0xdf, 0x67, 0x9d, 0xda, 0xee, 0x77, 0x04, 0x9b, 0x25, 0x09,
	0xea, 0xd4, 0x2d, 0xa8, 0x7b, 0x24, 0x20, 0x3e, 0x16, 0x3c, 0x92, 0x07, 0xd7, 0x07, 0x05, 0x60,
	0xec, 0xc1, 0xba, 0x12, 0x30, 0xc4, 0x21, 0x4f, 0x98, 0xd0, 0xe3, 0xd7, 0x14, 0xd8, 0x97, 0x98,
	0xd1, 0x85, 0x46, 0x2c, 0x26, 0x43, 0x9a, 0xf2, 0x61, 0x48, 0x99, 0x20, 0x4b, 0xf2, 0xff, 0x92,
	0x6c, 0xc4, 0x62, 0xf2, 0x2a, 0xe5, 0x6f, 0x64, 0x49, 0xb5, 0x94, 0x44, 0x5d, 0x20, 0x30, 0x94,
	0xa8, 0x63, 0x16, 0x5f, 0x57, 0xd6, 0x7d, 0xd8, 0x48, 0x14, 0xbb, 0xaa, 0x6b, 0x5d, 0xa3, 0x5a,
	0xd8, 0x01, 0x6c, 0x26, 0xcc, 0xe1, 0xcc, 0xa3, 0xcc, 0xaf, 0x6a, 0xba, 0xbd, 0xc4, 0x35, 0xf5,
	0x01, 0x68, 0xa8, 0x50, 0x7f, 0x43, 0x32, 0x37, 0x72, 0xb8, 0x20, 0xba, 0x3c, 0x9c, 0x06, 0x44,
	0x50, 0xce, 0x86, 0x82, 0x86, 0xa4, 0x75, 0x53, 0x11, 0x0b, 0xf8, 0x3d, 0x0d, 0x49, 0xc9, 0x62,
	0x1f, 0x9a, 0x7d, 0xcf, 0x53, 0x26, 0x3f, 0xe0, 0x80, 0x7a, 0x99, 0x87, 0xa5, 0xcd, 0x59, 0x8e,
	0xe4, 0x36, 0x97, 0x40, 0x69, 0xc4, 0x0f, 0x04, 0xed, 0x01, 0x71, 0x70, 0x80, 0x99, 0x4b, 0xbc,
	0x7f, 0x0c, 0xf1, 0x10, 0x8c, 0x88, 0xe8, 0xdf, 0x4c, 0xb4, 0x5b, 0xda, 0xd8, 0x9d, 0x72, 0xe5,
	0x48, 0x3a, 0xec, 0x41, 0xb3, 0x42, 0x1f, 0x61, 0x1a, 0xe8, 0x1e, 0xb5, 0xbc, 0x46, 0xb9, 0xfc,
	0x12, 0xd3, 0xe0, 0xe8, 0x52, 0xa6, 0x7f, 0x10, 0x74, 0xfa, 0x89, 0xe0, 0xd9, 0x46, 0x78, 0xc2,
	0xa4, 0x52, 0xca, 0xfc, 0x01, 0x39, 0xc1, 0x91, 0x17, 0x5f, 0x47, 0xf2, 0x3d, 0x58, 0x13, 0x5c,
	0xe0, 0xa0, 0x1a, 0xef, 0xaa, 0xc4, 0x74, 0x10, 0xdb, 0x00, 0x23, 0x42, 0xaa, 0xb1, 0xd6, 0x47,
	0x24, 0xcf, 0xfe, 0x21, 0x14, 0xd6, 0x48, 0x35, 0xd2, 0xcd, 0xa2, 0xa0, 0xc9, 0x3d, 0x68, 0x9e,
	0x10, 0xea, 0x8f, 0xb3, 0xbb, 0x1b, 0x29, 0x95, 0x79, 0x8b, 0x0a, 0xb7, 0x91, 0x97, 0xb5, 0x87,
	0xcb, 0xd7, 0xf8, 0xf9, 0xc7, 0x9f, 0x73, 0x13, 0x9d, 0xcf, 0x4d, 0x74, 0x31, 0x37, 0xd1, 0xb7,
	0x85, 0x59, 0x3b, 0x5f, 0x98, 0xb5, 0x5f, 0x0b, 0xb3, 0xf6, 0xe9, 0x99, 0x4f, 0xc5, 0x38, 0x71,
	0x2c, 0x97, 0x87, 0x36, 0x4d, 0xf9, 0x28, 0x5b, 0x88, 0xdc, 0x5c, 0xf6, 0x77, 0xe8, 0x04, 0xdc,
	0x9d, 0xb8, 0x63, 0x4c, 0x99, 0x3d, 0xeb, 0xd9, 0x69, 0xe5, 0x31, 0x11, 0xa7, 0x53, 0x12, 0x3b,
	0x2b, 0xf2, 0xfd, 0x78, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xa1, 0x41, 0xe6, 0xc0, 0x04,
	0x00, 0x00,
}

func (m *LiquidStakeParamsUpdatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidStakeParamsUpdatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidStakeParamsUpdatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x12
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidStakeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidStakeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidStakeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StkIxoMintedAmount) > 0 {
		i -= len(m.StkIxoMintedAmount)
		copy(dAtA[i:], m.StkIxoMintedAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.StkIxoMintedAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LiquidAmount) > 0 {
		i -= len(m.LiquidAmount)
		copy(dAtA[i:], m.LiquidAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.LiquidAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidUnstakeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidUnstakeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidUnstakeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompletionTime) > 0 {
		i -= len(m.CompletionTime)
		copy(dAtA[i:], m.CompletionTime)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CompletionTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UnbondedAmount) > 0 {
		i -= len(m.UnbondedAmount)
		copy(dAtA[i:], m.UnbondedAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.UnbondedAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UnbondingAmount) > 0 {
		i -= len(m.UnbondingAmount)
		copy(dAtA[i:], m.UnbondingAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.UnbondingAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UnstakeAmount) > 0 {
		i -= len(m.UnstakeAmount)
		copy(dAtA[i:], m.UnstakeAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.UnstakeAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddLiquidValidatorEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLiquidValidatorEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddLiquidValidatorEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RebalancedLiquidStakeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RebalancedLiquidStakeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RebalancedLiquidStakeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedelegationFailCount) > 0 {
		i -= len(m.RedelegationFailCount)
		copy(dAtA[i:], m.RedelegationFailCount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RedelegationFailCount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RedelegationCount) > 0 {
		i -= len(m.RedelegationCount)
		copy(dAtA[i:], m.RedelegationCount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RedelegationCount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AutocompoundStakingRewardsEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutocompoundStakingRewardsEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutocompoundStakingRewardsEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WeightedRewardsAmount) > 0 {
		i -= len(m.WeightedRewardsAmount)
		copy(dAtA[i:], m.WeightedRewardsAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.WeightedRewardsAmount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RedelegateAmount) > 0 {
		i -= len(m.RedelegateAmount)
		copy(dAtA[i:], m.RedelegateAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RedelegateAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FeeAmount) > 0 {
		i -= len(m.FeeAmount)
		copy(dAtA[i:], m.FeeAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FeeAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalAmount) > 0 {
		i -= len(m.TotalAmount)
		copy(dAtA[i:], m.TotalAmount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TotalAmount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LiquidStakeParamsUpdatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *LiquidStakeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.LiquidAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.StkIxoMintedAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *LiquidUnstakeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.UnstakeAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.UnbondingAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.UnbondedAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CompletionTime)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *AddLiquidValidatorEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *RebalancedLiquidStakeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.RedelegationCount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.RedelegationFailCount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *AutocompoundStakingRewardsEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.TotalAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.FeeAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.RedelegateAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.WeightedRewardsAmount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiquidStakeParamsUpdatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidStakeParamsUpdatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidStakeParamsUpdatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidStakeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidStakeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidStakeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StkIxoMintedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StkIxoMintedAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidUnstakeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidUnstakeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidUnstakeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnstakeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondedAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLiquidValidatorEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLiquidValidatorEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLiquidValidatorEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RebalancedLiquidStakeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RebalancedLiquidStakeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RebalancedLiquidStakeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedelegationCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedelegationCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedelegationFailCount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedelegationFailCount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutocompoundStakingRewardsEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutocompoundStakingRewardsEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutocompoundStakingRewardsEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedelegateAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedelegateAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightedRewardsAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeightedRewardsAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
