// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ixo/token/v1beta1/token.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_ixofoundation_ixo_blockchain_x_iid_types "github.com/ixofoundation/ixo-blockchain/x/iid/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ContractType int32

const (
	ContractType_CW20    ContractType = 0
	ContractType_CW721   ContractType = 1
	ContractType_IXO1155 ContractType = 2
)

var ContractType_name = map[int32]string{
	0: "CW20",
	1: "CW721",
	2: "IXO1155",
}

var ContractType_value = map[string]int32{
	"CW20":    0,
	"CW721":   1,
	"IXO1155": 2,
}

func (x ContractType) String() string {
	return proto.EnumName(ContractType_name, int32(x))
}

func (ContractType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5772c07022bd1ddf, []int{0}
}

type Contract struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_5772c07022bd1ddf, []int{0}
}
func (m *Contract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(m, src)
}
func (m *Contract) XXX_Size() int {
	return m.Size()
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

func (m *Contract) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Contract) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Params struct {
	Cw20ContractCode    uint64 `protobuf:"varint,1,opt,name=cw20_contract_code,json=cw20ContractCode,proto3" json:"cw20_contract_code,omitempty"`
	Cw721ContractCode   uint64 `protobuf:"varint,2,opt,name=cw721_contract_code,json=cw721ContractCode,proto3" json:"cw721_contract_code,omitempty"`
	Ixo1155ContractCode uint64 `protobuf:"varint,3,opt,name=ixo1155_contract_code,json=ixo1155ContractCode,proto3" json:"ixo1155_contract_code,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_5772c07022bd1ddf, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

type TokenMinter struct {
	MinterDid       github_com_ixofoundation_ixo_blockchain_x_iid_types.DIDFragment `protobuf:"bytes,1,opt,name=minter_did,json=minterDid,proto3,casttype=github.com/ixofoundation/ixo-blockchain/x/iid/types.DIDFragment" json:"minter_did,omitempty"`
	MinterAddress   string                                                          `protobuf:"bytes,2,opt,name=minter_address,json=minterAddress,proto3" json:"minter_address,omitempty"`
	ContractAddress string                                                          `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	ContractType    ContractType                                                    `protobuf:"varint,4,opt,name=contract_type,json=contractType,proto3,enum=ixo.token.v1beta1.ContractType" json:"contract_type,omitempty"`
	Name            string                                                          `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                                                          `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *TokenMinter) Reset()         { *m = TokenMinter{} }
func (m *TokenMinter) String() string { return proto.CompactTextString(m) }
func (*TokenMinter) ProtoMessage()    {}
func (*TokenMinter) Descriptor() ([]byte, []int) {
	return fileDescriptor_5772c07022bd1ddf, []int{2}
}
func (m *TokenMinter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenMinter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenMinter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenMinter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenMinter.Merge(m, src)
}
func (m *TokenMinter) XXX_Size() int {
	return m.Size()
}
func (m *TokenMinter) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenMinter.DiscardUnknown(m)
}

var xxx_messageInfo_TokenMinter proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ixo.token.v1beta1.ContractType", ContractType_name, ContractType_value)
	proto.RegisterType((*Contract)(nil), "ixo.token.v1beta1.Contract")
	proto.RegisterType((*Params)(nil), "ixo.token.v1beta1.Params")
	proto.RegisterType((*TokenMinter)(nil), "ixo.token.v1beta1.TokenMinter")
}

func init() { proto.RegisterFile("ixo/token/v1beta1/token.proto", fileDescriptor_5772c07022bd1ddf) }

var fileDescriptor_5772c07022bd1ddf = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0x4e, 0xd2, 0x74, 0xdb, 0x7d, 0xdb, 0xae, 0xe9, 0x54, 0x21, 0x08, 0x66, 0x97, 0x05, 0xa1,
	0x8a, 0x26, 0x9b, 0xe8, 0x52, 0xf0, 0x22, 0x36, 0x8b, 0xd0, 0x83, 0x54, 0x96, 0x42, 0xc5, 0xcb,
	0x32, 0x99, 0x19, 0xb7, 0x43, 0x4d, 0x66, 0x49, 0xa6, 0x36, 0xfd, 0x07, 0x1e, 0xfd, 0x09, 0xfd,
	0x33, 0x82, 0xc7, 0x1e, 0x3d, 0x89, 0xec, 0xfe, 0x0b, 0x4f, 0x92, 0x99, 0x4d, 0x49, 0xeb, 0xc5,
	0xdb, 0x7b, 0xdf, 0xf7, 0xbd, 0xef, 0xf1, 0xbe, 0x19, 0x78, 0xc4, 0x4b, 0x11, 0x48, 0x71, 0xc6,
	0xb2, 0xe0, 0x4b, 0x98, 0x30, 0x89, 0x43, 0xdd, 0xf9, 0xf3, 0x5c, 0x48, 0x81, 0x76, 0x78, 0x29,
	0x7c, 0x0d, 0xac, 0xe8, 0x87, 0xf7, 0x67, 0x62, 0x26, 0x14, 0x1b, 0x54, 0x95, 0x16, 0x0e, 0x5e,
	0xc2, 0x66, 0x2c, 0x32, 0x99, 0x63, 0x22, 0x51, 0x17, 0x2c, 0x4e, 0x5d, 0xb3, 0x6f, 0xee, 0xb5,
	0x27, 0x16, 0xa7, 0xc8, 0x85, 0x0d, 0x4c, 0x69, 0xce, 0x8a, 0xc2, 0xb5, 0x14, 0x58, 0xb7, 0x83,
	0x2b, 0x13, 0x5a, 0xef, 0x71, 0x8e, 0xd3, 0x02, 0x3d, 0x03, 0x44, 0x2e, 0xa2, 0xe1, 0x94, 0xac,
	0x5c, 0xa6, 0x44, 0x50, 0xa6, 0x4c, 0xec, 0x89, 0x53, 0x31, 0xb5, 0x7d, 0x2c, 0x28, 0x43, 0x3e,
	0xec, 0x92, 0x8b, 0xfd, 0x28, 0xbc, 0x23, 0xb7, 0x94, 0x7c, 0x47, 0x51, 0xb7, 0xf4, 0x11, 0x3c,
	0xe0, 0xa5, 0x08, 0xc3, 0xd1, 0xe8, 0xce, 0xc4, 0x9a, 0x9a, 0xd8, 0x5d, 0x91, 0xcd, 0x99, 0x57,
	0xf6, 0xd7, 0xab, 0x9e, 0x31, 0xf8, 0x6e, 0x41, 0xe7, 0xb8, 0x0a, 0xe0, 0x1d, 0xcf, 0x24, 0xcb,
	0x51, 0x02, 0x90, 0xaa, 0x6a, 0x4a, 0xeb, 0x23, 0x0f, 0xe2, 0x3f, 0xbf, 0x7a, 0xaf, 0x67, 0x5c,
	0x9e, 0x9e, 0x27, 0x3e, 0x11, 0x69, 0xc0, 0x4b, 0xf1, 0x49, 0x9c, 0x67, 0x14, 0x4b, 0x2e, 0xb2,
	0xaa, 0x7b, 0x9e, 0x7c, 0x16, 0xe4, 0x8c, 0x9c, 0x62, 0x9e, 0x05, 0x65, 0xc0, 0x39, 0x0d, 0xe4,
	0xe5, 0x9c, 0x15, 0xfe, 0xf8, 0x70, 0xfc, 0x36, 0xc7, 0xb3, 0x94, 0x65, 0x72, 0xd2, 0xd6, 0xb6,
	0x63, 0x4e, 0xd1, 0x63, 0xe8, 0xae, 0x76, 0xdc, 0xce, 0x6d, 0x5b, 0xa3, 0x6f, 0x34, 0x88, 0x9e,
	0x80, 0x73, 0x73, 0x4c, 0x2d, 0x5c, 0x53, 0xc2, 0x7b, 0x35, 0x5e, 0x4b, 0xc7, 0xb0, 0x7d, 0x23,
	0xad, 0x56, 0xbb, 0x76, 0xdf, 0xdc, 0xeb, 0x46, 0x3d, 0xff, 0x9f, 0xf7, 0xf5, 0xeb, 0x0c, 0x8e,
	0x2f, 0xe7, 0x6c, 0xb2, 0x45, 0x1a, 0x1d, 0x42, 0x60, 0x67, 0x38, 0x65, 0xee, 0xba, 0x5a, 0xa2,
	0x6a, 0xd4, 0x87, 0x0e, 0x65, 0x05, 0xc9, 0xf9, 0xbc, 0x3a, 0xd6, 0x6d, 0x29, 0xaa, 0x09, 0xe9,
	0x1c, 0x9f, 0x0e, 0x61, 0xab, 0xe9, 0x8c, 0x36, 0xc1, 0x8e, 0x4f, 0xa2, 0xa1, 0x63, 0xa0, 0x36,
	0xac, 0xc7, 0x27, 0xfb, 0x51, 0xe8, 0x98, 0xa8, 0x03, 0x1b, 0x87, 0x1f, 0x8e, 0xaa, 0x97, 0x70,
	0xac, 0x83, 0xa3, 0x1f, 0x0b, 0xcf, 0xbc, 0x5e, 0x78, 0xe6, 0xef, 0x85, 0x67, 0x7e, 0x5b, 0x7a,
	0xc6, 0xf5, 0xd2, 0x33, 0x7e, 0x2e, 0x3d, 0xe3, 0xe3, 0xe8, 0xff, 0xb3, 0xd6, 0x5f, 0x5b, 0xa5,
	0x9d, 0xb4, 0xd4, 0x57, 0x7d, 0xf1, 0x37, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x77, 0xd5, 0x1c, 0xf4,
	0x02, 0x00, 0x00,
}

func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ixo1155ContractCode != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.Ixo1155ContractCode))
		i--
		dAtA[i] = 0x18
	}
	if m.Cw721ContractCode != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.Cw721ContractCode))
		i--
		dAtA[i] = 0x10
	}
	if m.Cw20ContractCode != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.Cw20ContractCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TokenMinter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenMinter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenMinter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ContractType != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.ContractType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintToken(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MinterAddress) > 0 {
		i -= len(m.MinterAddress)
		copy(dAtA[i:], m.MinterAddress)
		i = encodeVarintToken(dAtA, i, uint64(len(m.MinterAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MinterDid) > 0 {
		i -= len(m.MinterDid)
		copy(dAtA[i:], m.MinterDid)
		i = encodeVarintToken(dAtA, i, uint64(len(m.MinterDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cw20ContractCode != 0 {
		n += 1 + sovToken(uint64(m.Cw20ContractCode))
	}
	if m.Cw721ContractCode != 0 {
		n += 1 + sovToken(uint64(m.Cw721ContractCode))
	}
	if m.Ixo1155ContractCode != 0 {
		n += 1 + sovToken(uint64(m.Ixo1155ContractCode))
	}
	return n
}

func (m *TokenMinter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MinterDid)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.MinterAddress)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	if m.ContractType != 0 {
		n += 1 + sovToken(uint64(m.ContractType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	return n
}

func sovToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozToken(x uint64) (n int) {
	return sovToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20ContractCode", wireType)
			}
			m.Cw20ContractCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cw20ContractCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw721ContractCode", wireType)
			}
			m.Cw721ContractCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cw721ContractCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ixo1155ContractCode", wireType)
			}
			m.Ixo1155ContractCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ixo1155ContractCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenMinter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenMinter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenMinter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinterDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinterDid = github_com_ixofoundation_ixo_blockchain_x_iid_types.DIDFragment(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractType", wireType)
			}
			m.ContractType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractType |= ContractType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupToken = fmt.Errorf("proto: unexpected end of group")
)
