// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ixo/token/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryTokenListRequest struct {
	MinterDid string `protobuf:"bytes,1,opt,name=minter_did,json=minterDid,proto3" json:"minter_did,omitempty" yaml:"minter_did"`
}

func (m *QueryTokenListRequest) Reset()         { *m = QueryTokenListRequest{} }
func (m *QueryTokenListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenListRequest) ProtoMessage()    {}
func (*QueryTokenListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce478daca359f034, []int{0}
}
func (m *QueryTokenListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenListRequest.Merge(m, src)
}
func (m *QueryTokenListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenListRequest proto.InternalMessageInfo

func (m *QueryTokenListRequest) GetMinterDid() string {
	if m != nil {
		return m.MinterDid
	}
	return ""
}

// // QueryProjectDocResponse is the response type for the Query/ProjectDoc RPC method.
type QueryTokenListResponse struct {
	Contracts []*TokenMinter `protobuf:"bytes,1,rep,name=contracts,proto3" json:"contracts,omitempty" yaml:"contracts"`
}

func (m *QueryTokenListResponse) Reset()         { *m = QueryTokenListResponse{} }
func (m *QueryTokenListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenListResponse) ProtoMessage()    {}
func (*QueryTokenListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce478daca359f034, []int{1}
}
func (m *QueryTokenListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenListResponse.Merge(m, src)
}
func (m *QueryTokenListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenListResponse proto.InternalMessageInfo

func (m *QueryTokenListResponse) GetContracts() []*TokenMinter {
	if m != nil {
		return m.Contracts
	}
	return nil
}

// QueryProjectDocRequest is the request type for the Query/ProjectDoc RPC method.
type QueryTokenDocRequest struct {
	MinterDid       string `protobuf:"bytes,1,opt,name=minter_did,json=minterDid,proto3" json:"minter_did,omitempty" yaml:"minter_did"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty" yaml:"contract_address"`
}

func (m *QueryTokenDocRequest) Reset()         { *m = QueryTokenDocRequest{} }
func (m *QueryTokenDocRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenDocRequest) ProtoMessage()    {}
func (*QueryTokenDocRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce478daca359f034, []int{2}
}
func (m *QueryTokenDocRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenDocRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenDocRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenDocRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenDocRequest.Merge(m, src)
}
func (m *QueryTokenDocRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenDocRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenDocRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenDocRequest proto.InternalMessageInfo

func (m *QueryTokenDocRequest) GetMinterDid() string {
	if m != nil {
		return m.MinterDid
	}
	return ""
}

func (m *QueryTokenDocRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// // QueryProjectDocResponse is the response type for the Query/ProjectDoc RPC method.
type QueryTokenDocResponse struct {
}

func (m *QueryTokenDocResponse) Reset()         { *m = QueryTokenDocResponse{} }
func (m *QueryTokenDocResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenDocResponse) ProtoMessage()    {}
func (*QueryTokenDocResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce478daca359f034, []int{3}
}
func (m *QueryTokenDocResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenDocResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenDocResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenDocResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenDocResponse.Merge(m, src)
}
func (m *QueryTokenDocResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenDocResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenDocResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenDocResponse proto.InternalMessageInfo

type QueryTokenConfigRequest struct {
}

func (m *QueryTokenConfigRequest) Reset()         { *m = QueryTokenConfigRequest{} }
func (m *QueryTokenConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenConfigRequest) ProtoMessage()    {}
func (*QueryTokenConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce478daca359f034, []int{4}
}
func (m *QueryTokenConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenConfigRequest.Merge(m, src)
}
func (m *QueryTokenConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenConfigRequest proto.InternalMessageInfo

// // QueryProjectDocResponse is the response type for the Query/ProjectDoc RPC method.
type QueryTokenConfigResponse struct {
	Map map[string]string `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" yaml:"config" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryTokenConfigResponse) Reset()         { *m = QueryTokenConfigResponse{} }
func (m *QueryTokenConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenConfigResponse) ProtoMessage()    {}
func (*QueryTokenConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce478daca359f034, []int{5}
}
func (m *QueryTokenConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenConfigResponse.Merge(m, src)
}
func (m *QueryTokenConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenConfigResponse proto.InternalMessageInfo

func (m *QueryTokenConfigResponse) GetMap() map[string]string {
	if m != nil {
		return m.Map
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryTokenListRequest)(nil), "ixo.token.v1beta1.QueryTokenListRequest")
	proto.RegisterType((*QueryTokenListResponse)(nil), "ixo.token.v1beta1.QueryTokenListResponse")
	proto.RegisterType((*QueryTokenDocRequest)(nil), "ixo.token.v1beta1.QueryTokenDocRequest")
	proto.RegisterType((*QueryTokenDocResponse)(nil), "ixo.token.v1beta1.QueryTokenDocResponse")
	proto.RegisterType((*QueryTokenConfigRequest)(nil), "ixo.token.v1beta1.QueryTokenConfigRequest")
	proto.RegisterType((*QueryTokenConfigResponse)(nil), "ixo.token.v1beta1.QueryTokenConfigResponse")
	proto.RegisterMapType((map[string]string)(nil), "ixo.token.v1beta1.QueryTokenConfigResponse.MapEntry")
}

func init() { proto.RegisterFile("ixo/token/v1beta1/query.proto", fileDescriptor_ce478daca359f034) }

var fileDescriptor_ce478daca359f034 = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0x8e, 0x13, 0x15, 0x35, 0xae, 0x10, 0x89, 0x49, 0xc9, 0x0f, 0xb0, 0xa9, 0x7c, 0x21, 0x14,
	0xd8, 0x55, 0x43, 0x41, 0xa8, 0x37, 0x42, 0xe1, 0x44, 0x84, 0x58, 0x71, 0x81, 0x4b, 0xe5, 0xec,
	0x3a, 0x5b, 0x2b, 0x89, 0xbd, 0xdd, 0x75, 0xaa, 0x44, 0x55, 0x0f, 0xf0, 0x04, 0x20, 0x78, 0x03,
	0xce, 0xbc, 0x07, 0xc7, 0x4a, 0x5c, 0x38, 0x45, 0x28, 0xe1, 0x09, 0xf2, 0x04, 0x68, 0xed, 0x4d,
	0x36, 0xf4, 0x8f, 0xa2, 0xde, 0xec, 0xf9, 0x66, 0xbe, 0xf9, 0xfc, 0xcd, 0xc8, 0xf0, 0x36, 0x1b,
	0x08, 0x4b, 0x8a, 0x0e, 0xe5, 0xd6, 0xfe, 0x46, 0x8b, 0x4a, 0xb2, 0x61, 0xed, 0xf5, 0x69, 0x30,
	0x34, 0xfd, 0x40, 0x48, 0x81, 0xf2, 0x6c, 0x20, 0x4c, 0x05, 0x9b, 0x31, 0x5c, 0x29, 0x78, 0xc2,
	0x13, 0x0a, 0xb5, 0xa2, 0x93, 0x4e, 0xac, 0xdc, 0xf2, 0x84, 0xf0, 0xba, 0xd4, 0x22, 0x3e, 0xb3,
	0x08, 0xe7, 0x42, 0x12, 0xc9, 0x04, 0x0f, 0x63, 0xf4, 0x94, 0x2e, 0x9a, 0x54, 0xc1, 0xb8, 0x09,
	0x57, 0x5f, 0x47, 0x4d, 0xdf, 0x44, 0xb1, 0x97, 0x2c, 0x94, 0x36, 0xdd, 0xeb, 0xd3, 0x50, 0xa2,
	0x4d, 0x08, 0x7b, 0x8c, 0x4b, 0x1a, 0xec, 0xb8, 0xcc, 0x2d, 0x81, 0x35, 0x50, 0xcb, 0x36, 0x56,
	0xa7, 0xa3, 0x6a, 0x7e, 0x48, 0x7a, 0xdd, 0x2d, 0x9c, 0x60, 0xd8, 0xce, 0xea, 0xcb, 0x36, 0x73,
	0x71, 0x17, 0xde, 0x38, 0x4e, 0x17, 0xfa, 0x82, 0x87, 0x14, 0xd9, 0x30, 0xeb, 0x08, 0x2e, 0x03,
	0xe2, 0xc8, 0xb0, 0x04, 0xd6, 0x32, 0xb5, 0x95, 0xba, 0x61, 0x9e, 0x78, 0xa2, 0xa9, 0x0a, 0x9b,
	0x8a, 0xaf, 0x51, 0x98, 0x8e, 0xaa, 0x39, 0xdd, 0x6e, 0x5e, 0x8a, 0xed, 0x84, 0x06, 0x7f, 0x01,
	0xb0, 0x90, 0xb4, 0xdb, 0x16, 0xce, 0xa5, 0xc4, 0xa3, 0x17, 0x30, 0x37, 0xe3, 0xde, 0x21, 0xae,
	0x1b, 0xd0, 0x30, 0x2c, 0xa5, 0x55, 0xed, 0xcd, 0xe9, 0xa8, 0x5a, 0xfc, 0x5b, 0xc9, 0x2c, 0x03,
	0xdb, 0xd7, 0x66, 0xa1, 0xa7, 0x71, 0xa4, 0xb8, 0xe8, 0xa9, 0x52, 0xa5, 0x3d, 0xc0, 0x65, 0x58,
	0x4c, 0x80, 0x67, 0x82, 0xb7, 0x99, 0x17, 0x2b, 0xc6, 0xdf, 0x00, 0x2c, 0x9d, 0xc4, 0x62, 0xef,
	0xde, 0xc2, 0x4c, 0x8f, 0xf8, 0xb1, 0x6b, 0x9b, 0xa7, 0xb8, 0x76, 0x56, 0xa5, 0xd9, 0x24, 0xfe,
	0x73, 0x2e, 0x83, 0x61, 0x23, 0x3f, 0x1d, 0x55, 0xaf, 0xce, 0x5f, 0xd0, 0x66, 0x1e, 0xb6, 0x23,
	0xce, 0xca, 0x63, 0xb8, 0x3c, 0xcb, 0x41, 0x39, 0x98, 0xe9, 0xd0, 0xa1, 0xb6, 0xcb, 0x8e, 0x8e,
	0xa8, 0x00, 0x97, 0xf6, 0x49, 0xb7, 0x4f, 0xb5, 0x0d, 0xb6, 0xbe, 0x6c, 0xa5, 0x9f, 0x80, 0xfa,
	0xd7, 0x0c, 0x5c, 0x52, 0x5d, 0xd1, 0x7b, 0x00, 0xb3, 0xf3, 0x71, 0xa3, 0xda, 0xb9, 0xea, 0x16,
	0x16, 0xac, 0x72, 0xf7, 0x02, 0x99, 0xb1, 0x6f, 0xd5, 0x0f, 0x3f, 0x7e, 0x7f, 0x4e, 0x97, 0x51,
	0xd1, 0x4a, 0x96, 0xf9, 0x20, 0x19, 0xe2, 0x21, 0xfa, 0x04, 0xe0, 0xf2, 0xcc, 0x6d, 0x74, 0xe7,
	0x5c, 0xe2, 0x64, 0x4b, 0x2a, 0xb5, 0x7f, 0x27, 0xc6, 0x02, 0xea, 0x4a, 0xc0, 0x7d, 0xb4, 0x7e,
	0x86, 0x00, 0xeb, 0xe0, 0xf8, 0x5a, 0x1c, 0x46, 0xbe, 0xac, 0x2c, 0x8c, 0x04, 0xad, 0x5f, 0x68,
	0x6e, 0x5a, 0xd9, 0xbd, 0xff, 0x98, 0x31, 0x2e, 0x2b, 0x71, 0xd7, 0x51, 0x7e, 0x41, 0x9c, 0x9e,
	0x71, 0xe3, 0xd5, 0xf7, 0xb1, 0x01, 0x8e, 0xc6, 0x06, 0xf8, 0x35, 0x36, 0xc0, 0xc7, 0x89, 0x91,
	0x3a, 0x9a, 0x18, 0xa9, 0x9f, 0x13, 0x23, 0xf5, 0xee, 0x91, 0xc7, 0xe4, 0x6e, 0xbf, 0x65, 0x3a,
	0xa2, 0x17, 0x95, 0xb5, 0x45, 0x9f, 0xbb, 0xea, 0xdf, 0x88, 0x6e, 0x0f, 0x5a, 0x5d, 0xe1, 0x74,
	0x9c, 0x5d, 0xc2, 0xb8, 0x35, 0x88, 0x19, 0xe5, 0xd0, 0xa7, 0x61, 0xeb, 0x8a, 0xfa, 0x35, 0x1e,
	0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x1d, 0x17, 0xf1, 0xbc, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	TokenList(ctx context.Context, in *QueryTokenListRequest, opts ...grpc.CallOption) (*QueryTokenListResponse, error)
	TokenDoc(ctx context.Context, in *QueryTokenDocRequest, opts ...grpc.CallOption) (*QueryTokenDocResponse, error)
	TokenConfig(ctx context.Context, in *QueryTokenConfigRequest, opts ...grpc.CallOption) (*QueryTokenConfigResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TokenList(ctx context.Context, in *QueryTokenListRequest, opts ...grpc.CallOption) (*QueryTokenListResponse, error) {
	out := new(QueryTokenListResponse)
	err := c.cc.Invoke(ctx, "/ixo.token.v1beta1.Query/TokenList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenDoc(ctx context.Context, in *QueryTokenDocRequest, opts ...grpc.CallOption) (*QueryTokenDocResponse, error) {
	out := new(QueryTokenDocResponse)
	err := c.cc.Invoke(ctx, "/ixo.token.v1beta1.Query/TokenDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenConfig(ctx context.Context, in *QueryTokenConfigRequest, opts ...grpc.CallOption) (*QueryTokenConfigResponse, error) {
	out := new(QueryTokenConfigResponse)
	err := c.cc.Invoke(ctx, "/ixo.token.v1beta1.Query/TokenConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	TokenList(context.Context, *QueryTokenListRequest) (*QueryTokenListResponse, error)
	TokenDoc(context.Context, *QueryTokenDocRequest) (*QueryTokenDocResponse, error)
	TokenConfig(context.Context, *QueryTokenConfigRequest) (*QueryTokenConfigResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) TokenList(ctx context.Context, req *QueryTokenListRequest) (*QueryTokenListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenList not implemented")
}
func (*UnimplementedQueryServer) TokenDoc(ctx context.Context, req *QueryTokenDocRequest) (*QueryTokenDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenDoc not implemented")
}
func (*UnimplementedQueryServer) TokenConfig(ctx context.Context, req *QueryTokenConfigRequest) (*QueryTokenConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenConfig not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_TokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.token.v1beta1.Query/TokenList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenList(ctx, req.(*QueryTokenListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.token.v1beta1.Query/TokenDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenDoc(ctx, req.(*QueryTokenDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.token.v1beta1.Query/TokenConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenConfig(ctx, req.(*QueryTokenConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ixo.token.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TokenList",
			Handler:    _Query_TokenList_Handler,
		},
		{
			MethodName: "TokenDoc",
			Handler:    _Query_TokenDoc_Handler,
		},
		{
			MethodName: "TokenConfig",
			Handler:    _Query_TokenConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ixo/token/v1beta1/query.proto",
}

func (m *QueryTokenListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinterDid) > 0 {
		i -= len(m.MinterDid)
		copy(dAtA[i:], m.MinterDid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MinterDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contracts) > 0 {
		for iNdEx := len(m.Contracts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contracts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenDocRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenDocRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenDocRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MinterDid) > 0 {
		i -= len(m.MinterDid)
		copy(dAtA[i:], m.MinterDid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MinterDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenDocResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenDocResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenDocResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTokenConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTokenConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k := range m.Map {
			v := m.Map[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintQuery(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTokenListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MinterDid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contracts) > 0 {
		for _, e := range m.Contracts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTokenDocRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MinterDid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenDocResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTokenConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTokenConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + len(v) + sovQuery(uint64(len(v)))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTokenListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinterDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinterDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, &TokenMinter{})
			if err := m.Contracts[len(m.Contracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenDocRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenDocRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenDocRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinterDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinterDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenDocResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenDocResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenDocResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Map[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
