// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bonds/bonds.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FunctionParam is a key-value pair used for specifying a specific bond parameter.
type FunctionParam struct {
	Param string                                 `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty" yaml:"param"`
	Value github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=value,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"value" yaml:"value"`
}

func (m *FunctionParam) Reset()         { *m = FunctionParam{} }
func (m *FunctionParam) String() string { return proto.CompactTextString(m) }
func (*FunctionParam) ProtoMessage()    {}
func (*FunctionParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{0}
}
func (m *FunctionParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FunctionParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FunctionParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FunctionParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionParam.Merge(m, src)
}
func (m *FunctionParam) XXX_Size() int {
	return m.Size()
}
func (m *FunctionParam) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionParam.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionParam proto.InternalMessageInfo

func (m *FunctionParam) GetParam() string {
	if m != nil {
		return m.Param
	}
	return ""
}

// BondDetails contains details about the current state of a given bond.
type BondDetails struct {
	BondDid   string                                      `protobuf:"bytes,1,opt,name=bond_did,json=bondDid,proto3" json:"did" yaml:"did"`
	SpotPrice github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=spot_price,json=spotPrice,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"spot_price" yaml:"spot_price"`
	Supply    types.Coin                                  `protobuf:"bytes,3,opt,name=supply,proto3" json:"supply" yaml:"supply"`
	Reserve   github_com_cosmos_cosmos_sdk_types.Coins    `protobuf:"bytes,4,rep,name=reserve,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reserve" yaml:"reserve"`
}

func (m *BondDetails) Reset()         { *m = BondDetails{} }
func (m *BondDetails) String() string { return proto.CompactTextString(m) }
func (*BondDetails) ProtoMessage()    {}
func (*BondDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{1}
}
func (m *BondDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondDetails.Merge(m, src)
}
func (m *BondDetails) XXX_Size() int {
	return m.Size()
}
func (m *BondDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_BondDetails.DiscardUnknown(m)
}

var xxx_messageInfo_BondDetails proto.InternalMessageInfo

func (m *BondDetails) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

func (m *BondDetails) GetSpotPrice() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.SpotPrice
	}
	return nil
}

func (m *BondDetails) GetSupply() types.Coin {
	if m != nil {
		return m.Supply
	}
	return types.Coin{}
}

func (m *BondDetails) GetReserve() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Reserve
	}
	return nil
}

// Bond defines a token bonding curve type with all of its parameters.
type Bond struct {
	Token                        string                                   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty" yaml:"token"`
	Name                         string                                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	Description                  string                                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	CreatorDid                   string                                   `protobuf:"bytes,4,opt,name=creator_did,json=creatorDid,proto3" json:"creator_did,omitempty" yaml:"creator_did"`
	ControllerDid                string                                   `protobuf:"bytes,5,opt,name=controller_did,json=controllerDid,proto3" json:"controller_did,omitempty" yaml:"controller_did"`
	FunctionType                 string                                   `protobuf:"bytes,6,opt,name=function_type,json=functionType,proto3" json:"function_type,omitempty" yaml:"function_type"`
	FunctionParameters           FunctionParams                           `protobuf:"bytes,7,rep,name=function_parameters,json=functionParameters,proto3,castrepeated=FunctionParams" json:"function_parameters" yaml:"function_parameters"`
	ReserveTokens                []string                                 `protobuf:"bytes,8,rep,name=reserve_tokens,json=reserveTokens,proto3" json:"reserve_tokens,omitempty" yaml:"reserve_tokens"`
	TxFeePercentage              github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,9,opt,name=tx_fee_percentage,json=txFeePercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tx_fee_percentage" yaml:"tx_fee_percentage"`
	ExitFeePercentage            github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,10,opt,name=exit_fee_percentage,json=exitFeePercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exit_fee_percentage" yaml:"exit_fee_percentage"`
	FeeAddress                   string                                   `protobuf:"bytes,11,opt,name=fee_address,json=feeAddress,proto3" json:"fee_address,omitempty" yaml:"fee_address"`
	ReserveWithdrawalAddress     string                                   `protobuf:"bytes,12,opt,name=reserve_withdrawal_address,json=reserveWithdrawalAddress,proto3" json:"reserve_withdrawal_address,omitempty" yaml:"reserve_withdrawal_address"`
	MaxSupply                    types.Coin                               `protobuf:"bytes,13,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply" yaml:"max_supply"`
	OrderQuantityLimits          github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,14,rep,name=order_quantity_limits,json=orderQuantityLimits,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"order_quantity_limits" yaml:"order_quantity_limits"`
	SanityRate                   github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,15,opt,name=sanity_rate,json=sanityRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"sanity_rate" yaml:"sanity_rate"`
	SanityMarginPercentage       github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,16,opt,name=sanity_margin_percentage,json=sanityMarginPercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"sanity_margin_percentage" yaml:"sanity_margin_percentage"`
	CurrentSupply                types.Coin                               `protobuf:"bytes,17,opt,name=current_supply,json=currentSupply,proto3" json:"current_supply" yaml:"current_supply"`
	CurrentReserve               github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,18,rep,name=current_reserve,json=currentReserve,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"current_reserve" yaml:"current_reserve"`
	AvailableReserve             github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,19,rep,name=available_reserve,json=availableReserve,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"available_reserve" yaml:"available_reserve"`
	CurrentOutcomePaymentReserve github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,20,rep,name=current_outcome_payment_reserve,json=currentOutcomePaymentReserve,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"current_outcome_payment_reserve" yaml:"current_outcome_payment_reserve"`
	AllowSells                   bool                                     `protobuf:"varint,21,opt,name=allow_sells,json=allowSells,proto3" json:"allow_sells,omitempty" yaml:"allow_sells"`
	AllowReserveWithdrawals      bool                                     `protobuf:"varint,22,opt,name=allow_reserve_withdrawals,json=allowReserveWithdrawals,proto3" json:"allow_reserve_withdrawals,omitempty" yaml:"allow_reserve_withdrawals"`
	AlphaBond                    bool                                     `protobuf:"varint,23,opt,name=alpha_bond,json=alphaBond,proto3" json:"alpha_bond,omitempty" yaml:"alpha_bond"`
	BatchBlocks                  github_com_cosmos_cosmos_sdk_types.Uint  `protobuf:"bytes,24,opt,name=batch_blocks,json=batchBlocks,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"batch_blocks" yaml:"batch_blocks"`
	OutcomePayment               github_com_cosmos_cosmos_sdk_types.Int   `protobuf:"bytes,25,opt,name=outcome_payment,json=outcomePayment,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"outcome_payment" yaml:"outcome_payment"`
	State                        string                                   `protobuf:"bytes,26,opt,name=state,proto3" json:"state,omitempty" yaml:"state"`
	BondDid                      string                                   `protobuf:"bytes,27,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty" yaml:"bond_did"`
}

func (m *Bond) Reset()         { *m = Bond{} }
func (m *Bond) String() string { return proto.CompactTextString(m) }
func (*Bond) ProtoMessage()    {}
func (*Bond) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{2}
}
func (m *Bond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bond.Merge(m, src)
}
func (m *Bond) XXX_Size() int {
	return m.Size()
}
func (m *Bond) XXX_DiscardUnknown() {
	xxx_messageInfo_Bond.DiscardUnknown(m)
}

var xxx_messageInfo_Bond proto.InternalMessageInfo

func (m *Bond) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Bond) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Bond) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Bond) GetCreatorDid() string {
	if m != nil {
		return m.CreatorDid
	}
	return ""
}

func (m *Bond) GetControllerDid() string {
	if m != nil {
		return m.ControllerDid
	}
	return ""
}

func (m *Bond) GetFunctionType() string {
	if m != nil {
		return m.FunctionType
	}
	return ""
}

func (m *Bond) GetFunctionParameters() FunctionParams {
	if m != nil {
		return m.FunctionParameters
	}
	return nil
}

func (m *Bond) GetReserveTokens() []string {
	if m != nil {
		return m.ReserveTokens
	}
	return nil
}

func (m *Bond) GetFeeAddress() string {
	if m != nil {
		return m.FeeAddress
	}
	return ""
}

func (m *Bond) GetReserveWithdrawalAddress() string {
	if m != nil {
		return m.ReserveWithdrawalAddress
	}
	return ""
}

func (m *Bond) GetMaxSupply() types.Coin {
	if m != nil {
		return m.MaxSupply
	}
	return types.Coin{}
}

func (m *Bond) GetOrderQuantityLimits() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.OrderQuantityLimits
	}
	return nil
}

func (m *Bond) GetCurrentSupply() types.Coin {
	if m != nil {
		return m.CurrentSupply
	}
	return types.Coin{}
}

func (m *Bond) GetCurrentReserve() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CurrentReserve
	}
	return nil
}

func (m *Bond) GetAvailableReserve() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.AvailableReserve
	}
	return nil
}

func (m *Bond) GetCurrentOutcomePaymentReserve() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CurrentOutcomePaymentReserve
	}
	return nil
}

func (m *Bond) GetAllowSells() bool {
	if m != nil {
		return m.AllowSells
	}
	return false
}

func (m *Bond) GetAllowReserveWithdrawals() bool {
	if m != nil {
		return m.AllowReserveWithdrawals
	}
	return false
}

func (m *Bond) GetAlphaBond() bool {
	if m != nil {
		return m.AlphaBond
	}
	return false
}

func (m *Bond) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Bond) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

// BaseOrder defines a base order type. It contains all the necessary fields for specifying
// the general details about a buy, sell, or swap order.
type BaseOrder struct {
	AccountDid   string     `protobuf:"bytes,1,opt,name=account_did,json=accountDid,proto3" json:"account_did,omitempty" yaml:"account_did"`
	Amount       types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount" yaml:"amount"`
	Cancelled    bool       `protobuf:"varint,3,opt,name=cancelled,proto3" json:"cancelled,omitempty" yaml:"cancelled"`
	CancelReason string     `protobuf:"bytes,4,opt,name=cancel_reason,json=cancelReason,proto3" json:"cancel_reason,omitempty" yaml:"cancel_reason"`
}

func (m *BaseOrder) Reset()         { *m = BaseOrder{} }
func (m *BaseOrder) String() string { return proto.CompactTextString(m) }
func (*BaseOrder) ProtoMessage()    {}
func (*BaseOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{3}
}
func (m *BaseOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseOrder.Merge(m, src)
}
func (m *BaseOrder) XXX_Size() int {
	return m.Size()
}
func (m *BaseOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseOrder.DiscardUnknown(m)
}

var xxx_messageInfo_BaseOrder proto.InternalMessageInfo

func (m *BaseOrder) GetAccountDid() string {
	if m != nil {
		return m.AccountDid
	}
	return ""
}

func (m *BaseOrder) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *BaseOrder) GetCancelled() bool {
	if m != nil {
		return m.Cancelled
	}
	return false
}

func (m *BaseOrder) GetCancelReason() string {
	if m != nil {
		return m.CancelReason
	}
	return ""
}

// BuyOrder defines a type for submitting a buy order on a bond, together with the maximum
// amount of reserve tokens the buyer is willing to pay.
type BuyOrder struct {
	BaseOrder BaseOrder                                `protobuf:"bytes,1,opt,name=base_order,json=baseOrder,proto3" json:"base_order" yaml:"base_order"`
	MaxPrices github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=max_prices,json=maxPrices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"max_prices" yaml:"max_prices"`
}

func (m *BuyOrder) Reset()         { *m = BuyOrder{} }
func (m *BuyOrder) String() string { return proto.CompactTextString(m) }
func (*BuyOrder) ProtoMessage()    {}
func (*BuyOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{4}
}
func (m *BuyOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyOrder.Merge(m, src)
}
func (m *BuyOrder) XXX_Size() int {
	return m.Size()
}
func (m *BuyOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyOrder.DiscardUnknown(m)
}

var xxx_messageInfo_BuyOrder proto.InternalMessageInfo

func (m *BuyOrder) GetBaseOrder() BaseOrder {
	if m != nil {
		return m.BaseOrder
	}
	return BaseOrder{}
}

func (m *BuyOrder) GetMaxPrices() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MaxPrices
	}
	return nil
}

// SellOrder defines a type for submitting a sell order on a bond.
type SellOrder struct {
	BaseOrder BaseOrder `protobuf:"bytes,1,opt,name=base_order,json=baseOrder,proto3" json:"base_order" yaml:"base_order"`
}

func (m *SellOrder) Reset()         { *m = SellOrder{} }
func (m *SellOrder) String() string { return proto.CompactTextString(m) }
func (*SellOrder) ProtoMessage()    {}
func (*SellOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{5}
}
func (m *SellOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SellOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SellOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SellOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellOrder.Merge(m, src)
}
func (m *SellOrder) XXX_Size() int {
	return m.Size()
}
func (m *SellOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SellOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SellOrder proto.InternalMessageInfo

func (m *SellOrder) GetBaseOrder() BaseOrder {
	if m != nil {
		return m.BaseOrder
	}
	return BaseOrder{}
}

// SwapOrder defines a type for submitting a swap order between two tokens on a bond.
type SwapOrder struct {
	BaseOrder BaseOrder `protobuf:"bytes,1,opt,name=base_order,json=baseOrder,proto3" json:"base_order" yaml:"base_order"`
	ToToken   string    `protobuf:"bytes,2,opt,name=to_token,json=toToken,proto3" json:"to_token,omitempty" yaml:"to_token"`
}

func (m *SwapOrder) Reset()         { *m = SwapOrder{} }
func (m *SwapOrder) String() string { return proto.CompactTextString(m) }
func (*SwapOrder) ProtoMessage()    {}
func (*SwapOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{6}
}
func (m *SwapOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapOrder.Merge(m, src)
}
func (m *SwapOrder) XXX_Size() int {
	return m.Size()
}
func (m *SwapOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SwapOrder proto.InternalMessageInfo

func (m *SwapOrder) GetBaseOrder() BaseOrder {
	if m != nil {
		return m.BaseOrder
	}
	return BaseOrder{}
}

func (m *SwapOrder) GetToToken() string {
	if m != nil {
		return m.ToToken
	}
	return ""
}

// Batch holds a collection of outstanding buy, sell, and swap orders on a particular bond.
type Batch struct {
	BondDid         string                                      `protobuf:"bytes,1,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty" yaml:"bond_did"`
	BlocksRemaining github_com_cosmos_cosmos_sdk_types.Uint     `protobuf:"bytes,2,opt,name=blocks_remaining,json=blocksRemaining,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"blocks_remaining" yaml:"blocks_remaining"`
	NextPublicAlpha github_com_cosmos_cosmos_sdk_types.Dec      `protobuf:"bytes,3,opt,name=next_public_alpha,json=nextPublicAlpha,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"next_public_alpha" yaml:"next_public_alpha"`
	TotalBuyAmount  types.Coin                                  `protobuf:"bytes,4,opt,name=total_buy_amount,json=totalBuyAmount,proto3" json:"total_buy_amount" yaml:"total_buy_amount"`
	TotalSellAmount types.Coin                                  `protobuf:"bytes,5,opt,name=total_sell_amount,json=totalSellAmount,proto3" json:"total_sell_amount" yaml:"total_sell_amount"`
	BuyPrices       github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,6,rep,name=buy_prices,json=buyPrices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"buy_prices" yaml:"buy_prices"`
	SellPrices      github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,7,rep,name=sell_prices,json=sellPrices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"sell_prices" yaml:"sell_prices"`
	Buys            []BuyOrder                                  `protobuf:"bytes,8,rep,name=buys,proto3" json:"buys" yaml:"buys"`
	Sells           []SellOrder                                 `protobuf:"bytes,9,rep,name=sells,proto3" json:"sells" yaml:"sells"`
	Swaps           []SwapOrder                                 `protobuf:"bytes,10,rep,name=swaps,proto3" json:"swaps" yaml:"swaps"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{7}
}
func (m *Batch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return m.Size()
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

func (m *Batch) GetTotalBuyAmount() types.Coin {
	if m != nil {
		return m.TotalBuyAmount
	}
	return types.Coin{}
}

func (m *Batch) GetTotalSellAmount() types.Coin {
	if m != nil {
		return m.TotalSellAmount
	}
	return types.Coin{}
}

func (m *Batch) GetBuyPrices() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.BuyPrices
	}
	return nil
}

func (m *Batch) GetSellPrices() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.SellPrices
	}
	return nil
}

func (m *Batch) GetBuys() []BuyOrder {
	if m != nil {
		return m.Buys
	}
	return nil
}

func (m *Batch) GetSells() []SellOrder {
	if m != nil {
		return m.Sells
	}
	return nil
}

func (m *Batch) GetSwaps() []SwapOrder {
	if m != nil {
		return m.Swaps
	}
	return nil
}

// Params defines the parameters for the bonds module.
type Params struct {
	ReservedBondTokens []string `protobuf:"bytes,1,rep,name=reserved_bond_tokens,json=reservedBondTokens,proto3" json:"reserved_bond_tokens,omitempty" yaml:"reserved_bond_tokens"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aec84d2b0c1db90, []int{8}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetReservedBondTokens() []string {
	if m != nil {
		return m.ReservedBondTokens
	}
	return nil
}

func init() {
	proto.RegisterType((*FunctionParam)(nil), "bonds.FunctionParam")
	proto.RegisterType((*BondDetails)(nil), "bonds.BondDetails")
	proto.RegisterType((*Bond)(nil), "bonds.Bond")
	proto.RegisterType((*BaseOrder)(nil), "bonds.BaseOrder")
	proto.RegisterType((*BuyOrder)(nil), "bonds.BuyOrder")
	proto.RegisterType((*SellOrder)(nil), "bonds.SellOrder")
	proto.RegisterType((*SwapOrder)(nil), "bonds.SwapOrder")
	proto.RegisterType((*Batch)(nil), "bonds.Batch")
	proto.RegisterType((*Params)(nil), "bonds.Params")
}

func init() { proto.RegisterFile("bonds/bonds.proto", fileDescriptor_2aec84d2b0c1db90) }

var fileDescriptor_2aec84d2b0c1db90 = []byte{
	// 1696 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x6f, 0xdb, 0xc6,
	0x12, 0x37, 0xe3, 0x4f, 0x8d, 0x6c, 0xcb, 0xa2, 0xfc, 0x41, 0x3b, 0x79, 0xa6, 0xdf, 0xbe, 0xf7,
	0xf2, 0x0c, 0x3c, 0x44, 0x7e, 0xf1, 0xcb, 0x43, 0x82, 0xa2, 0x2d, 0x1a, 0xd5, 0x0d, 0x1c, 0x23,
	0x45, 0x9c, 0x75, 0x8a, 0x00, 0xe9, 0x81, 0x5d, 0x91, 0x6b, 0x9b, 0x08, 0x45, 0x2a, 0xe4, 0xd2,
	0x96, 0xd0, 0x02, 0x45, 0x0f, 0x45, 0x8b, 0x16, 0x2d, 0x7a, 0xe8, 0xbd, 0xf7, 0xfe, 0x0d, 0x45,
	0xcf, 0x39, 0xe6, 0x52, 0xb4, 0xe8, 0x81, 0x2d, 0x92, 0x5b, 0x8f, 0xfa, 0x0b, 0x8a, 0xfd, 0xa0,
	0x44, 0x4a, 0x6e, 0x64, 0x05, 0xb9, 0x48, 0x9a, 0x99, 0x9d, 0xdf, 0xcc, 0xce, 0xce, 0xcc, 0xce,
	0x0a, 0xca, 0xf5, 0xc0, 0x77, 0xa2, 0x2d, 0xf1, 0x59, 0x6d, 0x86, 0x01, 0x0b, 0xf4, 0x49, 0x41,
	0xac, 0x2d, 0x1e, 0x05, 0x47, 0x81, 0xe0, 0x6c, 0xf1, 0x5f, 0x52, 0xb8, 0x56, 0xb6, 0x83, 0xa8,
	0x11, 0x44, 0x5b, 0x76, 0xe0, 0xfa, 0x92, 0x85, 0xbe, 0xd2, 0x60, 0xee, 0x56, 0xec, 0xdb, 0xcc,
	0x0d, 0xfc, 0x7d, 0x12, 0x92, 0x86, 0x7e, 0x19, 0x26, 0x9b, 0xfc, 0x87, 0xa1, 0x6d, 0x68, 0x9b,
	0x85, 0xda, 0x42, 0x27, 0x31, 0x67, 0xdb, 0xa4, 0xe1, 0xbd, 0x86, 0x04, 0x1b, 0x61, 0x29, 0xd6,
	0xef, 0xc3, 0xe4, 0x09, 0xf1, 0x62, 0x6a, 0x5c, 0x10, 0xeb, 0xde, 0x7c, 0x92, 0x98, 0x63, 0xbf,
	0x26, 0xe6, 0xe5, 0x23, 0x97, 0x1d, 0xc7, 0xf5, 0xaa, 0x1d, 0x34, 0xb6, 0xba, 0xe6, 0xf8, 0xd7,
	0x95, 0xc8, 0x79, 0xb4, 0xc5, 0xda, 0x4d, 0x1a, 0x55, 0x77, 0xa8, 0xdd, 0x43, 0x15, 0x20, 0x08,
	0x4b, 0x30, 0xf4, 0xc5, 0x38, 0x14, 0x6b, 0x81, 0xef, 0xec, 0x50, 0x46, 0x5c, 0x2f, 0xd2, 0xff,
	0x0b, 0x33, 0x7c, 0x47, 0x96, 0xe3, 0x3a, 0xca, 0xa1, 0xa5, 0x3f, 0x12, 0x73, 0xdc, 0x71, 0x9d,
	0x4e, 0x62, 0x82, 0x44, 0x70, 0x5c, 0x07, 0xe1, 0x69, 0xbe, 0x6c, 0xc7, 0x75, 0xf4, 0x4f, 0x35,
	0x80, 0xa8, 0x19, 0x30, 0xab, 0x19, 0xba, 0x36, 0xf7, 0x6e, 0x7c, 0xb3, 0xb8, 0x7d, 0xa9, 0x2a,
	0x9d, 0xa8, 0xd6, 0x49, 0x44, 0xab, 0x27, 0x57, 0xeb, 0x94, 0x91, 0xab, 0xdc, 0x8f, 0xb7, 0x03,
	0xd7, 0xaf, 0xed, 0x72, 0xdf, 0x3b, 0x89, 0x59, 0x96, 0x78, 0x3d, 0x6d, 0xf4, 0xfd, 0x6f, 0xe6,
	0x7f, 0xce, 0xb7, 0x21, 0x0e, 0x14, 0xe1, 0x02, 0xd7, 0xdd, 0xe7, 0xaa, 0xfa, 0x2e, 0x4c, 0x45,
	0x71, 0xb3, 0xe9, 0xb5, 0x8d, 0xf1, 0x0d, 0x6d, 0xb3, 0xb8, 0xbd, 0x7a, 0xa6, 0x0b, 0xc2, 0xfe,
	0x92, 0xb2, 0x3f, 0xa7, 0xec, 0x0b, 0x35, 0x84, 0x95, 0xbe, 0x7e, 0x0a, 0xd3, 0x21, 0x8d, 0x68,
	0x78, 0x42, 0x8d, 0x09, 0xb1, 0x9b, 0x17, 0x40, 0xd5, 0x14, 0xd4, 0xbc, 0x84, 0x52, 0x7a, 0x7c,
	0x1f, 0x9b, 0xe7, 0xd8, 0x87, 0xdc, 0x44, 0x6a, 0x0d, 0xfd, 0x54, 0x81, 0x09, 0x7e, 0x18, 0x3c,
	0x27, 0x58, 0xf0, 0x88, 0xfa, 0x83, 0x39, 0x21, 0xd8, 0x08, 0x4b, 0xb1, 0xfe, 0x0f, 0x98, 0xf0,
	0x49, 0x23, 0x4d, 0x89, 0x52, 0x27, 0x31, 0x8b, 0x72, 0x19, 0xe7, 0x22, 0x2c, 0x84, 0xfa, 0x0d,
	0x28, 0x3a, 0x34, 0xb2, 0x43, 0xb7, 0xc9, 0x93, 0x4e, 0x44, 0xa7, 0x50, 0x5b, 0xee, 0x24, 0xa6,
	0xae, 0x8e, 0xb3, 0x27, 0x44, 0x38, 0xbb, 0x54, 0xbf, 0x0e, 0x45, 0x3b, 0xa4, 0x84, 0x05, 0xa1,
	0xc8, 0x87, 0x89, 0x7e, 0xcd, 0x8c, 0x10, 0x61, 0x50, 0x14, 0xcf, 0x89, 0xb7, 0x60, 0xde, 0x0e,
	0x7c, 0x16, 0x06, 0x9e, 0x47, 0xa5, 0xee, 0xa4, 0xd0, 0x5d, 0xed, 0x24, 0xe6, 0x92, 0xd2, 0xcd,
	0xc9, 0x11, 0x9e, 0xeb, 0x31, 0x38, 0xc2, 0x1b, 0x30, 0x77, 0xa8, 0xca, 0xc4, 0xe2, 0xb1, 0x32,
	0xa6, 0x04, 0x80, 0xd1, 0x49, 0xcc, 0x45, 0x09, 0x90, 0x13, 0x23, 0x3c, 0x9b, 0xd2, 0xf7, 0xdb,
	0x4d, 0xaa, 0x7f, 0x08, 0x95, 0xae, 0x5c, 0x94, 0x0f, 0x65, 0x34, 0x8c, 0x8c, 0x69, 0x71, 0x9c,
	0x8b, 0x55, 0x59, 0xc1, 0xb9, 0x3a, 0xac, 0x5d, 0x53, 0x27, 0xb9, 0xd6, 0x07, 0xdf, 0x53, 0xe7,
	0xa7, 0x3a, 0x9f, 0x53, 0x8a, 0xb0, 0x7e, 0x98, 0xa5, 0xc5, 0x32, 0xbe, 0x7b, 0x75, 0xa2, 0x96,
	0x38, 0xa6, 0xc8, 0x98, 0xd9, 0x18, 0xcf, 0xef, 0x3e, 0x2f, 0x47, 0x78, 0x4e, 0x31, 0xee, 0x0b,
	0x5a, 0x3f, 0x81, 0x32, 0x6b, 0x59, 0x87, 0x94, 0x5a, 0x4d, 0x1a, 0xda, 0xd4, 0x67, 0xe4, 0x88,
	0x1a, 0x05, 0x11, 0x81, 0xbd, 0x91, 0xeb, 0xde, 0x50, 0x99, 0xd3, 0x0f, 0x88, 0x70, 0x89, 0xb5,
	0x6e, 0x51, 0xba, 0xdf, 0xe5, 0xe8, 0x1f, 0x41, 0x85, 0xb6, 0x5c, 0xd6, 0x6f, 0x19, 0x84, 0xe5,
	0x3b, 0x23, 0x5b, 0x56, 0xa1, 0x3c, 0x03, 0x12, 0xe1, 0x32, 0xe7, 0xe6, 0xad, 0x5f, 0x87, 0x22,
	0x5f, 0x45, 0x1c, 0x27, 0xa4, 0x51, 0x64, 0x14, 0xfb, 0xd3, 0x2d, 0x23, 0x44, 0x18, 0x0e, 0x29,
	0xbd, 0x29, 0x09, 0xdd, 0x86, 0xb5, 0x34, 0xa0, 0xa7, 0x2e, 0x3b, 0x76, 0x42, 0x72, 0x4a, 0xbc,
	0x2e, 0xce, 0xac, 0xc0, 0xf9, 0x57, 0x27, 0x31, 0xff, 0x9e, 0x0f, 0xfe, 0xe0, 0x5a, 0x84, 0x0d,
	0x25, 0x7c, 0xd0, 0x95, 0xa5, 0x46, 0x0e, 0x00, 0x1a, 0xa4, 0x65, 0xa9, 0x1e, 0x33, 0x37, 0xac,
	0xc7, 0xac, 0xe6, 0x7b, 0x5c, 0x4f, 0x15, 0xe1, 0x42, 0x83, 0xb4, 0x0e, 0x64, 0xab, 0xf9, 0x4e,
	0x83, 0xa5, 0x20, 0x74, 0x68, 0x68, 0x3d, 0x8e, 0x89, 0xcf, 0x5c, 0xd6, 0xb6, 0x3c, 0xb7, 0xe1,
	0xb2, 0xc8, 0x98, 0x1f, 0xd6, 0x79, 0xf6, 0x95, 0x81, 0x4b, 0xd2, 0xc0, 0x99, 0x28, 0xa3, 0xf5,
	0xa1, 0x8a, 0xc0, 0xb8, 0xa7, 0x20, 0xee, 0x08, 0x04, 0x9d, 0x42, 0x31, 0x22, 0x3e, 0x87, 0x0c,
	0x09, 0xa3, 0x46, 0x49, 0x04, 0x73, 0x67, 0xe4, 0x54, 0x50, 0x47, 0x98, 0x81, 0x42, 0x18, 0x24,
	0x85, 0x09, 0xa3, 0xfa, 0x97, 0x1a, 0x18, 0x4a, 0xd8, 0x20, 0xe1, 0x91, 0xeb, 0x67, 0xf3, 0x6f,
	0x41, 0x18, 0xbd, 0x37, 0xb2, 0x51, 0x33, 0x67, 0x74, 0x00, 0x17, 0xe1, 0x65, 0x29, 0x7a, 0x57,
	0x48, 0x32, 0x99, 0x68, 0xc1, 0xbc, 0x1d, 0x87, 0x21, 0xf5, 0x59, 0x7a, 0xde, 0xe5, 0x61, 0xe7,
	0xfd, 0x37, 0x75, 0x1c, 0x69, 0x7b, 0xcb, 0xa9, 0xf3, 0xf6, 0x26, 0x19, 0xea, 0xdc, 0xbf, 0xd6,
	0xa0, 0x94, 0x2e, 0x49, 0xef, 0x1a, 0x7d, 0xd8, 0x89, 0xef, 0x29, 0x13, 0xcb, 0x79, 0x13, 0x2f,
	0x75, 0xe7, 0xa4, 0xfb, 0xc3, 0x52, 0x59, 0xff, 0x56, 0x83, 0x32, 0x39, 0x21, 0xae, 0x47, 0xea,
	0x1e, 0xed, 0xba, 0x54, 0x19, 0xe6, 0xd2, 0x1d, 0xe5, 0x92, 0xea, 0x31, 0x03, 0x08, 0xa3, 0x39,
	0xb5, 0xd0, 0xd5, 0x4f, 0xdd, 0xfa, 0x41, 0x03, 0x33, 0xdd, 0x67, 0x10, 0x33, 0x3b, 0x68, 0x50,
	0xab, 0x49, 0xda, 0x8d, 0x6c, 0xdc, 0x16, 0x87, 0x39, 0xf9, 0x50, 0x39, 0x79, 0x39, 0x1f, 0xb7,
	0xbf, 0xc0, 0x1b, 0xcd, 0xe5, 0x4b, 0x0a, 0xed, 0xae, 0x04, 0xdb, 0x97, 0x58, 0xa9, 0xfb, 0xd7,
	0xa1, 0x48, 0x3c, 0x2f, 0x38, 0xb5, 0x22, 0xea, 0x79, 0x91, 0xb1, 0xb4, 0xa1, 0x6d, 0xce, 0x64,
	0x3b, 0x5a, 0x46, 0x88, 0x30, 0x08, 0xea, 0x80, 0x13, 0xfa, 0x07, 0xb0, 0x2a, 0x65, 0x83, 0xbd,
	0x2a, 0x32, 0x96, 0x05, 0xcc, 0x3f, 0x3b, 0x89, 0xb9, 0x91, 0x85, 0x39, 0x63, 0x29, 0xc2, 0x2b,
	0x42, 0x86, 0xfb, 0x9b, 0x5a, 0xa4, 0x5f, 0x03, 0x20, 0x5e, 0xf3, 0x98, 0x58, 0xfc, 0x2e, 0x34,
	0x56, 0x04, 0xe4, 0x52, 0xaf, 0x5f, 0xf5, 0x64, 0x08, 0x17, 0x04, 0x21, 0x06, 0x13, 0x17, 0x66,
	0xeb, 0x84, 0xd9, 0xc7, 0x56, 0xdd, 0x0b, 0xec, 0x47, 0x91, 0x61, 0x88, 0xca, 0xbc, 0xa5, 0x2a,
	0xf3, 0xdf, 0xe7, 0x08, 0xdb, 0x7b, 0xae, 0xcf, 0x3a, 0x89, 0x59, 0x91, 0x66, 0xb2, 0x60, 0x08,
	0x17, 0x05, 0x59, 0x13, 0x94, 0xfe, 0x18, 0x4a, 0x7d, 0x27, 0x64, 0xac, 0x0a, 0x6b, 0xbb, 0x23,
	0xf4, 0x81, 0xdb, 0xc2, 0x98, 0x2a, 0x98, 0x3e, 0x38, 0x84, 0xe7, 0x83, 0xdc, 0xa9, 0xf1, 0xb1,
	0x2b, 0x62, 0xbc, 0xcb, 0xad, 0xf5, 0x8f, 0x5d, 0x82, 0x8d, 0xb0, 0x14, 0xeb, 0xd5, 0xcc, 0x90,
	0x7c, 0x51, 0x2c, 0xad, 0x74, 0x12, 0xb3, 0xa4, 0xb6, 0xa4, 0x24, 0xbd, 0x11, 0x19, 0x7d, 0x72,
	0x01, 0x0a, 0x35, 0x12, 0xd1, 0xbb, 0xbc, 0xbf, 0x8a, 0xa4, 0xb0, 0xed, 0x20, 0xf6, 0x59, 0x66,
	0xca, 0xce, 0x26, 0x45, 0x4f, 0xc8, 0x93, 0x42, 0x52, 0x7c, 0x26, 0xda, 0x85, 0x29, 0xd2, 0xe0,
	0x84, 0x98, 0xf7, 0x46, 0x99, 0x70, 0xa5, 0x1a, 0xc2, 0x4a, 0x5f, 0xdf, 0x86, 0x82, 0x4d, 0x7c,
	0x9b, 0x7a, 0x1e, 0x75, 0xc4, 0x40, 0x38, 0x53, 0x5b, 0xec, 0x24, 0xe6, 0x82, 0x2a, 0x90, 0x54,
	0x84, 0x70, 0x6f, 0x19, 0x9f, 0xc8, 0x24, 0x61, 0x85, 0x94, 0x44, 0x81, 0xaf, 0xc6, 0xc1, 0xcc,
	0x44, 0x96, 0x13, 0x23, 0x3c, 0x2b, 0x69, 0x2c, 0xc9, 0x9f, 0x35, 0x98, 0xa9, 0xc5, 0x6d, 0x19,
	0x82, 0x3d, 0x00, 0xee, 0xb3, 0x25, 0x2e, 0x1c, 0x11, 0x81, 0xe2, 0xf6, 0x82, 0x9a, 0xca, 0xba,
	0x81, 0xea, 0xbf, 0x42, 0x7b, 0x1a, 0x08, 0x17, 0xea, 0xdd, 0x70, 0x7e, 0x2c, 0xef, 0x65, 0xf1,
	0x7e, 0x88, 0xd4, 0xf3, 0xe3, 0x05, 0x91, 0x79, 0x67, 0xf0, 0x5e, 0x96, 0xaa, 0xa3, 0xd5, 0x3d,
	0xbf, 0xc3, 0xf7, 0xa5, 0xde, 0x03, 0x28, 0xf0, 0xa2, 0x7d, 0xe5, 0x3b, 0x43, 0x9f, 0x69, 0x50,
	0x38, 0x38, 0x25, 0xcd, 0x57, 0x1f, 0xb3, 0x2a, 0xcc, 0xb0, 0x40, 0x0e, 0x9f, 0xea, 0xed, 0x90,
	0x49, 0xe0, 0x54, 0x82, 0xf0, 0x34, 0x0b, 0xc4, 0x40, 0x8a, 0x7e, 0x9c, 0x86, 0xc9, 0x1a, 0xaf,
	0xcd, 0x5c, 0xea, 0x6b, 0xc3, 0x53, 0x5f, 0x8f, 0x61, 0x41, 0x56, 0xb7, 0x15, 0xd2, 0x06, 0x71,
	0x7d, 0xd7, 0x3f, 0x52, 0x16, 0xf7, 0x46, 0x6f, 0x1a, 0x2b, 0xca, 0x4c, 0x1f, 0x20, 0xc2, 0x25,
	0xc9, 0xc2, 0x29, 0x87, 0x0f, 0xd0, 0x3e, 0x6d, 0x31, 0xab, 0x19, 0xd7, 0x3d, 0xd7, 0xb6, 0x44,
	0x03, 0x53, 0x2f, 0x9f, 0x97, 0x1e, 0xa0, 0x07, 0x00, 0x11, 0x2e, 0x71, 0xde, 0xbe, 0x60, 0xdd,
	0xe4, 0x1c, 0xdd, 0x81, 0x05, 0x16, 0x30, 0xe2, 0x59, 0xf5, 0xb8, 0x6d, 0xa9, 0x62, 0x9d, 0x18,
	0x56, 0xac, 0xa6, 0x3a, 0xb3, 0x95, 0x34, 0xfe, 0x79, 0x00, 0x84, 0xe7, 0x05, 0xab, 0x16, 0xb7,
	0x6f, 0xca, 0xf2, 0x3d, 0x82, 0xb2, 0x5c, 0xc4, 0x6f, 0x8e, 0xd4, 0xcc, 0xe4, 0x30, 0x33, 0x1b,
	0xf9, 0xbb, 0x7a, 0x00, 0x81, 0xbf, 0x07, 0x38, 0x8f, 0x27, 0xb3, 0x32, 0xc4, 0xdf, 0xf6, 0xdc,
	0x11, 0x55, 0x5c, 0x53, 0xa3, 0xbf, 0xed, 0x7b, 0xda, 0xa3, 0xbf, 0xed, 0xeb, 0x71, 0x5b, 0x96,
	0x98, 0xfe, 0xb9, 0x06, 0x45, 0xe1, 0xa9, 0x72, 0x64, 0xfa, 0x1c, 0x8e, 0xdc, 0x56, 0x8e, 0xa4,
	0x93, 0x67, 0x4f, 0x7d, 0x64, 0x4f, 0x80, 0x2b, 0x2b, 0x57, 0x6e, 0xc0, 0x44, 0x3d, 0x6e, 0xcb,
	0x27, 0x5d, 0x71, 0xbb, 0x94, 0x16, 0xa0, 0xea, 0x6c, 0xb5, 0x8a, 0xb2, 0x5a, 0xec, 0x6e, 0x3f,
	0x42, 0x58, 0x68, 0xe8, 0xaf, 0xc3, 0xa4, 0x1c, 0x03, 0x0a, 0x42, 0x35, 0xad, 0xdd, 0x6e, 0xef,
	0xa8, 0x2d, 0x2a, 0xdd, 0xd9, 0x9e, 0xc7, 0x11, 0xbf, 0x73, 0xc4, 0x44, 0xc0, 0xb5, 0x4f, 0x49,
	0x33, 0x32, 0x20, 0xaf, 0x9d, 0xf6, 0x87, 0x01, 0x6d, 0xbe, 0x98, 0x6b, 0x8b, 0xef, 0xf7, 0x61,
	0x4a, 0x3e, 0x58, 0xf5, 0x7b, 0xb0, 0xa8, 0x06, 0x05, 0x47, 0x5c, 0xef, 0xe9, 0x13, 0x55, 0x13,
	0x4f, 0x54, 0xb3, 0x93, 0x98, 0x17, 0x73, 0xaf, 0xa4, 0xdc, 0x2a, 0x84, 0xf5, 0x94, 0xcd, 0xc7,
	0x01, 0xf9, 0x5a, 0xad, 0xdd, 0x7d, 0xf2, 0x6c, 0x5d, 0x7b, 0xfa, 0x6c, 0x5d, 0xfb, 0xfd, 0xd9,
	0xba, 0xf6, 0xcd, 0xf3, 0xf5, 0xb1, 0xa7, 0xcf, 0xd7, 0xc7, 0x7e, 0x79, 0xbe, 0x3e, 0xf6, 0xf0,
	0xff, 0x99, 0x28, 0xbb, 0xad, 0xe0, 0x30, 0x88, 0x7d, 0x87, 0xf0, 0xd7, 0x32, 0xa7, 0xae, 0x88,
	0xa2, 0xb5, 0x8f, 0x89, 0xeb, 0x6f, 0xb5, 0xe4, 0x9f, 0x6a, 0x32, 0xf0, 0xf5, 0x29, 0xf1, 0x5f,
	0xd9, 0xff, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x50, 0x61, 0x6b, 0xaf, 0x70, 0x13, 0x00, 0x00,
}

func (m *FunctionParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FunctionParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FunctionParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Param) > 0 {
		i -= len(m.Param)
		copy(dAtA[i:], m.Param)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.Param)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reserve) > 0 {
		for iNdEx := len(m.Reserve) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reserve[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.Supply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.SpotPrice) > 0 {
		for iNdEx := len(m.SpotPrice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpotPrice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	{
		size := m.OutcomePayment.Size()
		i -= size
		if _, err := m.OutcomePayment.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	{
		size := m.BatchBlocks.Size()
		i -= size
		if _, err := m.BatchBlocks.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	if m.AlphaBond {
		i--
		if m.AlphaBond {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.AllowReserveWithdrawals {
		i--
		if m.AllowReserveWithdrawals {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.AllowSells {
		i--
		if m.AllowSells {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.CurrentOutcomePaymentReserve) > 0 {
		for iNdEx := len(m.CurrentOutcomePaymentReserve) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentOutcomePaymentReserve[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.AvailableReserve) > 0 {
		for iNdEx := len(m.AvailableReserve) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AvailableReserve[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.CurrentReserve) > 0 {
		for iNdEx := len(m.CurrentReserve) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentReserve[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	{
		size, err := m.CurrentSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.SanityMarginPercentage.Size()
		i -= size
		if _, err := m.SanityMarginPercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.SanityRate.Size()
		i -= size
		if _, err := m.SanityRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if len(m.OrderQuantityLimits) > 0 {
		for iNdEx := len(m.OrderQuantityLimits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderQuantityLimits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	{
		size, err := m.MaxSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.ReserveWithdrawalAddress) > 0 {
		i -= len(m.ReserveWithdrawalAddress)
		copy(dAtA[i:], m.ReserveWithdrawalAddress)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.ReserveWithdrawalAddress)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.FeeAddress) > 0 {
		i -= len(m.FeeAddress)
		copy(dAtA[i:], m.FeeAddress)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.FeeAddress)))
		i--
		dAtA[i] = 0x5a
	}
	{
		size := m.ExitFeePercentage.Size()
		i -= size
		if _, err := m.ExitFeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.TxFeePercentage.Size()
		i -= size
		if _, err := m.TxFeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.ReserveTokens) > 0 {
		for iNdEx := len(m.ReserveTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReserveTokens[iNdEx])
			copy(dAtA[i:], m.ReserveTokens[iNdEx])
			i = encodeVarintBonds(dAtA, i, uint64(len(m.ReserveTokens[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.FunctionParameters) > 0 {
		for iNdEx := len(m.FunctionParameters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FunctionParameters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.FunctionType) > 0 {
		i -= len(m.FunctionType)
		copy(dAtA[i:], m.FunctionType)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.FunctionType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ControllerDid) > 0 {
		i -= len(m.ControllerDid)
		copy(dAtA[i:], m.ControllerDid)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.ControllerDid)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CreatorDid) > 0 {
		i -= len(m.CreatorDid)
		copy(dAtA[i:], m.CreatorDid)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.CreatorDid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CancelReason) > 0 {
		i -= len(m.CancelReason)
		copy(dAtA[i:], m.CancelReason)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.CancelReason)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cancelled {
		i--
		if m.Cancelled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.AccountDid) > 0 {
		i -= len(m.AccountDid)
		copy(dAtA[i:], m.AccountDid)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.AccountDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuyOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxPrices) > 0 {
		for iNdEx := len(m.MaxPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.BaseOrder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SellOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SellOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SellOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BaseOrder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SwapOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToToken) > 0 {
		i -= len(m.ToToken)
		copy(dAtA[i:], m.ToToken)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.ToToken)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.BaseOrder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Batch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Batch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Batch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Swaps) > 0 {
		for iNdEx := len(m.Swaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Swaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Sells) > 0 {
		for iNdEx := len(m.Sells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Buys) > 0 {
		for iNdEx := len(m.Buys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Buys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SellPrices) > 0 {
		for iNdEx := len(m.SellPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BuyPrices) > 0 {
		for iNdEx := len(m.BuyPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBonds(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size, err := m.TotalSellAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.TotalBuyAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.NextPublicAlpha.Size()
		i -= size
		if _, err := m.NextPublicAlpha.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.BlocksRemaining.Size()
		i -= size
		if _, err := m.BlocksRemaining.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBonds(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintBonds(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReservedBondTokens) > 0 {
		for iNdEx := len(m.ReservedBondTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReservedBondTokens[iNdEx])
			copy(dAtA[i:], m.ReservedBondTokens[iNdEx])
			i = encodeVarintBonds(dAtA, i, uint64(len(m.ReservedBondTokens[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBonds(dAtA []byte, offset int, v uint64) int {
	offset -= sovBonds(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FunctionParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Param)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovBonds(uint64(l))
	return n
}

func (m *BondDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	if len(m.SpotPrice) > 0 {
		for _, e := range m.SpotPrice {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	l = m.Supply.Size()
	n += 1 + l + sovBonds(uint64(l))
	if len(m.Reserve) > 0 {
		for _, e := range m.Reserve {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	return n
}

func (m *Bond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = len(m.CreatorDid)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = len(m.ControllerDid)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = len(m.FunctionType)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	if len(m.FunctionParameters) > 0 {
		for _, e := range m.FunctionParameters {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.ReserveTokens) > 0 {
		for _, s := range m.ReserveTokens {
			l = len(s)
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	l = m.TxFeePercentage.Size()
	n += 1 + l + sovBonds(uint64(l))
	l = m.ExitFeePercentage.Size()
	n += 1 + l + sovBonds(uint64(l))
	l = len(m.FeeAddress)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = len(m.ReserveWithdrawalAddress)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = m.MaxSupply.Size()
	n += 1 + l + sovBonds(uint64(l))
	if len(m.OrderQuantityLimits) > 0 {
		for _, e := range m.OrderQuantityLimits {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	l = m.SanityRate.Size()
	n += 1 + l + sovBonds(uint64(l))
	l = m.SanityMarginPercentage.Size()
	n += 2 + l + sovBonds(uint64(l))
	l = m.CurrentSupply.Size()
	n += 2 + l + sovBonds(uint64(l))
	if len(m.CurrentReserve) > 0 {
		for _, e := range m.CurrentReserve {
			l = e.Size()
			n += 2 + l + sovBonds(uint64(l))
		}
	}
	if len(m.AvailableReserve) > 0 {
		for _, e := range m.AvailableReserve {
			l = e.Size()
			n += 2 + l + sovBonds(uint64(l))
		}
	}
	if len(m.CurrentOutcomePaymentReserve) > 0 {
		for _, e := range m.CurrentOutcomePaymentReserve {
			l = e.Size()
			n += 2 + l + sovBonds(uint64(l))
		}
	}
	if m.AllowSells {
		n += 3
	}
	if m.AllowReserveWithdrawals {
		n += 3
	}
	if m.AlphaBond {
		n += 3
	}
	l = m.BatchBlocks.Size()
	n += 2 + l + sovBonds(uint64(l))
	l = m.OutcomePayment.Size()
	n += 2 + l + sovBonds(uint64(l))
	l = len(m.State)
	if l > 0 {
		n += 2 + l + sovBonds(uint64(l))
	}
	l = len(m.BondDid)
	if l > 0 {
		n += 2 + l + sovBonds(uint64(l))
	}
	return n
}

func (m *BaseOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountDid)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovBonds(uint64(l))
	if m.Cancelled {
		n += 2
	}
	l = len(m.CancelReason)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	return n
}

func (m *BuyOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaseOrder.Size()
	n += 1 + l + sovBonds(uint64(l))
	if len(m.MaxPrices) > 0 {
		for _, e := range m.MaxPrices {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	return n
}

func (m *SellOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaseOrder.Size()
	n += 1 + l + sovBonds(uint64(l))
	return n
}

func (m *SwapOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaseOrder.Size()
	n += 1 + l + sovBonds(uint64(l))
	l = len(m.ToToken)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	return n
}

func (m *Batch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovBonds(uint64(l))
	}
	l = m.BlocksRemaining.Size()
	n += 1 + l + sovBonds(uint64(l))
	l = m.NextPublicAlpha.Size()
	n += 1 + l + sovBonds(uint64(l))
	l = m.TotalBuyAmount.Size()
	n += 1 + l + sovBonds(uint64(l))
	l = m.TotalSellAmount.Size()
	n += 1 + l + sovBonds(uint64(l))
	if len(m.BuyPrices) > 0 {
		for _, e := range m.BuyPrices {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.SellPrices) > 0 {
		for _, e := range m.SellPrices {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.Buys) > 0 {
		for _, e := range m.Buys {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.Sells) > 0 {
		for _, e := range m.Sells {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	if len(m.Swaps) > 0 {
		for _, e := range m.Swaps {
			l = e.Size()
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReservedBondTokens) > 0 {
		for _, s := range m.ReservedBondTokens {
			l = len(s)
			n += 1 + l + sovBonds(uint64(l))
		}
	}
	return n
}

func sovBonds(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBonds(x uint64) (n int) {
	return sovBonds(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FunctionParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FunctionParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FunctionParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpotPrice = append(m.SpotPrice, types.DecCoin{})
			if err := m.SpotPrice[len(m.SpotPrice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Supply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve = append(m.Reserve, types.Coin{})
			if err := m.Reserve[len(m.Reserve)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControllerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControllerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunctionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionParameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunctionParameters = append(m.FunctionParameters, FunctionParam{})
			if err := m.FunctionParameters[len(m.FunctionParameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveTokens = append(m.ReserveTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExitFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveWithdrawalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveWithdrawalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderQuantityLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderQuantityLimits = append(m.OrderQuantityLimits, types.Coin{})
			if err := m.OrderQuantityLimits[len(m.OrderQuantityLimits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SanityRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SanityRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SanityMarginPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SanityMarginPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentReserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentReserve = append(m.CurrentReserve, types.Coin{})
			if err := m.CurrentReserve[len(m.CurrentReserve)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableReserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableReserve = append(m.AvailableReserve, types.Coin{})
			if err := m.AvailableReserve[len(m.AvailableReserve)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentOutcomePaymentReserve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentOutcomePaymentReserve = append(m.CurrentOutcomePaymentReserve, types.Coin{})
			if err := m.CurrentOutcomePaymentReserve[len(m.CurrentOutcomePaymentReserve)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowSells", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowSells = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowReserveWithdrawals", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowReserveWithdrawals = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlphaBond", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlphaBond = bool(v != 0)
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchBlocks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BatchBlocks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutcomePayment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutcomePayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancelled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cancelled = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxPrices = append(m.MaxPrices, types.Coin{})
			if err := m.MaxPrices[len(m.MaxPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SellOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SellOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SellOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Batch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Batch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Batch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksRemaining", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlocksRemaining.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPublicAlpha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NextPublicAlpha.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBuyAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBuyAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSellAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSellAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyPrices = append(m.BuyPrices, types.DecCoin{})
			if err := m.BuyPrices[len(m.BuyPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellPrices = append(m.SellPrices, types.DecCoin{})
			if err := m.SellPrices[len(m.SellPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buys = append(m.Buys, BuyOrder{})
			if err := m.Buys[len(m.Buys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sells = append(m.Sells, SellOrder{})
			if err := m.Sells[len(m.Sells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swaps = append(m.Swaps, SwapOrder{})
			if err := m.Swaps[len(m.Swaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedBondTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBonds
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBonds
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedBondTokens = append(m.ReservedBondTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBonds(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBonds
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBonds(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBonds
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBonds
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBonds
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBonds
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBonds
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBonds        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBonds          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBonds = fmt.Errorf("proto: unexpected end of group")
)
