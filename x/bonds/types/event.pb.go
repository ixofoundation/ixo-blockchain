// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ixo/bonds/v1beta1/event.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BondCreatedEvent is an event triggered on a Bond creation
type BondCreatedEvent struct {
	Bond *Bond `protobuf:"bytes,1,opt,name=bond,proto3" json:"bond,omitempty"`
}

func (m *BondCreatedEvent) Reset()         { *m = BondCreatedEvent{} }
func (m *BondCreatedEvent) String() string { return proto.CompactTextString(m) }
func (*BondCreatedEvent) ProtoMessage()    {}
func (*BondCreatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b836af92b7c9cac, []int{0}
}
func (m *BondCreatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondCreatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondCreatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondCreatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondCreatedEvent.Merge(m, src)
}
func (m *BondCreatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *BondCreatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BondCreatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BondCreatedEvent proto.InternalMessageInfo

func (m *BondCreatedEvent) GetBond() *Bond {
	if m != nil {
		return m.Bond
	}
	return nil
}

// BondUpdatedEvent is an event triggered on a Bond update
type BondUpdatedEvent struct {
	Bond *Bond `protobuf:"bytes,1,opt,name=bond,proto3" json:"bond,omitempty"`
}

func (m *BondUpdatedEvent) Reset()         { *m = BondUpdatedEvent{} }
func (m *BondUpdatedEvent) String() string { return proto.CompactTextString(m) }
func (*BondUpdatedEvent) ProtoMessage()    {}
func (*BondUpdatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b836af92b7c9cac, []int{1}
}
func (m *BondUpdatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondUpdatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondUpdatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondUpdatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondUpdatedEvent.Merge(m, src)
}
func (m *BondUpdatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *BondUpdatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BondUpdatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BondUpdatedEvent proto.InternalMessageInfo

func (m *BondUpdatedEvent) GetBond() *Bond {
	if m != nil {
		return m.Bond
	}
	return nil
}

// BondSetNextAlphaEvent is an event triggered when next batch alpha is set
type BondSetNextAlphaEvent struct {
	BondDid   string `protobuf:"bytes,1,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
	NextAlpha string `protobuf:"bytes,2,opt,name=next_alpha,json=nextAlpha,proto3" json:"next_alpha,omitempty"`
	Signer    string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *BondSetNextAlphaEvent) Reset()         { *m = BondSetNextAlphaEvent{} }
func (m *BondSetNextAlphaEvent) String() string { return proto.CompactTextString(m) }
func (*BondSetNextAlphaEvent) ProtoMessage()    {}
func (*BondSetNextAlphaEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b836af92b7c9cac, []int{2}
}
func (m *BondSetNextAlphaEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondSetNextAlphaEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondSetNextAlphaEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondSetNextAlphaEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondSetNextAlphaEvent.Merge(m, src)
}
func (m *BondSetNextAlphaEvent) XXX_Size() int {
	return m.Size()
}
func (m *BondSetNextAlphaEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BondSetNextAlphaEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BondSetNextAlphaEvent proto.InternalMessageInfo

func (m *BondSetNextAlphaEvent) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

func (m *BondSetNextAlphaEvent) GetNextAlpha() string {
	if m != nil {
		return m.NextAlpha
	}
	return ""
}

func (m *BondSetNextAlphaEvent) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// BondBuyOrderEvent is an event triggered on a Bond buy order
type BondBuyOrderEvent struct {
	Order   *BuyOrder `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	BondDid string    `protobuf:"bytes,2,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
}

func (m *BondBuyOrderEvent) Reset()         { *m = BondBuyOrderEvent{} }
func (m *BondBuyOrderEvent) String() string { return proto.CompactTextString(m) }
func (*BondBuyOrderEvent) ProtoMessage()    {}
func (*BondBuyOrderEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b836af92b7c9cac, []int{3}
}
func (m *BondBuyOrderEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondBuyOrderEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondBuyOrderEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondBuyOrderEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondBuyOrderEvent.Merge(m, src)
}
func (m *BondBuyOrderEvent) XXX_Size() int {
	return m.Size()
}
func (m *BondBuyOrderEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BondBuyOrderEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BondBuyOrderEvent proto.InternalMessageInfo

func (m *BondBuyOrderEvent) GetOrder() *BuyOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *BondBuyOrderEvent) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

// BondSellOrderEvent is an event triggered on a Bond sell order
type BondSellOrderEvent struct {
	Order   *SellOrder `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	BondDid string     `protobuf:"bytes,2,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
}

func (m *BondSellOrderEvent) Reset()         { *m = BondSellOrderEvent{} }
func (m *BondSellOrderEvent) String() string { return proto.CompactTextString(m) }
func (*BondSellOrderEvent) ProtoMessage()    {}
func (*BondSellOrderEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b836af92b7c9cac, []int{4}
}
func (m *BondSellOrderEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondSellOrderEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondSellOrderEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondSellOrderEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondSellOrderEvent.Merge(m, src)
}
func (m *BondSellOrderEvent) XXX_Size() int {
	return m.Size()
}
func (m *BondSellOrderEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BondSellOrderEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BondSellOrderEvent proto.InternalMessageInfo

func (m *BondSellOrderEvent) GetOrder() *SellOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *BondSellOrderEvent) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

// BondSwapOrderEvent is an event triggered on a Bond swap order
type BondSwapOrderEvent struct {
	Order   *SwapOrder `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	BondDid string     `protobuf:"bytes,2,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
}

func (m *BondSwapOrderEvent) Reset()         { *m = BondSwapOrderEvent{} }
func (m *BondSwapOrderEvent) String() string { return proto.CompactTextString(m) }
func (*BondSwapOrderEvent) ProtoMessage()    {}
func (*BondSwapOrderEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b836af92b7c9cac, []int{5}
}
func (m *BondSwapOrderEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondSwapOrderEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondSwapOrderEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondSwapOrderEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondSwapOrderEvent.Merge(m, src)
}
func (m *BondSwapOrderEvent) XXX_Size() int {
	return m.Size()
}
func (m *BondSwapOrderEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BondSwapOrderEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BondSwapOrderEvent proto.InternalMessageInfo

func (m *BondSwapOrderEvent) GetOrder() *SwapOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *BondSwapOrderEvent) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

// BondMakeOutcomePaymentEvent is an event triggered on a Bond make outcome
// payment
type BondMakeOutcomePaymentEvent struct {
	BondDid        string                                   `protobuf:"bytes,1,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
	OutcomePayment github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=outcome_payment,json=outcomePayment,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"outcome_payment"`
	SenderDid      string                                   `protobuf:"bytes,3,opt,name=sender_did,json=senderDid,proto3" json:"sender_did,omitempty"`
	SenderAddress  string                                   `protobuf:"bytes,4,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
}

func (m *BondMakeOutcomePaymentEvent) Reset()         { *m = BondMakeOutcomePaymentEvent{} }
func (m *BondMakeOutcomePaymentEvent) String() string { return proto.CompactTextString(m) }
func (*BondMakeOutcomePaymentEvent) ProtoMessage()    {}
func (*BondMakeOutcomePaymentEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b836af92b7c9cac, []int{6}
}
func (m *BondMakeOutcomePaymentEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondMakeOutcomePaymentEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondMakeOutcomePaymentEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondMakeOutcomePaymentEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondMakeOutcomePaymentEvent.Merge(m, src)
}
func (m *BondMakeOutcomePaymentEvent) XXX_Size() int {
	return m.Size()
}
func (m *BondMakeOutcomePaymentEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BondMakeOutcomePaymentEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BondMakeOutcomePaymentEvent proto.InternalMessageInfo

func (m *BondMakeOutcomePaymentEvent) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

func (m *BondMakeOutcomePaymentEvent) GetOutcomePayment() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.OutcomePayment
	}
	return nil
}

func (m *BondMakeOutcomePaymentEvent) GetSenderDid() string {
	if m != nil {
		return m.SenderDid
	}
	return ""
}

func (m *BondMakeOutcomePaymentEvent) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

// BondWithdrawShareEvent is an event triggered on a Bond share withdrawal
type BondWithdrawShareEvent struct {
	BondDid          string                                   `protobuf:"bytes,1,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
	WithdrawPayment  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=withdraw_payment,json=withdrawPayment,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"withdraw_payment"`
	RecipientDid     string                                   `protobuf:"bytes,3,opt,name=recipient_did,json=recipientDid,proto3" json:"recipient_did,omitempty"`
	RecipientAddress string                                   `protobuf:"bytes,4,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
}

func (m *BondWithdrawShareEvent) Reset()         { *m = BondWithdrawShareEvent{} }
func (m *BondWithdrawShareEvent) String() string { return proto.CompactTextString(m) }
func (*BondWithdrawShareEvent) ProtoMessage()    {}
func (*BondWithdrawShareEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b836af92b7c9cac, []int{7}
}
func (m *BondWithdrawShareEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondWithdrawShareEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondWithdrawShareEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondWithdrawShareEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondWithdrawShareEvent.Merge(m, src)
}
func (m *BondWithdrawShareEvent) XXX_Size() int {
	return m.Size()
}
func (m *BondWithdrawShareEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BondWithdrawShareEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BondWithdrawShareEvent proto.InternalMessageInfo

func (m *BondWithdrawShareEvent) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

func (m *BondWithdrawShareEvent) GetWithdrawPayment() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.WithdrawPayment
	}
	return nil
}

func (m *BondWithdrawShareEvent) GetRecipientDid() string {
	if m != nil {
		return m.RecipientDid
	}
	return ""
}

func (m *BondWithdrawShareEvent) GetRecipientAddress() string {
	if m != nil {
		return m.RecipientAddress
	}
	return ""
}

// BondWithdrawReserveEvent is an event triggered on a Bond reserve withdrawal
type BondWithdrawReserveEvent struct {
	BondDid                  string                                   `protobuf:"bytes,1,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
	WithdrawAmount           github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=withdraw_amount,json=withdrawAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"withdraw_amount"`
	WithdrawerDid            string                                   `protobuf:"bytes,3,opt,name=withdrawer_did,json=withdrawerDid,proto3" json:"withdrawer_did,omitempty"`
	WithdrawerAddress        string                                   `protobuf:"bytes,4,opt,name=withdrawer_address,json=withdrawerAddress,proto3" json:"withdrawer_address,omitempty"`
	ReserveWithdrawalAddress string                                   `protobuf:"bytes,5,opt,name=reserve_withdrawal_address,json=reserveWithdrawalAddress,proto3" json:"reserve_withdrawal_address,omitempty"`
}

func (m *BondWithdrawReserveEvent) Reset()         { *m = BondWithdrawReserveEvent{} }
func (m *BondWithdrawReserveEvent) String() string { return proto.CompactTextString(m) }
func (*BondWithdrawReserveEvent) ProtoMessage()    {}
func (*BondWithdrawReserveEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b836af92b7c9cac, []int{8}
}
func (m *BondWithdrawReserveEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondWithdrawReserveEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondWithdrawReserveEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondWithdrawReserveEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondWithdrawReserveEvent.Merge(m, src)
}
func (m *BondWithdrawReserveEvent) XXX_Size() int {
	return m.Size()
}
func (m *BondWithdrawReserveEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BondWithdrawReserveEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BondWithdrawReserveEvent proto.InternalMessageInfo

func (m *BondWithdrawReserveEvent) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

func (m *BondWithdrawReserveEvent) GetWithdrawAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.WithdrawAmount
	}
	return nil
}

func (m *BondWithdrawReserveEvent) GetWithdrawerDid() string {
	if m != nil {
		return m.WithdrawerDid
	}
	return ""
}

func (m *BondWithdrawReserveEvent) GetWithdrawerAddress() string {
	if m != nil {
		return m.WithdrawerAddress
	}
	return ""
}

func (m *BondWithdrawReserveEvent) GetReserveWithdrawalAddress() string {
	if m != nil {
		return m.ReserveWithdrawalAddress
	}
	return ""
}

// BondEditAlphaSuccessEvent is an event triggered on a successful edit of Bond
// alpha value
type BondEditAlphaSuccessEvent struct {
	BondDid     string `protobuf:"bytes,1,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
	Token       string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	PublicAlpha string `protobuf:"bytes,3,opt,name=public_alpha,json=publicAlpha,proto3" json:"public_alpha,omitempty"`
	SystemAlpha string `protobuf:"bytes,4,opt,name=system_alpha,json=systemAlpha,proto3" json:"system_alpha,omitempty"`
}

func (m *BondEditAlphaSuccessEvent) Reset()         { *m = BondEditAlphaSuccessEvent{} }
func (m *BondEditAlphaSuccessEvent) String() string { return proto.CompactTextString(m) }
func (*BondEditAlphaSuccessEvent) ProtoMessage()    {}
func (*BondEditAlphaSuccessEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b836af92b7c9cac, []int{9}
}
func (m *BondEditAlphaSuccessEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondEditAlphaSuccessEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondEditAlphaSuccessEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondEditAlphaSuccessEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondEditAlphaSuccessEvent.Merge(m, src)
}
func (m *BondEditAlphaSuccessEvent) XXX_Size() int {
	return m.Size()
}
func (m *BondEditAlphaSuccessEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BondEditAlphaSuccessEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BondEditAlphaSuccessEvent proto.InternalMessageInfo

func (m *BondEditAlphaSuccessEvent) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

func (m *BondEditAlphaSuccessEvent) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *BondEditAlphaSuccessEvent) GetPublicAlpha() string {
	if m != nil {
		return m.PublicAlpha
	}
	return ""
}

func (m *BondEditAlphaSuccessEvent) GetSystemAlpha() string {
	if m != nil {
		return m.SystemAlpha
	}
	return ""
}

// BondEditAlphaFailedEvent is an event triggered on a failed attempt to edit of
// Bond alpha value
type BondEditAlphaFailedEvent struct {
	BondDid      string `protobuf:"bytes,1,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	CancelReason string `protobuf:"bytes,3,opt,name=cancel_reason,json=cancelReason,proto3" json:"cancel_reason,omitempty"`
}

func (m *BondEditAlphaFailedEvent) Reset()         { *m = BondEditAlphaFailedEvent{} }
func (m *BondEditAlphaFailedEvent) String() string { return proto.CompactTextString(m) }
func (*BondEditAlphaFailedEvent) ProtoMessage()    {}
func (*BondEditAlphaFailedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b836af92b7c9cac, []int{10}
}
func (m *BondEditAlphaFailedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondEditAlphaFailedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondEditAlphaFailedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondEditAlphaFailedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondEditAlphaFailedEvent.Merge(m, src)
}
func (m *BondEditAlphaFailedEvent) XXX_Size() int {
	return m.Size()
}
func (m *BondEditAlphaFailedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BondEditAlphaFailedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BondEditAlphaFailedEvent proto.InternalMessageInfo

func (m *BondEditAlphaFailedEvent) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

func (m *BondEditAlphaFailedEvent) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *BondEditAlphaFailedEvent) GetCancelReason() string {
	if m != nil {
		return m.CancelReason
	}
	return ""
}

// BondBuyOrderFulfilledEvent is an event triggered on a Bond buy order
// fullfillment
type BondBuyOrderFulfilledEvent struct {
	BondDid                     string                                   `protobuf:"bytes,1,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
	Order                       *BuyOrder                                `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	ChargedPrices               github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=charged_prices,json=chargedPrices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"charged_prices"`
	ChargedFees                 github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=charged_fees,json=chargedFees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"charged_fees"`
	ReturnedToAddress           github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=returned_to_address,json=returnedToAddress,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"returned_to_address"`
	NewBondTokenBalance         cosmossdk_io_math.Int                    `protobuf:"bytes,6,opt,name=new_bond_token_balance,json=newBondTokenBalance,proto3,customtype=cosmossdk.io/math.Int" json:"new_bond_token_balance"`
	ChargedPricesOfWhichReserve *cosmossdk_io_math.Int                   `protobuf:"bytes,7,opt,name=charged_prices_of_which_reserve,json=chargedPricesOfWhichReserve,proto3,customtype=cosmossdk.io/math.Int" json:"charged_prices_of_which_reserve,omitempty"`
	ChargedPricesOfWhichFunding github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=charged_prices_of_which_funding,json=chargedPricesOfWhichFunding,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"charged_prices_of_which_funding"`
}

func (m *BondBuyOrderFulfilledEvent) Reset()         { *m = BondBuyOrderFulfilledEvent{} }
func (m *BondBuyOrderFulfilledEvent) String() string { return proto.CompactTextString(m) }
func (*BondBuyOrderFulfilledEvent) ProtoMessage()    {}
func (*BondBuyOrderFulfilledEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b836af92b7c9cac, []int{11}
}
func (m *BondBuyOrderFulfilledEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondBuyOrderFulfilledEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondBuyOrderFulfilledEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondBuyOrderFulfilledEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondBuyOrderFulfilledEvent.Merge(m, src)
}
func (m *BondBuyOrderFulfilledEvent) XXX_Size() int {
	return m.Size()
}
func (m *BondBuyOrderFulfilledEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BondBuyOrderFulfilledEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BondBuyOrderFulfilledEvent proto.InternalMessageInfo

func (m *BondBuyOrderFulfilledEvent) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

func (m *BondBuyOrderFulfilledEvent) GetOrder() *BuyOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *BondBuyOrderFulfilledEvent) GetChargedPrices() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ChargedPrices
	}
	return nil
}

func (m *BondBuyOrderFulfilledEvent) GetChargedFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ChargedFees
	}
	return nil
}

func (m *BondBuyOrderFulfilledEvent) GetReturnedToAddress() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ReturnedToAddress
	}
	return nil
}

func (m *BondBuyOrderFulfilledEvent) GetChargedPricesOfWhichFunding() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ChargedPricesOfWhichFunding
	}
	return nil
}

// BondSellOrderFulfilledEvent is an event triggered on a Bond sell order
// fullfillment
type BondSellOrderFulfilledEvent struct {
	BondDid             string                                   `protobuf:"bytes,1,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
	Order               *SellOrder                               `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	ChargedFees         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=charged_fees,json=chargedFees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"charged_fees"`
	ReturnedToAddress   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=returned_to_address,json=returnedToAddress,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"returned_to_address"`
	NewBondTokenBalance cosmossdk_io_math.Int                    `protobuf:"bytes,5,opt,name=new_bond_token_balance,json=newBondTokenBalance,proto3,customtype=cosmossdk.io/math.Int" json:"new_bond_token_balance"`
}

func (m *BondSellOrderFulfilledEvent) Reset()         { *m = BondSellOrderFulfilledEvent{} }
func (m *BondSellOrderFulfilledEvent) String() string { return proto.CompactTextString(m) }
func (*BondSellOrderFulfilledEvent) ProtoMessage()    {}
func (*BondSellOrderFulfilledEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b836af92b7c9cac, []int{12}
}
func (m *BondSellOrderFulfilledEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondSellOrderFulfilledEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondSellOrderFulfilledEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondSellOrderFulfilledEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondSellOrderFulfilledEvent.Merge(m, src)
}
func (m *BondSellOrderFulfilledEvent) XXX_Size() int {
	return m.Size()
}
func (m *BondSellOrderFulfilledEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BondSellOrderFulfilledEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BondSellOrderFulfilledEvent proto.InternalMessageInfo

func (m *BondSellOrderFulfilledEvent) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

func (m *BondSellOrderFulfilledEvent) GetOrder() *SellOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *BondSellOrderFulfilledEvent) GetChargedFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ChargedFees
	}
	return nil
}

func (m *BondSellOrderFulfilledEvent) GetReturnedToAddress() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ReturnedToAddress
	}
	return nil
}

// BondSwapOrderFulfilledEvent is an event triggered on a Bond swap order
// fullfillment
type BondSwapOrderFulfilledEvent struct {
	BondDid           string                                   `protobuf:"bytes,1,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
	Order             *SwapOrder                               `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	ChargedFee        types.Coin                               `protobuf:"bytes,3,opt,name=charged_fee,json=chargedFee,proto3" json:"charged_fee"`
	ReturnedToAddress github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=returned_to_address,json=returnedToAddress,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"returned_to_address"`
	TokensSwapped     types.Coin                               `protobuf:"bytes,5,opt,name=tokens_swapped,json=tokensSwapped,proto3" json:"tokens_swapped"`
}

func (m *BondSwapOrderFulfilledEvent) Reset()         { *m = BondSwapOrderFulfilledEvent{} }
func (m *BondSwapOrderFulfilledEvent) String() string { return proto.CompactTextString(m) }
func (*BondSwapOrderFulfilledEvent) ProtoMessage()    {}
func (*BondSwapOrderFulfilledEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b836af92b7c9cac, []int{13}
}
func (m *BondSwapOrderFulfilledEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondSwapOrderFulfilledEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondSwapOrderFulfilledEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondSwapOrderFulfilledEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondSwapOrderFulfilledEvent.Merge(m, src)
}
func (m *BondSwapOrderFulfilledEvent) XXX_Size() int {
	return m.Size()
}
func (m *BondSwapOrderFulfilledEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BondSwapOrderFulfilledEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BondSwapOrderFulfilledEvent proto.InternalMessageInfo

func (m *BondSwapOrderFulfilledEvent) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

func (m *BondSwapOrderFulfilledEvent) GetOrder() *SwapOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *BondSwapOrderFulfilledEvent) GetChargedFee() types.Coin {
	if m != nil {
		return m.ChargedFee
	}
	return types.Coin{}
}

func (m *BondSwapOrderFulfilledEvent) GetReturnedToAddress() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ReturnedToAddress
	}
	return nil
}

func (m *BondSwapOrderFulfilledEvent) GetTokensSwapped() types.Coin {
	if m != nil {
		return m.TokensSwapped
	}
	return types.Coin{}
}

// BondBuyOrderCancelledEvent is an event triggered on a Bond buy order
// cancellation
type BondBuyOrderCancelledEvent struct {
	BondDid string    `protobuf:"bytes,1,opt,name=bond_did,json=bondDid,proto3" json:"bond_did,omitempty"`
	Order   *BuyOrder `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (m *BondBuyOrderCancelledEvent) Reset()         { *m = BondBuyOrderCancelledEvent{} }
func (m *BondBuyOrderCancelledEvent) String() string { return proto.CompactTextString(m) }
func (*BondBuyOrderCancelledEvent) ProtoMessage()    {}
func (*BondBuyOrderCancelledEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b836af92b7c9cac, []int{14}
}
func (m *BondBuyOrderCancelledEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondBuyOrderCancelledEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondBuyOrderCancelledEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondBuyOrderCancelledEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondBuyOrderCancelledEvent.Merge(m, src)
}
func (m *BondBuyOrderCancelledEvent) XXX_Size() int {
	return m.Size()
}
func (m *BondBuyOrderCancelledEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BondBuyOrderCancelledEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BondBuyOrderCancelledEvent proto.InternalMessageInfo

func (m *BondBuyOrderCancelledEvent) GetBondDid() string {
	if m != nil {
		return m.BondDid
	}
	return ""
}

func (m *BondBuyOrderCancelledEvent) GetOrder() *BuyOrder {
	if m != nil {
		return m.Order
	}
	return nil
}

func init() {
	proto.RegisterType((*BondCreatedEvent)(nil), "ixo.bonds.v1beta1.BondCreatedEvent")
	proto.RegisterType((*BondUpdatedEvent)(nil), "ixo.bonds.v1beta1.BondUpdatedEvent")
	proto.RegisterType((*BondSetNextAlphaEvent)(nil), "ixo.bonds.v1beta1.BondSetNextAlphaEvent")
	proto.RegisterType((*BondBuyOrderEvent)(nil), "ixo.bonds.v1beta1.BondBuyOrderEvent")
	proto.RegisterType((*BondSellOrderEvent)(nil), "ixo.bonds.v1beta1.BondSellOrderEvent")
	proto.RegisterType((*BondSwapOrderEvent)(nil), "ixo.bonds.v1beta1.BondSwapOrderEvent")
	proto.RegisterType((*BondMakeOutcomePaymentEvent)(nil), "ixo.bonds.v1beta1.BondMakeOutcomePaymentEvent")
	proto.RegisterType((*BondWithdrawShareEvent)(nil), "ixo.bonds.v1beta1.BondWithdrawShareEvent")
	proto.RegisterType((*BondWithdrawReserveEvent)(nil), "ixo.bonds.v1beta1.BondWithdrawReserveEvent")
	proto.RegisterType((*BondEditAlphaSuccessEvent)(nil), "ixo.bonds.v1beta1.BondEditAlphaSuccessEvent")
	proto.RegisterType((*BondEditAlphaFailedEvent)(nil), "ixo.bonds.v1beta1.BondEditAlphaFailedEvent")
	proto.RegisterType((*BondBuyOrderFulfilledEvent)(nil), "ixo.bonds.v1beta1.BondBuyOrderFulfilledEvent")
	proto.RegisterType((*BondSellOrderFulfilledEvent)(nil), "ixo.bonds.v1beta1.BondSellOrderFulfilledEvent")
	proto.RegisterType((*BondSwapOrderFulfilledEvent)(nil), "ixo.bonds.v1beta1.BondSwapOrderFulfilledEvent")
	proto.RegisterType((*BondBuyOrderCancelledEvent)(nil), "ixo.bonds.v1beta1.BondBuyOrderCancelledEvent")
}

func init() { proto.RegisterFile("ixo/bonds/v1beta1/event.proto", fileDescriptor_8b836af92b7c9cac) }

var fileDescriptor_8b836af92b7c9cac = []byte{
	// 1031 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x3a, 0x7f, 0xda, 0x8c, 0xe3, 0x34, 0xd9, 0xb6, 0x61, 0x93, 0x50, 0xa7, 0x75, 0x85,
	0x14, 0x29, 0x8a, 0x4d, 0x82, 0x90, 0x38, 0x20, 0x41, 0x1c, 0x1a, 0xa9, 0x07, 0x48, 0xe5, 0x14,
	0x45, 0xe2, 0xb2, 0x8c, 0x77, 0x9e, 0xed, 0xc1, 0xeb, 0x99, 0x65, 0x67, 0xd6, 0x76, 0xc4, 0x97,
	0x00, 0x3e, 0x06, 0xe7, 0xde, 0x38, 0x70, 0xed, 0xb1, 0xe2, 0x84, 0x38, 0x14, 0x94, 0x7c, 0x04,
	0xb8, 0x22, 0xa1, 0xf9, 0xb3, 0x1b, 0x6f, 0x09, 0xc4, 0x41, 0x8e, 0x72, 0x4a, 0xe6, 0xfd, 0xfb,
	0xbd, 0xf7, 0x7e, 0x6f, 0xde, 0x8e, 0xd1, 0x03, 0x3a, 0xe4, 0xb5, 0x26, 0x67, 0x44, 0xd4, 0xfa,
	0x3b, 0x4d, 0x90, 0x78, 0xa7, 0x06, 0x7d, 0x60, 0xb2, 0x1a, 0xc5, 0x5c, 0x72, 0x77, 0x99, 0x0e,
	0x79, 0x55, 0xab, 0xab, 0x56, 0xbd, 0x76, 0xaf, 0xcd, 0xdb, 0x5c, 0x6b, 0x6b, 0xea, 0x3f, 0x63,
	0xb8, 0x76, 0x41, 0x1c, 0xe3, 0x66, 0xd4, 0xe5, 0x80, 0x8b, 0x1e, 0x17, 0xb5, 0x26, 0x16, 0x90,
	0x19, 0x04, 0x9c, 0x32, 0xab, 0x5f, 0x35, 0x7a, 0xdf, 0xc4, 0x35, 0x07, 0xa3, 0xaa, 0x7c, 0x84,
	0x96, 0xea, 0x9c, 0x91, 0xfd, 0x18, 0xb0, 0x04, 0xf2, 0x44, 0x25, 0xe7, 0x6e, 0xa1, 0x19, 0x15,
	0xdd, 0x73, 0x1e, 0x3a, 0x9b, 0xc5, 0xdd, 0xb7, 0xaa, 0xff, 0xc8, 0xb2, 0xaa, 0x5c, 0x1a, 0xda,
	0x28, 0x0d, 0xf0, 0x79, 0x44, 0xfe, 0x67, 0x00, 0x8a, 0xee, 0xab, 0xd3, 0x11, 0xc8, 0xcf, 0x60,
	0x28, 0xf7, 0xc2, 0xa8, 0x83, 0x4d, 0x94, 0x55, 0x74, 0x5b, 0x19, 0xf8, 0x84, 0x9a, 0x48, 0xf3,
	0x8d, 0x5b, 0xea, 0xfc, 0x09, 0x25, 0xee, 0x03, 0x84, 0x18, 0x0c, 0xa5, 0x8f, 0x95, 0xb5, 0x57,
	0xd0, 0xca, 0x79, 0x96, 0xba, 0xbb, 0x2b, 0x68, 0x4e, 0xd0, 0x36, 0x83, 0xd8, 0x9b, 0xd6, 0x2a,
	0x7b, 0xaa, 0x60, 0xb4, 0xac, 0xa0, 0xea, 0xc9, 0xc9, 0x61, 0x4c, 0x20, 0x36, 0x30, 0x3b, 0x68,
	0x96, 0xab, 0x93, 0xcd, 0x76, 0xfd, 0xa2, 0x6c, 0xad, 0x43, 0xc3, 0x58, 0xe6, 0x32, 0x2b, 0xe4,
	0x32, 0xab, 0x04, 0xc8, 0x35, 0xd5, 0x84, 0xe1, 0x08, 0xc6, 0x6e, 0x1e, 0xe3, 0xed, 0x0b, 0x30,
	0x32, 0x8f, 0x2b, 0x80, 0x0c, 0x70, 0x74, 0x45, 0x90, 0xd4, 0x63, 0x0c, 0x90, 0x3f, 0x1d, 0xb4,
	0xae, 0x50, 0x3e, 0xc5, 0x5d, 0x38, 0x4c, 0x64, 0xc0, 0x7b, 0xf0, 0x0c, 0x9f, 0xf4, 0x80, 0xc9,
	0x4b, 0xe9, 0x91, 0xe8, 0x0e, 0x37, 0x1e, 0x7e, 0x64, 0x5c, 0xbc, 0xc2, 0xc3, 0xe9, 0xcd, 0xe2,
	0xee, 0x6a, 0xd5, 0x0e, 0x9f, 0x9a, 0xd4, 0x2c, 0xab, 0x7d, 0x4e, 0x59, 0xfd, 0xdd, 0x97, 0xaf,
	0x37, 0xa6, 0x7e, 0xf8, 0x6d, 0x63, 0xb3, 0x4d, 0x65, 0x27, 0x69, 0x56, 0x03, 0xde, 0xb3, 0x93,
	0x6a, 0xff, 0x6c, 0x0b, 0xd2, 0xad, 0xc9, 0x93, 0x08, 0x84, 0x76, 0x10, 0x8d, 0x45, 0x9e, 0xcb,
	0x4a, 0x0d, 0x85, 0x00, 0x46, 0x20, 0xd6, 0x29, 0x19, 0xe6, 0xe7, 0x8d, 0x44, 0x25, 0xf5, 0x0e,
	0x5a, 0xb4, 0x6a, 0x4c, 0x48, 0x0c, 0x42, 0x78, 0x33, 0xda, 0xa4, 0x64, 0xa4, 0x7b, 0x46, 0x58,
	0xf9, 0xcb, 0x41, 0x2b, 0xaa, 0xec, 0x63, 0x2a, 0x3b, 0x24, 0xc6, 0x83, 0xa3, 0x0e, 0x8e, 0xe1,
	0xd2, 0x8a, 0xfb, 0x68, 0x69, 0x60, 0x1d, 0xae, 0xb3, 0xe4, 0x3b, 0x29, 0x48, 0x5a, 0xf3, 0x63,
	0x54, 0x8a, 0x21, 0xa0, 0x11, 0x05, 0x26, 0x47, 0xca, 0x5e, 0xc8, 0x84, 0x2a, 0xb9, 0x2d, 0xb4,
	0x7c, 0x6e, 0x94, 0x2f, 0x7e, 0x29, 0x53, 0xa4, 0xf5, 0xff, 0x54, 0x40, 0xde, 0x68, 0xfd, 0x0d,
	0x10, 0x10, 0xf7, 0x61, 0x1c, 0xce, 0xb3, 0x0e, 0xe0, 0x1e, 0x4f, 0xae, 0x89, 0xf3, 0x14, 0x63,
	0x4f, 0x43, 0x28, 0x52, 0x53, 0x49, 0x8e, 0xf7, 0xd2, 0xb9, 0x54, 0x25, 0xb7, 0x8d, 0xdc, 0x11,
	0xb3, 0x7c, 0x0b, 0x96, 0xcf, 0x35, 0xb6, 0x07, 0xee, 0x87, 0x68, 0x2d, 0x36, 0x65, 0xfb, 0xa9,
	0x12, 0x87, 0x99, 0xdb, 0xac, 0x76, 0xf3, 0xac, 0xc5, 0x71, 0x66, 0x90, 0x76, 0xf0, 0x7b, 0x07,
	0xad, 0xaa, 0x0e, 0x3e, 0x21, 0xd4, 0xec, 0xa3, 0xa3, 0x24, 0x08, 0x40, 0x88, 0x4b, 0x5b, 0x78,
	0x0f, 0xcd, 0x4a, 0xde, 0x05, 0x66, 0x6f, 0xa2, 0x39, 0xb8, 0x8f, 0xd0, 0x42, 0x94, 0x34, 0x43,
	0x1a, 0xd8, 0x6d, 0x67, 0x0a, 0x2c, 0x1a, 0x99, 0xd9, 0x77, 0x8f, 0xd0, 0x82, 0x38, 0x11, 0x12,
	0x7a, 0xd6, 0xc4, 0x14, 0x56, 0x34, 0x32, 0x6d, 0x52, 0x89, 0x0c, 0xab, 0x59, 0x4e, 0x07, 0x98,
	0x86, 0xe9, 0xba, 0xbe, 0x72, 0x4a, 0x8f, 0x51, 0x29, 0xc0, 0x2c, 0x80, 0xd0, 0x8f, 0x01, 0x0b,
	0xce, 0xd2, 0xa9, 0x33, 0xc2, 0x86, 0x96, 0x55, 0x5e, 0xcc, 0xa1, 0xb5, 0xd1, 0x6d, 0x7b, 0x90,
	0x84, 0x2d, 0x1a, 0x8e, 0x03, 0x9a, 0x6d, 0xe4, 0xc2, 0xd8, 0x1b, 0x39, 0x46, 0x8b, 0x41, 0x07,
	0xc7, 0x6d, 0x20, 0x7e, 0x14, 0xd3, 0x00, 0x84, 0x37, 0x3d, 0xf9, 0xe1, 0x2b, 0x59, 0x88, 0x67,
	0x1a, 0xc1, 0x65, 0x68, 0x21, 0xc5, 0x6c, 0x01, 0xa8, 0x71, 0x9a, 0x38, 0x62, 0xd1, 0x02, 0x1c,
	0x00, 0x08, 0xf7, 0x1b, 0x74, 0x37, 0x06, 0x99, 0xc4, 0x0c, 0x88, 0x2f, 0xf9, 0xc8, 0x38, 0x4e,
	0x1c, 0x76, 0x39, 0xc5, 0x79, 0xce, 0xd3, 0x2b, 0xf1, 0x25, 0x5a, 0x61, 0x30, 0xf0, 0x35, 0x65,
	0x7a, 0x08, 0xfc, 0x26, 0x0e, 0x15, 0xdd, 0xde, 0x9c, 0x22, 0xaf, 0xbe, 0xa5, 0x40, 0x7e, 0x7d,
	0xbd, 0x71, 0xdf, 0x84, 0x14, 0xa4, 0x5b, 0xa5, 0xbc, 0xd6, 0xc3, 0xb2, 0x53, 0x7d, 0xca, 0xe4,
	0xcf, 0x2f, 0xb6, 0x91, 0xcd, 0xef, 0x29, 0x93, 0x8d, 0xbb, 0x0c, 0x06, 0x6a, 0x34, 0x9e, 0xab,
	0x40, 0x75, 0x13, 0xc7, 0xfd, 0x1a, 0x6d, 0xe4, 0x29, 0xf4, 0x79, 0xcb, 0x1f, 0x74, 0x68, 0xd0,
	0xf1, 0xed, 0x55, 0xf3, 0x6e, 0x65, 0x50, 0xce, 0xb8, 0x50, 0xeb, 0x39, 0xce, 0x0e, 0x5b, 0xc7,
	0x2a, 0xa0, 0xdd, 0x69, 0xee, 0x77, 0xce, 0xbf, 0x63, 0xb6, 0x12, 0x46, 0x28, 0x6b, 0x7b, 0xb7,
	0x27, 0xdf, 0xde, 0x0b, 0x73, 0x3a, 0x30, 0x78, 0x95, 0x1f, 0xa7, 0xcd, 0x67, 0x37, 0x7b, 0x0f,
	0x8c, 0x7f, 0x6f, 0x76, 0xf3, 0xf7, 0x66, 0xac, 0x57, 0xc6, 0x9b, 0x43, 0x3c, 0x7d, 0x33, 0x43,
	0x3c, 0x73, 0xc3, 0x43, 0x3c, 0x3b, 0x99, 0x21, 0xae, 0xfc, 0x51, 0xb0, 0xec, 0xa5, 0x0f, 0xad,
	0xc9, 0xb2, 0xf7, 0xe6, 0xf3, 0xed, 0x63, 0x54, 0x1c, 0x61, 0x4f, 0xaf, 0xe1, 0xff, 0xec, 0xe2,
	0x8c, 0x2a, 0xb0, 0x81, 0xce, 0x09, 0xb9, 0x59, 0x3e, 0x0e, 0xd0, 0xa2, 0xa6, 0x41, 0xf8, 0x62,
	0x80, 0xa3, 0x08, 0x88, 0xe6, 0x61, 0x8c, 0x0a, 0x4a, 0xc6, 0xed, 0xc8, 0x78, 0x55, 0xbe, 0xca,
	0x7f, 0x69, 0xf6, 0xf5, 0x67, 0xe8, 0x7a, 0xbe, 0x34, 0xf5, 0xc6, 0xcb, 0xd3, 0xb2, 0xf3, 0xea,
	0xb4, 0xec, 0xfc, 0x7e, 0x5a, 0x76, 0xbe, 0x3d, 0x2b, 0x4f, 0xbd, 0x3a, 0x2b, 0x4f, 0xfd, 0x72,
	0x56, 0x9e, 0xfa, 0xe2, 0x83, 0x91, 0x56, 0xd0, 0x21, 0x6f, 0xf1, 0x84, 0x11, 0x2c, 0x29, 0x67,
	0xea, 0xb4, 0xdd, 0x0c, 0x79, 0xd0, 0x0d, 0x3a, 0x98, 0xb2, 0x5a, 0xff, 0xfd, 0xda, 0xd0, 0xfe,
	0x9a, 0xd3, 0x0d, 0x6a, 0xce, 0xe9, 0xdf, 0x62, 0xef, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x21,
	0x84, 0x81, 0x19, 0x2f, 0x0e, 0x00, 0x00,
}

func (m *BondCreatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondCreatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondCreatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bond != nil {
		{
			size, err := m.Bond.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondUpdatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondUpdatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondUpdatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bond != nil {
		{
			size, err := m.Bond.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondSetNextAlphaEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondSetNextAlphaEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondSetNextAlphaEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NextAlpha) > 0 {
		i -= len(m.NextAlpha)
		copy(dAtA[i:], m.NextAlpha)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NextAlpha)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondBuyOrderEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondBuyOrderEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondBuyOrderEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondSellOrderEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondSellOrderEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondSellOrderEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondSwapOrderEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondSwapOrderEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondSwapOrderEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondMakeOutcomePaymentEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondMakeOutcomePaymentEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondMakeOutcomePaymentEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SenderDid) > 0 {
		i -= len(m.SenderDid)
		copy(dAtA[i:], m.SenderDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SenderDid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OutcomePayment) > 0 {
		for iNdEx := len(m.OutcomePayment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutcomePayment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondWithdrawShareEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondWithdrawShareEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondWithdrawShareEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecipientAddress) > 0 {
		i -= len(m.RecipientAddress)
		copy(dAtA[i:], m.RecipientAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RecipientAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecipientDid) > 0 {
		i -= len(m.RecipientDid)
		copy(dAtA[i:], m.RecipientDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RecipientDid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WithdrawPayment) > 0 {
		for iNdEx := len(m.WithdrawPayment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawPayment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondWithdrawReserveEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondWithdrawReserveEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondWithdrawReserveEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReserveWithdrawalAddress) > 0 {
		i -= len(m.ReserveWithdrawalAddress)
		copy(dAtA[i:], m.ReserveWithdrawalAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ReserveWithdrawalAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WithdrawerAddress) > 0 {
		i -= len(m.WithdrawerAddress)
		copy(dAtA[i:], m.WithdrawerAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.WithdrawerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WithdrawerDid) > 0 {
		i -= len(m.WithdrawerDid)
		copy(dAtA[i:], m.WithdrawerDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.WithdrawerDid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WithdrawAmount) > 0 {
		for iNdEx := len(m.WithdrawAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondEditAlphaSuccessEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondEditAlphaSuccessEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondEditAlphaSuccessEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SystemAlpha) > 0 {
		i -= len(m.SystemAlpha)
		copy(dAtA[i:], m.SystemAlpha)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SystemAlpha)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicAlpha) > 0 {
		i -= len(m.PublicAlpha)
		copy(dAtA[i:], m.PublicAlpha)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PublicAlpha)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondEditAlphaFailedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondEditAlphaFailedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondEditAlphaFailedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CancelReason) > 0 {
		i -= len(m.CancelReason)
		copy(dAtA[i:], m.CancelReason)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CancelReason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondBuyOrderFulfilledEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondBuyOrderFulfilledEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondBuyOrderFulfilledEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChargedPricesOfWhichFunding) > 0 {
		for iNdEx := len(m.ChargedPricesOfWhichFunding) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChargedPricesOfWhichFunding[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ChargedPricesOfWhichReserve != nil {
		{
			size := m.ChargedPricesOfWhichReserve.Size()
			i -= size
			if _, err := m.ChargedPricesOfWhichReserve.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.NewBondTokenBalance.Size()
		i -= size
		if _, err := m.NewBondTokenBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.ReturnedToAddress) > 0 {
		for iNdEx := len(m.ReturnedToAddress) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReturnedToAddress[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ChargedFees) > 0 {
		for iNdEx := len(m.ChargedFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChargedFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ChargedPrices) > 0 {
		for iNdEx := len(m.ChargedPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChargedPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondSellOrderFulfilledEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondSellOrderFulfilledEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondSellOrderFulfilledEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.NewBondTokenBalance.Size()
		i -= size
		if _, err := m.NewBondTokenBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ReturnedToAddress) > 0 {
		for iNdEx := len(m.ReturnedToAddress) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReturnedToAddress[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ChargedFees) > 0 {
		for iNdEx := len(m.ChargedFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChargedFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondSwapOrderFulfilledEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondSwapOrderFulfilledEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondSwapOrderFulfilledEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokensSwapped.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ReturnedToAddress) > 0 {
		for iNdEx := len(m.ReturnedToAddress) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReturnedToAddress[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.ChargedFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondBuyOrderCancelledEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondBuyOrderCancelledEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondBuyOrderCancelledEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BondDid) > 0 {
		i -= len(m.BondDid)
		copy(dAtA[i:], m.BondDid)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BondDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BondCreatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bond != nil {
		l = m.Bond.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *BondUpdatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bond != nil {
		l = m.Bond.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *BondSetNextAlphaEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.NextAlpha)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *BondBuyOrderEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *BondSellOrderEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *BondSwapOrderEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *BondMakeOutcomePaymentEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.OutcomePayment) > 0 {
		for _, e := range m.OutcomePayment {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = len(m.SenderDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *BondWithdrawShareEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.WithdrawPayment) > 0 {
		for _, e := range m.WithdrawPayment {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = len(m.RecipientDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.RecipientAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *BondWithdrawReserveEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.WithdrawAmount) > 0 {
		for _, e := range m.WithdrawAmount {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = len(m.WithdrawerDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.WithdrawerAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ReserveWithdrawalAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *BondEditAlphaSuccessEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PublicAlpha)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SystemAlpha)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *BondEditAlphaFailedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CancelReason)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *BondBuyOrderFulfilledEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.ChargedPrices) > 0 {
		for _, e := range m.ChargedPrices {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if len(m.ChargedFees) > 0 {
		for _, e := range m.ChargedFees {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if len(m.ReturnedToAddress) > 0 {
		for _, e := range m.ReturnedToAddress {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = m.NewBondTokenBalance.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.ChargedPricesOfWhichReserve != nil {
		l = m.ChargedPricesOfWhichReserve.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.ChargedPricesOfWhichFunding) > 0 {
		for _, e := range m.ChargedPricesOfWhichFunding {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *BondSellOrderFulfilledEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.ChargedFees) > 0 {
		for _, e := range m.ChargedFees {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if len(m.ReturnedToAddress) > 0 {
		for _, e := range m.ReturnedToAddress {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = m.NewBondTokenBalance.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *BondSwapOrderFulfilledEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.ChargedFee.Size()
	n += 1 + l + sovEvent(uint64(l))
	if len(m.ReturnedToAddress) > 0 {
		for _, e := range m.ReturnedToAddress {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	l = m.TokensSwapped.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *BondBuyOrderCancelledEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDid)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BondCreatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondCreatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondCreatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bond == nil {
				m.Bond = &Bond{}
			}
			if err := m.Bond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondUpdatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondUpdatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondUpdatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bond == nil {
				m.Bond = &Bond{}
			}
			if err := m.Bond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondSetNextAlphaEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondSetNextAlphaEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondSetNextAlphaEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextAlpha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextAlpha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondBuyOrderEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondBuyOrderEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondBuyOrderEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &BuyOrder{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondSellOrderEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondSellOrderEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondSellOrderEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &SellOrder{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondSwapOrderEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondSwapOrderEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondSwapOrderEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &SwapOrder{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondMakeOutcomePaymentEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondMakeOutcomePaymentEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondMakeOutcomePaymentEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutcomePayment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutcomePayment = append(m.OutcomePayment, types.Coin{})
			if err := m.OutcomePayment[len(m.OutcomePayment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondWithdrawShareEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondWithdrawShareEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondWithdrawShareEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawPayment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawPayment = append(m.WithdrawPayment, types.Coin{})
			if err := m.WithdrawPayment[len(m.WithdrawPayment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondWithdrawReserveEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondWithdrawReserveEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondWithdrawReserveEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAmount = append(m.WithdrawAmount, types.Coin{})
			if err := m.WithdrawAmount[len(m.WithdrawAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveWithdrawalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveWithdrawalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondEditAlphaSuccessEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondEditAlphaSuccessEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondEditAlphaSuccessEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicAlpha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicAlpha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemAlpha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemAlpha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondEditAlphaFailedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondEditAlphaFailedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondEditAlphaFailedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondBuyOrderFulfilledEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondBuyOrderFulfilledEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondBuyOrderFulfilledEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &BuyOrder{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargedPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargedPrices = append(m.ChargedPrices, types.Coin{})
			if err := m.ChargedPrices[len(m.ChargedPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargedFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargedFees = append(m.ChargedFees, types.Coin{})
			if err := m.ChargedFees[len(m.ChargedFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnedToAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnedToAddress = append(m.ReturnedToAddress, types.Coin{})
			if err := m.ReturnedToAddress[len(m.ReturnedToAddress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewBondTokenBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewBondTokenBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargedPricesOfWhichReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.ChargedPricesOfWhichReserve = &v
			if err := m.ChargedPricesOfWhichReserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargedPricesOfWhichFunding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargedPricesOfWhichFunding = append(m.ChargedPricesOfWhichFunding, types.Coin{})
			if err := m.ChargedPricesOfWhichFunding[len(m.ChargedPricesOfWhichFunding)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondSellOrderFulfilledEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondSellOrderFulfilledEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondSellOrderFulfilledEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &SellOrder{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargedFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargedFees = append(m.ChargedFees, types.Coin{})
			if err := m.ChargedFees[len(m.ChargedFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnedToAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnedToAddress = append(m.ReturnedToAddress, types.Coin{})
			if err := m.ReturnedToAddress[len(m.ReturnedToAddress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewBondTokenBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewBondTokenBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondSwapOrderFulfilledEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondSwapOrderFulfilledEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondSwapOrderFulfilledEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &SwapOrder{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargedFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChargedFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnedToAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnedToAddress = append(m.ReturnedToAddress, types.Coin{})
			if err := m.ReturnedToAddress[len(m.ReturnedToAddress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensSwapped", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokensSwapped.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondBuyOrderCancelledEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondBuyOrderCancelledEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondBuyOrderCancelledEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &BuyOrder{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
