package bondingmath

import (
	"fmt"
	"math"

	sdk "github.com/cosmos/cosmos-sdk/types"
	"github.com/ixofoundation/ixo-blockchain/x/bonds/types"
)

type BondingAlgorithmV2 interface {
	Init()

	CalculatePriceForTokens()

	CalculateTokensForPrice()
}

func ConvertFloat64ToDec(f float64) (sdk.Dec, error) {
	s := fmt.Sprintf("%.18f", f)
	fmt.Println(f)
	dec, err := sdk.NewDecFromStr(s)
	if err != nil {
		fmt.Println(err)
		return sdk.Dec{}, err
	}
	return dec, nil
}

type AlphabondV2 struct {
	// Economics
	_m float64 // CurrentSupply
	_M float64 // Max Supply
	_C float64 // Outcome Payment
	_T float64 // Time to Maturity
	_R float64 // Current Reserve

	// Issuance
	_F      float64 // Targeted Funding
	_Fi     float64 // Targeted Funding
	_Mh     float64 // Hatch Supply
	_Ph     float64 // Fixed hatch price
	_Mi     float64 // Hatch Supply
	_APYmin float64 // Minimum APY
	_APYavg float64 // Minimum APY
	_APYmax float64 // Maximum APY

	// Initialization
	_theta float64 // Theta
	_a     float64 // System Alpha
	_a0    float64 // Initial System Alpha
	_g     float64 // System Gamma
	_ap    float64 // System Alpha Public
	_ap0   float64 // Intial Alpha Public
	_t     float64 // Time

	_r float64 // Discounting rate
	// _p1 sdk.Dec // Maximum Price

	_Pmin float64 // Minimum Price
	_Pavg float64 // Average Price
	_Pmax float64 // Maximum Price

	_kappa float64

	_B float64 // Beta (Shape of the curve)
}

func toPercentage(f float64, err error) (float64, error) {
	if err != nil {
		return f, err
	}
	return f / 100, err
}

func (bond *AlphabondV2) Init(alphabond types.Bond) {

	bond._m, _ = alphabond.CurrentSupply.Amount.ToDec().Float64()
	bond._M, _ = alphabond.MaxSupply.Amount.ToDec().Float64()
	bond._C, _ = alphabond.OutcomePayment.ToDec().Float64()
	//TODO: fix this to include many coins.
	bond._R, _ = alphabond.CurrentReserve[0].Amount.ToDec().Float64()

	params := alphabond.FunctionParameters.AsMap()
	bond._F, _ = params["Funding_Target"].Float64()
	bond._Mh, _ = params["Hatch_Supply"].Float64()
	bond._Ph, _ = params["Hatch_Price"].Float64()
	bond._APYmax, _ = toPercentage(params["APY_MAX"].Float64())
	bond._APYmin, _ = toPercentage(params["APY_MIN"].Float64())
	bond._r, _ = toPercentage(params["DISCOUNT_RATE"].Float64())
	bond._T, _ = params["MATURITY"].Float64()
	bond._g, _ = params["GAMMA"].Float64()
	bond._theta, _ = toPercentage(params["THETA"].Float64())
	bond._ap0, _ = toPercentage(params["INITIAL_PUBLIC_ALPHA"].Float64())

	bond._Mi = bond._M - bond._Mh
	bond._Fi = bond._F - (bond._Mi * bond._Ph)

	bond._a0 = math.Exp(-1 * (bond._APYmin - bond._r) * bond._T)

	bond._ap, _ = func() (float64, error) {
		if _paDec, exists := params["PUBLIC_ALPHA"]; exists {
			_pa, err := _paDec.Float64()
			return _pa, err
		} else {
			return bond._ap0, nil
		}
	}()

	bond._a, _ = func() (float64, error) {
		if _aDec, exists := params["SYSTEM_ALPHA"]; exists {
			_a, err := _aDec.Float64()
			return _a, err
		} else {
			return bond._a0, nil
		}
	}()

	bond._t = 0

	bond._kappa = (bond._a / bond._a0) * math.Exp(bond._r*bond._t)

	//TODO: work need here

	bond._Pavg = bond._kappa * bond._Fi / bond._Mi
	bond._APYavg = -1 * (math.Log(bond._Pavg * bond._M / bond._C)) / bond._T

	// bond._Pmax = bond._M * bond._C

	bond._Pmax = bond._kappa * math.Exp(-1*bond._APYmin*bond._T) * (bond._C / bond._M)
	bond._Pmin = bond._kappa * math.Exp(-1*bond._APYmax*bond._T) * (bond._C / bond._M)

	// bond.setCalculatedPavg()
	// bond.setCalculatedAPYavg()
	// bond.setCalculatedPmax()

	// bond.setCalculatedPmin()
	bond._B = (bond._Pmax - bond._Pavg) / (bond._Pavg - bond._Pmin)
	// bond.setCalculatedBeta()
	fmt.Printf("%+v", bond)
}

func calculateIssuance() {

}

func (bond *AlphabondV2) Pmax() {

}

func (bond *AlphabondV2) setCalculatedPavg() {

}

func (bond *AlphabondV2) setCalculatedPmin() {

}

// _B = (_Pmax - _Pmin) / (_Pavg - _Pmin)
func (bond *AlphabondV2) setCalculatedBeta() error {
	bond._B = (bond._Pmax - bond._Pmin) / (bond._Pavg - bond._Pmin)
	return nil
}

func (bond *AlphabondV2) UpdateAlpha(_ap float64) error {
	// recalulate := func() {

	// }()
	// Constraints
	if _ap < 0 {
		return fmt.Errorf("alpha is smaller than 0 and must be greater than or equal to 0 and smaller than or equal to 1")
	}
	if _ap > 1 {
		return fmt.Errorf("alpha is larger than 1 and must be greater than or equal to 0 and smaller than or equal to 1")
	}

	gamma1 := bond._g * (1 - (1 / bond._a0)) / (1 - (1 / bond._ap0))
	fmt.Println("gamma1", gamma1)
	alpha_new := func() float64 {
		if _ap <= bond._ap0 {
			fmt.Println("_ap <= bond._ap0", "true")
			return bond._a0 * math.Pow((_ap/bond._ap0), gamma1)
		} else {
			fmt.Println("_ap <= bond._ap0", "false")
			return 1 - (1-bond._a0)*math.Pow((1-_ap)/(1-bond._ap0), bond._g)
		}
	}()
	fmt.Println("alpha_new", alpha_new)
	bond._a = (bond._theta * alpha_new) + (1-bond._theta)*bond._a

	bond._kappa = (bond._a / bond._a0) * math.Exp(bond._r*bond._t)
	bond._Pavg = bond._kappa * bond._Fi / bond._Mi
	bond._APYavg = -1 * (math.Log(bond._Pavg * bond._M / bond._C)) / bond._T
	bond._Pmax = bond._kappa * math.Exp(-1*bond._APYmin*bond._T) * (bond._C / bond._M)
	bond._Pmin = bond._kappa * math.Exp(-1*bond._APYmax*bond._T) * (bond._C / bond._M)
	bond._B = (bond._Pmax - bond._Pavg) / (bond._Pavg - bond._Pmin)
	bond._ap = _ap

	fmt.Println("alpha", bond._a)

	return nil
}

func (bond *AlphabondV2) CalculatePriceForTokens(price sdk.Coin) (sdk.DecCoin, error) {
	// if !alphaBond.AlphaBond {
	// return types.Price{}, errors.New("not an alpha bond")
	// }

	_mh := float64(0)
	// _dm, _ := price.Amount.ToDec().Float64()
	calc := (bond._Mh - _mh)
	dec, _ := ConvertFloat64ToDec(calc)
	return sdk.NewDecCoinFromDec(price.Denom, dec), nil

}

func (bond *AlphabondV2) CalculateTokensForPrice(price sdk.Coin) (sdk.DecCoin, error) {

	// if !bond.AlphaBond {
	// 	// return types.Price{}, errors.New("not an alpha bond")
	// }

	_dm, _ := price.Amount.ToDec().Float64()
	calc := (_dm * bond._Pmin) + (((bond._Mi * (bond._Pmax - bond._Pmin)) / (bond._B + 1)) * (math.Pow(((bond._m+_dm)/bond._Mi), (bond._B+1)) - math.Pow((bond._m/bond._M), (bond._B+1))))
	dec, _ := ConvertFloat64ToDec(calc)
	return sdk.NewDecCoinFromDec(price.Denom, dec), nil
}
