// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: project/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryProjectDocRequest is the request type for the Query/ProjectDoc RPC method.
type QueryProjectDocRequest struct {
	ProjectDid string `protobuf:"bytes,1,opt,name=project_did,json=projectDid,proto3" json:"project_did,omitempty" yaml:"project_did"`
}

func (m *QueryProjectDocRequest) Reset()         { *m = QueryProjectDocRequest{} }
func (m *QueryProjectDocRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProjectDocRequest) ProtoMessage()    {}
func (*QueryProjectDocRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d559d5280efda17, []int{0}
}
func (m *QueryProjectDocRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProjectDocRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProjectDocRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProjectDocRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectDocRequest.Merge(m, src)
}
func (m *QueryProjectDocRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProjectDocRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectDocRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectDocRequest proto.InternalMessageInfo

func (m *QueryProjectDocRequest) GetProjectDid() string {
	if m != nil {
		return m.ProjectDid
	}
	return ""
}

// QueryProjectDocResponse is the response type for the Query/ProjectDoc RPC method.
type QueryProjectDocResponse struct {
	ProjectDoc *ProjectDoc `protobuf:"bytes,1,opt,name=project_doc,json=projectDoc,proto3" json:"project_doc,omitempty" yaml:"project_doc"`
}

func (m *QueryProjectDocResponse) Reset()         { *m = QueryProjectDocResponse{} }
func (m *QueryProjectDocResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProjectDocResponse) ProtoMessage()    {}
func (*QueryProjectDocResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d559d5280efda17, []int{1}
}
func (m *QueryProjectDocResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProjectDocResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProjectDocResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProjectDocResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectDocResponse.Merge(m, src)
}
func (m *QueryProjectDocResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProjectDocResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectDocResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectDocResponse proto.InternalMessageInfo

func (m *QueryProjectDocResponse) GetProjectDoc() *ProjectDoc {
	if m != nil {
		return m.ProjectDoc
	}
	return nil
}

// QueryProjectAccountsRequest is the request type for the Query/ProjectAccounts RPC method.
type QueryProjectAccountsRequest struct {
	ProjectDid string `protobuf:"bytes,1,opt,name=project_did,json=projectDid,proto3" json:"project_did,omitempty" yaml:"project_did"`
}

func (m *QueryProjectAccountsRequest) Reset()         { *m = QueryProjectAccountsRequest{} }
func (m *QueryProjectAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProjectAccountsRequest) ProtoMessage()    {}
func (*QueryProjectAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d559d5280efda17, []int{2}
}
func (m *QueryProjectAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProjectAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProjectAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProjectAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectAccountsRequest.Merge(m, src)
}
func (m *QueryProjectAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProjectAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectAccountsRequest proto.InternalMessageInfo

func (m *QueryProjectAccountsRequest) GetProjectDid() string {
	if m != nil {
		return m.ProjectDid
	}
	return ""
}

// QueryProjectAccountsResponse is the response type for the Query/ProjectAccounts RPC method.
type QueryProjectAccountsResponse struct {
	AccountMap *AccountMap `protobuf:"bytes,1,opt,name=account_map,json=accountMap,proto3" json:"account_map,omitempty" yaml:"account_map"`
}

func (m *QueryProjectAccountsResponse) Reset()         { *m = QueryProjectAccountsResponse{} }
func (m *QueryProjectAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProjectAccountsResponse) ProtoMessage()    {}
func (*QueryProjectAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d559d5280efda17, []int{3}
}
func (m *QueryProjectAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProjectAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProjectAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProjectAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectAccountsResponse.Merge(m, src)
}
func (m *QueryProjectAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProjectAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectAccountsResponse proto.InternalMessageInfo

func (m *QueryProjectAccountsResponse) GetAccountMap() *AccountMap {
	if m != nil {
		return m.AccountMap
	}
	return nil
}

// QueryProjectTxRequest is the request type for the Query/ProjectTx RPC method.
type QueryProjectTxRequest struct {
	ProjectDid string `protobuf:"bytes,1,opt,name=project_did,json=projectDid,proto3" json:"project_did,omitempty" yaml:"project_did"`
}

func (m *QueryProjectTxRequest) Reset()         { *m = QueryProjectTxRequest{} }
func (m *QueryProjectTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProjectTxRequest) ProtoMessage()    {}
func (*QueryProjectTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d559d5280efda17, []int{4}
}
func (m *QueryProjectTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProjectTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProjectTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProjectTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectTxRequest.Merge(m, src)
}
func (m *QueryProjectTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProjectTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectTxRequest proto.InternalMessageInfo

func (m *QueryProjectTxRequest) GetProjectDid() string {
	if m != nil {
		return m.ProjectDid
	}
	return ""
}

// QueryProjectTxResponse is the response type for the Query/ProjectTx RPC method.
type QueryProjectTxResponse struct {
	Txs *WithdrawalInfoDocs `protobuf:"bytes,1,opt,name=txs,proto3" json:"txs,omitempty" yaml:"txs"`
}

func (m *QueryProjectTxResponse) Reset()         { *m = QueryProjectTxResponse{} }
func (m *QueryProjectTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProjectTxResponse) ProtoMessage()    {}
func (*QueryProjectTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d559d5280efda17, []int{5}
}
func (m *QueryProjectTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProjectTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProjectTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProjectTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectTxResponse.Merge(m, src)
}
func (m *QueryProjectTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProjectTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectTxResponse proto.InternalMessageInfo

func (m *QueryProjectTxResponse) GetTxs() *WithdrawalInfoDocs {
	if m != nil {
		return m.Txs
	}
	return nil
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d559d5280efda17, []int{6}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params" yaml:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d559d5280efda17, []int{7}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryProjectDocRequest)(nil), "project.QueryProjectDocRequest")
	proto.RegisterType((*QueryProjectDocResponse)(nil), "project.QueryProjectDocResponse")
	proto.RegisterType((*QueryProjectAccountsRequest)(nil), "project.QueryProjectAccountsRequest")
	proto.RegisterType((*QueryProjectAccountsResponse)(nil), "project.QueryProjectAccountsResponse")
	proto.RegisterType((*QueryProjectTxRequest)(nil), "project.QueryProjectTxRequest")
	proto.RegisterType((*QueryProjectTxResponse)(nil), "project.QueryProjectTxResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "project.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "project.QueryParamsResponse")
}

func init() { proto.RegisterFile("project/query.proto", fileDescriptor_3d559d5280efda17) }

var fileDescriptor_3d559d5280efda17 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xc1, 0x6b, 0x13, 0x4f,
	0x14, 0xce, 0xfe, 0xca, 0x2f, 0xd2, 0x29, 0x5a, 0x9c, 0x24, 0x55, 0x36, 0x71, 0xb7, 0x0c, 0x2d,
	0x88, 0x60, 0x16, 0xea, 0xa1, 0x20, 0x28, 0x18, 0x72, 0x11, 0x14, 0x9a, 0x50, 0x2d, 0x78, 0x09,
	0x93, 0xc9, 0x76, 0xb3, 0x9a, 0xec, 0xdb, 0x66, 0x26, 0xb8, 0x41, 0xbc, 0x78, 0xf4, 0x24, 0xf8,
	0x4f, 0xf5, 0x58, 0xf0, 0xe2, 0x29, 0x4a, 0xe2, 0x5f, 0x90, 0xbf, 0x40, 0x76, 0x76, 0x76, 0x33,
	0xdd, 0x6e, 0xf1, 0xd0, 0x53, 0x32, 0xdf, 0x7b, 0xef, 0xfb, 0xbe, 0x37, 0xef, 0xed, 0xa0, 0x4a,
	0x38, 0x81, 0xf7, 0x2e, 0x13, 0xce, 0xd9, 0xd4, 0x9d, 0xcc, 0x9a, 0xe1, 0x04, 0x04, 0xe0, 0x5b,
	0x0a, 0x34, 0xab, 0x1e, 0x78, 0x20, 0x31, 0x27, 0xfe, 0x97, 0x84, 0xcd, 0x86, 0x07, 0xe0, 0x8d,
	0x5c, 0x87, 0x86, 0xbe, 0x43, 0x83, 0x00, 0x04, 0x15, 0x3e, 0x04, 0x5c, 0x45, 0xef, 0x32, 0xe0,
	0x63, 0xe0, 0x0e, 0x03, 0x3f, 0x50, 0x50, 0x2d, 0x15, 0x51, 0xbf, 0x09, 0x4c, 0x3a, 0x68, 0xa7,
	0x13, 0xab, 0x1e, 0x25, 0x68, 0x1b, 0x58, 0xd7, 0x3d, 0x9b, 0xba, 0x5c, 0xe0, 0x43, 0xb4, 0xa5,
	0x52, 0x7b, 0x03, 0x7f, 0x70, 0xdf, 0xd8, 0x35, 0x1e, 0x6e, 0xb6, 0x76, 0x56, 0x73, 0x1b, 0xcf,
	0xe8, 0x78, 0xf4, 0x94, 0x68, 0x41, 0xd2, 0x45, 0xea, 0xd4, 0xf6, 0x07, 0xc4, 0x43, 0xf7, 0xae,
	0x50, 0xf2, 0x10, 0x02, 0xee, 0xe2, 0x57, 0x1a, 0x27, 0x30, 0xc9, 0xb9, 0x75, 0x50, 0x69, 0xa6,
	0x96, 0xd6, 0x15, 0x85, 0x42, 0xc0, 0x34, 0x21, 0x60, 0xe4, 0x2d, 0xaa, 0xeb, 0x42, 0x2f, 0x18,
	0x83, 0x69, 0x20, 0xf8, 0x8d, 0x1b, 0x18, 0xa1, 0x46, 0x31, 0xef, 0xba, 0x0b, 0x9a, 0x60, 0xbd,
	0x31, 0x0d, 0xaf, 0x74, 0xa1, 0xf2, 0x5f, 0xd3, 0x50, 0x57, 0xd3, 0x2a, 0x48, 0x17, 0xd1, 0x2c,
	0x87, 0x1c, 0xa1, 0x9a, 0xae, 0x76, 0x1c, 0xdd, 0xd8, 0xff, 0xc9, 0xe5, 0x99, 0xc6, 0x8c, 0xca,
	0xf9, 0x33, 0xb4, 0x21, 0x22, 0xae, 0x1c, 0xd7, 0x33, 0xc7, 0x27, 0xbe, 0x18, 0x0e, 0x26, 0xf4,
	0x23, 0x1d, 0xbd, 0x0c, 0x4e, 0xa1, 0x0d, 0x8c, 0xb7, 0xee, 0xac, 0xe6, 0x36, 0x4a, 0x74, 0x44,
	0xc4, 0x49, 0x37, 0xae, 0x23, 0x55, 0x84, 0x13, 0x62, 0x3a, 0xa1, 0xe3, 0xf4, 0x9e, 0xc9, 0x1b,
	0x54, 0xb9, 0x84, 0x2a, 0xad, 0xe7, 0xa8, 0x1c, 0x4a, 0x44, 0xc9, 0x6d, 0xaf, 0xc7, 0x2c, 0xe1,
	0x56, 0xed, 0x7c, 0x6e, 0x97, 0x56, 0x73, 0xfb, 0xb6, 0x6a, 0x47, 0xa2, 0xa4, 0xab, 0xaa, 0x0e,
	0x7e, 0x6d, 0xa0, 0xff, 0x25, 0x2f, 0xe6, 0x08, 0xad, 0x37, 0x03, 0xdb, 0x19, 0x4f, 0xf1, 0xe2,
	0x9a, 0xbb, 0xd7, 0x27, 0x24, 0xd6, 0x08, 0xf9, 0xf2, 0xe3, 0xcf, 0xf7, 0xff, 0x1a, 0xd8, 0x74,
	0xfc, 0x08, 0xd2, 0x0f, 0xc2, 0xf9, 0xa4, 0x5d, 0xe8, 0x67, 0xfc, 0xd5, 0x40, 0xdb, 0xb9, 0x05,
	0xc0, 0x7b, 0x85, 0xcc, 0xb9, 0xbd, 0x33, 0xf7, 0xff, 0x91, 0xa5, 0x4c, 0x3c, 0x92, 0x26, 0xf6,
	0x30, 0xd1, 0x4d, 0xa4, 0x59, 0x39, 0x33, 0x1c, 0x6d, 0x66, 0xc3, 0xc4, 0x56, 0x21, 0x7f, 0xb6,
	0x37, 0xa6, 0x7d, 0x6d, 0x5c, 0x29, 0xef, 0x4b, 0x65, 0x1b, 0x3f, 0xd0, 0x95, 0x8f, 0xa3, 0xbc,
	0x68, 0x0f, 0x95, 0x93, 0x49, 0xe1, 0x7a, 0x8e, 0x51, 0x1f, 0xbf, 0xd9, 0x28, 0x0e, 0x2a, 0x2d,
	0x53, 0x6a, 0x55, 0x31, 0xd6, 0xb5, 0xd4, 0x02, 0x74, 0xce, 0x17, 0x96, 0x71, 0xb1, 0xb0, 0x8c,
	0xdf, 0x0b, 0xcb, 0xf8, 0xb6, 0xb4, 0x4a, 0x17, 0x4b, 0xab, 0xf4, 0x73, 0x69, 0x95, 0xde, 0x1d,
	0x7a, 0xbe, 0x18, 0x4e, 0xfb, 0x4d, 0x06, 0xe3, 0xb8, 0xee, 0x14, 0xa6, 0xc1, 0x40, 0x3e, 0x70,
	0xf1, 0xe9, 0x71, 0x7f, 0x04, 0xec, 0x03, 0x1b, 0x52, 0x3f, 0x70, 0xa2, 0x6c, 0x7a, 0x62, 0x16,
	0xba, 0xbc, 0x5f, 0x96, 0xaf, 0xda, 0x93, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xda, 0x0f, 0x5e,
	0x80, 0x53, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ProjectDoc queries info of a specific project.
	ProjectDoc(ctx context.Context, in *QueryProjectDocRequest, opts ...grpc.CallOption) (*QueryProjectDocResponse, error)
	// ProjectAccounts lists a specific project's accounts.
	ProjectAccounts(ctx context.Context, in *QueryProjectAccountsRequest, opts ...grpc.CallOption) (*QueryProjectAccountsResponse, error)
	// ProjectTx lists a specific project's transactions.
	ProjectTx(ctx context.Context, in *QueryProjectTxRequest, opts ...grpc.CallOption) (*QueryProjectTxResponse, error)
	// Params queries the paramaters of x/project module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ProjectDoc(ctx context.Context, in *QueryProjectDocRequest, opts ...grpc.CallOption) (*QueryProjectDocResponse, error) {
	out := new(QueryProjectDocResponse)
	err := c.cc.Invoke(ctx, "/project.Query/ProjectDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProjectAccounts(ctx context.Context, in *QueryProjectAccountsRequest, opts ...grpc.CallOption) (*QueryProjectAccountsResponse, error) {
	out := new(QueryProjectAccountsResponse)
	err := c.cc.Invoke(ctx, "/project.Query/ProjectAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProjectTx(ctx context.Context, in *QueryProjectTxRequest, opts ...grpc.CallOption) (*QueryProjectTxResponse, error) {
	out := new(QueryProjectTxResponse)
	err := c.cc.Invoke(ctx, "/project.Query/ProjectTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/project.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ProjectDoc queries info of a specific project.
	ProjectDoc(context.Context, *QueryProjectDocRequest) (*QueryProjectDocResponse, error)
	// ProjectAccounts lists a specific project's accounts.
	ProjectAccounts(context.Context, *QueryProjectAccountsRequest) (*QueryProjectAccountsResponse, error)
	// ProjectTx lists a specific project's transactions.
	ProjectTx(context.Context, *QueryProjectTxRequest) (*QueryProjectTxResponse, error)
	// Params queries the paramaters of x/project module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ProjectDoc(ctx context.Context, req *QueryProjectDocRequest) (*QueryProjectDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectDoc not implemented")
}
func (*UnimplementedQueryServer) ProjectAccounts(ctx context.Context, req *QueryProjectAccountsRequest) (*QueryProjectAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectAccounts not implemented")
}
func (*UnimplementedQueryServer) ProjectTx(ctx context.Context, req *QueryProjectTxRequest) (*QueryProjectTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectTx not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ProjectDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProjectDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Query/ProjectDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProjectDoc(ctx, req.(*QueryProjectDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProjectAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProjectAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Query/ProjectAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProjectAccounts(ctx, req.(*QueryProjectAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProjectTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProjectTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Query/ProjectTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProjectTx(ctx, req.(*QueryProjectTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "project.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProjectDoc",
			Handler:    _Query_ProjectDoc_Handler,
		},
		{
			MethodName: "ProjectAccounts",
			Handler:    _Query_ProjectAccounts_Handler,
		},
		{
			MethodName: "ProjectTx",
			Handler:    _Query_ProjectTx_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project/query.proto",
}

func (m *QueryProjectDocRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProjectDocRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProjectDocRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProjectDid) > 0 {
		i -= len(m.ProjectDid)
		copy(dAtA[i:], m.ProjectDid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProjectDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProjectDocResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProjectDocResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProjectDocResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProjectDoc != nil {
		{
			size, err := m.ProjectDoc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProjectAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProjectAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProjectAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProjectDid) > 0 {
		i -= len(m.ProjectDid)
		copy(dAtA[i:], m.ProjectDid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProjectDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProjectAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProjectAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProjectAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccountMap != nil {
		{
			size, err := m.AccountMap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProjectTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProjectTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProjectTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProjectDid) > 0 {
		i -= len(m.ProjectDid)
		copy(dAtA[i:], m.ProjectDid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProjectDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProjectTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProjectTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProjectTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Txs != nil {
		{
			size, err := m.Txs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryProjectDocRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectDid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProjectDocResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectDoc != nil {
		l = m.ProjectDoc.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProjectAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectDid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProjectAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountMap != nil {
		l = m.AccountMap.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProjectTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectDid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProjectTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Txs != nil {
		l = m.Txs.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryProjectDocRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProjectDocRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProjectDocRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProjectDocResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProjectDocResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProjectDocResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectDoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProjectDoc == nil {
				m.ProjectDoc = &ProjectDoc{}
			}
			if err := m.ProjectDoc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProjectAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProjectAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProjectAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProjectAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProjectAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProjectAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountMap == nil {
				m.AccountMap = &AccountMap{}
			}
			if err := m.AccountMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProjectTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProjectTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProjectTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProjectTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProjectTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProjectTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Txs == nil {
				m.Txs = &WithdrawalInfoDocs{}
			}
			if err := m.Txs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
