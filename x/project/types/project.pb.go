// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: project/project.proto

package types

import (
	encoding_json "encoding/json"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UpdateProjectStatusDoc contains details required to update a project's status.
type UpdateProjectStatusDoc struct {
	Status          string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty" yaml:"status"`
	EthFundingTxnId string `protobuf:"bytes,2,opt,name=eth_funding_txn_id,json=ethFundingTxnId,proto3" json:"ethFundingTxnID" yaml:"ethFundingTxnID"`
}

func (m *UpdateProjectStatusDoc) Reset()         { *m = UpdateProjectStatusDoc{} }
func (m *UpdateProjectStatusDoc) String() string { return proto.CompactTextString(m) }
func (*UpdateProjectStatusDoc) ProtoMessage()    {}
func (*UpdateProjectStatusDoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cf0ca921a221351, []int{0}
}
func (m *UpdateProjectStatusDoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateProjectStatusDoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateProjectStatusDoc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateProjectStatusDoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProjectStatusDoc.Merge(m, src)
}
func (m *UpdateProjectStatusDoc) XXX_Size() int {
	return m.Size()
}
func (m *UpdateProjectStatusDoc) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProjectStatusDoc.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProjectStatusDoc proto.InternalMessageInfo

func (m *UpdateProjectStatusDoc) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UpdateProjectStatusDoc) GetEthFundingTxnId() string {
	if m != nil {
		return m.EthFundingTxnId
	}
	return ""
}

// CreateAgentDoc contains details required to create an agent.
type CreateAgentDoc struct {
	AgentDid string `protobuf:"bytes,1,opt,name=agent_did,json=agentDid,proto3" json:"did" yaml:"did"`
	Role     string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty" yaml:"role"`
}

func (m *CreateAgentDoc) Reset()         { *m = CreateAgentDoc{} }
func (m *CreateAgentDoc) String() string { return proto.CompactTextString(m) }
func (*CreateAgentDoc) ProtoMessage()    {}
func (*CreateAgentDoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cf0ca921a221351, []int{1}
}
func (m *CreateAgentDoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAgentDoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAgentDoc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAgentDoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAgentDoc.Merge(m, src)
}
func (m *CreateAgentDoc) XXX_Size() int {
	return m.Size()
}
func (m *CreateAgentDoc) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAgentDoc.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAgentDoc proto.InternalMessageInfo

func (m *CreateAgentDoc) GetAgentDid() string {
	if m != nil {
		return m.AgentDid
	}
	return ""
}

func (m *CreateAgentDoc) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

// UpdateAgentDoc contains details required to update an agent.
type UpdateAgentDoc struct {
	Did    string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty" yaml:"did"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty" yaml:"status"`
	Role   string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty" yaml:"role"`
}

func (m *UpdateAgentDoc) Reset()         { *m = UpdateAgentDoc{} }
func (m *UpdateAgentDoc) String() string { return proto.CompactTextString(m) }
func (*UpdateAgentDoc) ProtoMessage()    {}
func (*UpdateAgentDoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cf0ca921a221351, []int{2}
}
func (m *UpdateAgentDoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAgentDoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAgentDoc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAgentDoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAgentDoc.Merge(m, src)
}
func (m *UpdateAgentDoc) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAgentDoc) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAgentDoc.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAgentDoc proto.InternalMessageInfo

func (m *UpdateAgentDoc) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *UpdateAgentDoc) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UpdateAgentDoc) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

// CreateClaimDoc contains details required to create a claim on a project.
type CreateClaimDoc struct {
	ClaimId         string `protobuf:"bytes,1,opt,name=claim_id,json=claimId,proto3" json:"claimID" yaml:"claimID"`
	ClaimTemplateId string `protobuf:"bytes,2,opt,name=claim_template_id,json=claimTemplateId,proto3" json:"claimTemplateID" yaml:"claimTemplateID"`
}

func (m *CreateClaimDoc) Reset()         { *m = CreateClaimDoc{} }
func (m *CreateClaimDoc) String() string { return proto.CompactTextString(m) }
func (*CreateClaimDoc) ProtoMessage()    {}
func (*CreateClaimDoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cf0ca921a221351, []int{3}
}
func (m *CreateClaimDoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateClaimDoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateClaimDoc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateClaimDoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClaimDoc.Merge(m, src)
}
func (m *CreateClaimDoc) XXX_Size() int {
	return m.Size()
}
func (m *CreateClaimDoc) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClaimDoc.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClaimDoc proto.InternalMessageInfo

func (m *CreateClaimDoc) GetClaimId() string {
	if m != nil {
		return m.ClaimId
	}
	return ""
}

func (m *CreateClaimDoc) GetClaimTemplateId() string {
	if m != nil {
		return m.ClaimTemplateId
	}
	return ""
}

// CreateEvaluationDoc contains details required to create an evaluation for a specific claim on a project.
type CreateEvaluationDoc struct {
	ClaimId string `protobuf:"bytes,1,opt,name=claim_id,json=claimId,proto3" json:"claimID" yaml:"claimID"`
	Status  string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty" yaml:"status"`
}

func (m *CreateEvaluationDoc) Reset()         { *m = CreateEvaluationDoc{} }
func (m *CreateEvaluationDoc) String() string { return proto.CompactTextString(m) }
func (*CreateEvaluationDoc) ProtoMessage()    {}
func (*CreateEvaluationDoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cf0ca921a221351, []int{4}
}
func (m *CreateEvaluationDoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateEvaluationDoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateEvaluationDoc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateEvaluationDoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateEvaluationDoc.Merge(m, src)
}
func (m *CreateEvaluationDoc) XXX_Size() int {
	return m.Size()
}
func (m *CreateEvaluationDoc) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateEvaluationDoc.DiscardUnknown(m)
}

var xxx_messageInfo_CreateEvaluationDoc proto.InternalMessageInfo

func (m *CreateEvaluationDoc) GetClaimId() string {
	if m != nil {
		return m.ClaimId
	}
	return ""
}

func (m *CreateEvaluationDoc) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// WithdrawFundsDoc contains details required to withdraw funds from a specific project.
type WithdrawFundsDoc struct {
	ProjectDid   string                                 `protobuf:"bytes,1,opt,name=project_did,json=projectDid,proto3" json:"projectDid" yaml:"projectDid"`
	RecipientDid string                                 `protobuf:"bytes,2,opt,name=recipient_did,json=recipientDid,proto3" json:"recipientDid" yaml:"recipientDid"`
	Amount       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	IsRefund     bool                                   `protobuf:"varint,4,opt,name=is_refund,json=isRefund,proto3" json:"isRefund" yaml:"isRefund"`
}

func (m *WithdrawFundsDoc) Reset()         { *m = WithdrawFundsDoc{} }
func (m *WithdrawFundsDoc) String() string { return proto.CompactTextString(m) }
func (*WithdrawFundsDoc) ProtoMessage()    {}
func (*WithdrawFundsDoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cf0ca921a221351, []int{5}
}
func (m *WithdrawFundsDoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawFundsDoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawFundsDoc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawFundsDoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawFundsDoc.Merge(m, src)
}
func (m *WithdrawFundsDoc) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawFundsDoc) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawFundsDoc.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawFundsDoc proto.InternalMessageInfo

func (m *WithdrawFundsDoc) GetProjectDid() string {
	if m != nil {
		return m.ProjectDid
	}
	return ""
}

func (m *WithdrawFundsDoc) GetRecipientDid() string {
	if m != nil {
		return m.RecipientDid
	}
	return ""
}

func (m *WithdrawFundsDoc) GetIsRefund() bool {
	if m != nil {
		return m.IsRefund
	}
	return false
}

// ProjectDoc defines a project (or entity) type with all of its parameters.
type ProjectDoc struct {
	TxHash     string                   `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"txHash" yaml:"txHash"`
	ProjectDid string                   `protobuf:"bytes,2,opt,name=project_did,json=projectDid,proto3" json:"projectDid" yaml:"projectDid"`
	SenderDid  string                   `protobuf:"bytes,3,opt,name=sender_did,json=senderDid,proto3" json:"senderDid" yaml:"senderDid"`
	PubKey     string                   `protobuf:"bytes,4,opt,name=pub_key,json=pubKey,proto3" json:"pubKey" yaml:"pubKey"`
	Status     string                   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty" yaml:"status"`
	Data       encoding_json.RawMessage `protobuf:"bytes,6,opt,name=data,proto3,casttype=encoding/json.RawMessage" json:"data,omitempty" yaml:"data"`
}

func (m *ProjectDoc) Reset()         { *m = ProjectDoc{} }
func (m *ProjectDoc) String() string { return proto.CompactTextString(m) }
func (*ProjectDoc) ProtoMessage()    {}
func (*ProjectDoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cf0ca921a221351, []int{6}
}
func (m *ProjectDoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProjectDoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProjectDoc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProjectDoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectDoc.Merge(m, src)
}
func (m *ProjectDoc) XXX_Size() int {
	return m.Size()
}
func (m *ProjectDoc) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectDoc.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectDoc proto.InternalMessageInfo

func (m *ProjectDoc) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *ProjectDoc) GetProjectDid() string {
	if m != nil {
		return m.ProjectDid
	}
	return ""
}

func (m *ProjectDoc) GetSenderDid() string {
	if m != nil {
		return m.SenderDid
	}
	return ""
}

func (m *ProjectDoc) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *ProjectDoc) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ProjectDoc) GetData() encoding_json.RawMessage {
	if m != nil {
		return m.Data
	}
	return nil
}

// WithdrawalInfoDoc contains details required to withdraw from a specific project.
type WithdrawalInfoDoc struct {
	ProjectDid   string     `protobuf:"bytes,1,opt,name=project_did,json=projectDid,proto3" json:"projectDid" yaml:"projectDid"`
	RecipientDid string     `protobuf:"bytes,2,opt,name=recipient_did,json=recipientDid,proto3" json:"recipientDid" yaml:"recipientDid"`
	Amount       types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount" yaml:"amount"`
}

func (m *WithdrawalInfoDoc) Reset()         { *m = WithdrawalInfoDoc{} }
func (m *WithdrawalInfoDoc) String() string { return proto.CompactTextString(m) }
func (*WithdrawalInfoDoc) ProtoMessage()    {}
func (*WithdrawalInfoDoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cf0ca921a221351, []int{7}
}
func (m *WithdrawalInfoDoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawalInfoDoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawalInfoDoc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawalInfoDoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawalInfoDoc.Merge(m, src)
}
func (m *WithdrawalInfoDoc) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawalInfoDoc) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawalInfoDoc.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawalInfoDoc proto.InternalMessageInfo

func (m *WithdrawalInfoDoc) GetProjectDid() string {
	if m != nil {
		return m.ProjectDid
	}
	return ""
}

func (m *WithdrawalInfoDoc) GetRecipientDid() string {
	if m != nil {
		return m.RecipientDid
	}
	return ""
}

func (m *WithdrawalInfoDoc) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// Params defines the parameters for the project module.
type Params struct {
	IxoDid                       string                                   `protobuf:"bytes,1,opt,name=ixo_did,json=ixoDid,proto3" json:"ixo_did,omitempty" yaml:"ixo_did"`
	ProjectMinimumInitialFunding github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=project_minimum_initial_funding,json=projectMinimumInitialFunding,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"project_minimum_initial_funding" yaml:"project_minimum_initial_funding"`
	OracleFeePercentage          github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,3,opt,name=oracle_fee_percentage,json=oracleFeePercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"oracle_fee_percentage" yaml:"oracle_fee_percentage"`
	NodeFeePercentage            github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,4,opt,name=node_fee_percentage,json=nodeFeePercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"node_fee_percentage" yaml:"node_fee_percentage"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cf0ca921a221351, []int{8}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetIxoDid() string {
	if m != nil {
		return m.IxoDid
	}
	return ""
}

func (m *Params) GetProjectMinimumInitialFunding() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ProjectMinimumInitialFunding
	}
	return nil
}

// Claim contains details required to start a claim on a project.
type Claim struct {
	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	TemplateId string `protobuf:"bytes,2,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty" yaml:"template_id"`
	ClaimerDid string `protobuf:"bytes,3,opt,name=claimer_did,json=claimerDid,proto3" json:"claimer_did,omitempty" yaml:"claimer_did"`
	Status     string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty" yaml:"status"`
}

func (m *Claim) Reset()         { *m = Claim{} }
func (m *Claim) String() string { return proto.CompactTextString(m) }
func (*Claim) ProtoMessage()    {}
func (*Claim) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cf0ca921a221351, []int{9}
}
func (m *Claim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Claim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Claim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Claim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claim.Merge(m, src)
}
func (m *Claim) XXX_Size() int {
	return m.Size()
}
func (m *Claim) XXX_DiscardUnknown() {
	xxx_messageInfo_Claim.DiscardUnknown(m)
}

var xxx_messageInfo_Claim proto.InternalMessageInfo

func (m *Claim) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Claim) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

func (m *Claim) GetClaimerDid() string {
	if m != nil {
		return m.ClaimerDid
	}
	return ""
}

func (m *Claim) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// GenesisAccountMap is a type used at genesis that maps a specific project's account names to the accounts' addresses.
type GenesisAccountMap struct {
	Map map[string]string `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" yaml:"map" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GenesisAccountMap) Reset()         { *m = GenesisAccountMap{} }
func (m *GenesisAccountMap) String() string { return proto.CompactTextString(m) }
func (*GenesisAccountMap) ProtoMessage()    {}
func (*GenesisAccountMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cf0ca921a221351, []int{10}
}
func (m *GenesisAccountMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisAccountMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisAccountMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisAccountMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisAccountMap.Merge(m, src)
}
func (m *GenesisAccountMap) XXX_Size() int {
	return m.Size()
}
func (m *GenesisAccountMap) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisAccountMap.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisAccountMap proto.InternalMessageInfo

func (m *GenesisAccountMap) GetMap() map[string]string {
	if m != nil {
		return m.Map
	}
	return nil
}

// AccountMap maps a specific project's account names to the accounts' addresses.
type AccountMap struct {
	Map map[string]string `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" yaml:"map" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *AccountMap) Reset()         { *m = AccountMap{} }
func (m *AccountMap) String() string { return proto.CompactTextString(m) }
func (*AccountMap) ProtoMessage()    {}
func (*AccountMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cf0ca921a221351, []int{11}
}
func (m *AccountMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountMap.Merge(m, src)
}
func (m *AccountMap) XXX_Size() int {
	return m.Size()
}
func (m *AccountMap) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountMap.DiscardUnknown(m)
}

var xxx_messageInfo_AccountMap proto.InternalMessageInfo

func (m *AccountMap) GetMap() map[string]string {
	if m != nil {
		return m.Map
	}
	return nil
}

// WithdrawalInfoDocs contains a list of type WithdrawalInfoDoc.
type WithdrawalInfoDocs struct {
	DocsList []WithdrawalInfoDoc `protobuf:"bytes,1,rep,name=docs_list,json=docsList,proto3" json:"docs_list" yaml:"docs_list"`
}

func (m *WithdrawalInfoDocs) Reset()         { *m = WithdrawalInfoDocs{} }
func (m *WithdrawalInfoDocs) String() string { return proto.CompactTextString(m) }
func (*WithdrawalInfoDocs) ProtoMessage()    {}
func (*WithdrawalInfoDocs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cf0ca921a221351, []int{12}
}
func (m *WithdrawalInfoDocs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawalInfoDocs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawalInfoDocs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawalInfoDocs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawalInfoDocs.Merge(m, src)
}
func (m *WithdrawalInfoDocs) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawalInfoDocs) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawalInfoDocs.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawalInfoDocs proto.InternalMessageInfo

func (m *WithdrawalInfoDocs) GetDocsList() []WithdrawalInfoDoc {
	if m != nil {
		return m.DocsList
	}
	return nil
}

// Claims contains a list of type Claim.
type Claims struct {
	ClaimsList []Claim `protobuf:"bytes,1,rep,name=claims_list,json=claimsList,proto3" json:"claims_list" yaml:"claims_list"`
}

func (m *Claims) Reset()         { *m = Claims{} }
func (m *Claims) String() string { return proto.CompactTextString(m) }
func (*Claims) ProtoMessage()    {}
func (*Claims) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cf0ca921a221351, []int{13}
}
func (m *Claims) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Claims) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Claims.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Claims) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claims.Merge(m, src)
}
func (m *Claims) XXX_Size() int {
	return m.Size()
}
func (m *Claims) XXX_DiscardUnknown() {
	xxx_messageInfo_Claims.DiscardUnknown(m)
}

var xxx_messageInfo_Claims proto.InternalMessageInfo

func (m *Claims) GetClaimsList() []Claim {
	if m != nil {
		return m.ClaimsList
	}
	return nil
}

func init() {
	proto.RegisterType((*UpdateProjectStatusDoc)(nil), "project.UpdateProjectStatusDoc")
	proto.RegisterType((*CreateAgentDoc)(nil), "project.CreateAgentDoc")
	proto.RegisterType((*UpdateAgentDoc)(nil), "project.UpdateAgentDoc")
	proto.RegisterType((*CreateClaimDoc)(nil), "project.CreateClaimDoc")
	proto.RegisterType((*CreateEvaluationDoc)(nil), "project.CreateEvaluationDoc")
	proto.RegisterType((*WithdrawFundsDoc)(nil), "project.WithdrawFundsDoc")
	proto.RegisterType((*ProjectDoc)(nil), "project.ProjectDoc")
	proto.RegisterType((*WithdrawalInfoDoc)(nil), "project.WithdrawalInfoDoc")
	proto.RegisterType((*Params)(nil), "project.Params")
	proto.RegisterType((*Claim)(nil), "project.Claim")
	proto.RegisterType((*GenesisAccountMap)(nil), "project.GenesisAccountMap")
	proto.RegisterMapType((map[string]string)(nil), "project.GenesisAccountMap.MapEntry")
	proto.RegisterType((*AccountMap)(nil), "project.AccountMap")
	proto.RegisterMapType((map[string]string)(nil), "project.AccountMap.MapEntry")
	proto.RegisterType((*WithdrawalInfoDocs)(nil), "project.WithdrawalInfoDocs")
	proto.RegisterType((*Claims)(nil), "project.Claims")
}

func init() { proto.RegisterFile("project/project.proto", fileDescriptor_2cf0ca921a221351) }

var fileDescriptor_2cf0ca921a221351 = []byte{
	// 1177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xda, 0x89, 0x63, 0x4f, 0x9a, 0x3f, 0xde, 0x34, 0x91, 0x31, 0xa9, 0x37, 0x4c, 0xa4,
	0x12, 0x54, 0xc5, 0x56, 0x0b, 0xa2, 0x55, 0x85, 0x28, 0x75, 0x9c, 0xd2, 0xa8, 0x09, 0x4a, 0x87,
	0x56, 0x15, 0xb9, 0xac, 0xc6, 0xbb, 0x13, 0x7b, 0x1a, 0xef, 0xce, 0x6a, 0x77, 0xdc, 0x3a, 0x88,
	0x53, 0xc5, 0x07, 0x40, 0x7c, 0x01, 0x4e, 0x5c, 0xf8, 0x0c, 0x70, 0xe2, 0xd2, 0x63, 0x8f, 0x88,
	0xc3, 0x82, 0x92, 0x9b, 0xc5, 0x05, 0x5f, 0x90, 0x38, 0xa1, 0xd9, 0x99, 0x5d, 0xaf, 0x9d, 0xb6,
	0x69, 0x41, 0x48, 0x3d, 0x79, 0xe6, 0xbd, 0x37, 0x3f, 0xff, 0xf6, 0xcd, 0xef, 0xbd, 0x37, 0x60,
	0xc9, 0xf3, 0xd9, 0x43, 0x62, 0xf1, 0x9a, 0xfa, 0xad, 0x7a, 0x3e, 0xe3, 0x4c, 0x9f, 0x56, 0xdb,
	0xf2, 0xf9, 0x16, 0x6b, 0xb1, 0xc8, 0x56, 0x13, 0x2b, 0xe9, 0x2e, 0x17, 0x2d, 0x16, 0x38, 0x2c,
	0xa8, 0x59, 0x8c, 0xba, 0xd2, 0x04, 0xbf, 0xd3, 0xc0, 0xf2, 0x7d, 0xcf, 0xc6, 0x9c, 0xec, 0xc9,
	0xa3, 0x9f, 0x73, 0xcc, 0xbb, 0x41, 0x83, 0x59, 0xfa, 0x7b, 0x20, 0x17, 0x44, 0x9b, 0x92, 0xb6,
	0xaa, 0xad, 0x17, 0xea, 0xc5, 0x41, 0x68, 0xcc, 0x1e, 0x61, 0xa7, 0x73, 0x1d, 0x4a, 0x3b, 0x44,
	0x2a, 0x40, 0xdf, 0x07, 0x3a, 0xe1, 0x6d, 0xf3, 0xa0, 0xeb, 0xda, 0xd4, 0x6d, 0x99, 0xbc, 0xe7,
	0x9a, 0xd4, 0x2e, 0x65, 0xa2, 0x63, 0x1b, 0xfd, 0xd0, 0x98, 0x27, 0xbc, 0x7d, 0x4b, 0x3a, 0xef,
	0xf5, 0xdc, 0xed, 0xc6, 0x20, 0x34, 0x96, 0x25, 0xd2, 0x98, 0x03, 0xa2, 0xb1, 0x50, 0x1b, 0x52,
	0x30, 0xb7, 0xe9, 0x13, 0xcc, 0xc9, 0xcd, 0x16, 0x71, 0xb9, 0x20, 0x76, 0x05, 0x14, 0xb0, 0x58,
	0x9b, 0x36, 0xb5, 0x15, 0xb7, 0xa5, 0x7e, 0x68, 0x64, 0x6d, 0x6a, 0x0f, 0x42, 0x03, 0x48, 0x60,
	0x9b, 0xda, 0x10, 0xe5, 0xa3, 0xb8, 0x06, 0xb5, 0xf5, 0x35, 0x30, 0xe9, 0xb3, 0x0e, 0x51, 0x9c,
	0xe6, 0x07, 0xa1, 0x31, 0x23, 0xe3, 0x84, 0x15, 0xa2, 0xc8, 0x09, 0x9f, 0x68, 0x60, 0x4e, 0x26,
	0x23, 0xf9, 0xaf, 0x55, 0x90, 0x1d, 0xfe, 0xcb, 0xdc, 0x18, 0xbc, 0x70, 0xa5, 0xd2, 0x94, 0x39,
	0x2b, 0x4d, 0x31, 0x89, 0xec, 0xcb, 0x48, 0x7c, 0xaf, 0xc5, 0x1f, 0xbc, 0xd9, 0xc1, 0xd4, 0x11,
	0x24, 0xae, 0x81, 0xbc, 0x25, 0xd6, 0x66, 0xc2, 0xe4, 0x42, 0x3f, 0x34, 0xa6, 0x23, 0x5b, 0x94,
	0xcc, 0x39, 0x09, 0xa3, 0x0c, 0x10, 0x29, 0x97, 0xad, 0x7f, 0x01, 0x8a, 0xf2, 0x24, 0x27, 0x8e,
	0xd7, 0xc1, 0x9c, 0x8c, 0xdd, 0x4b, 0xe4, 0xbc, 0xa7, 0x7c, 0xe9, 0x7b, 0x19, 0x73, 0x40, 0x34,
	0x16, 0x6a, 0xc3, 0x2f, 0xc1, 0xa2, 0xa4, 0xb9, 0xf5, 0x08, 0x77, 0xba, 0x98, 0x53, 0xe6, 0xfe,
	0x37, 0xae, 0xaf, 0x9e, 0x48, 0xf8, 0x53, 0x06, 0x2c, 0x3c, 0xa0, 0xbc, 0x6d, 0xfb, 0xf8, 0xb1,
	0x10, 0x4b, 0xa4, 0xd7, 0x06, 0x98, 0x51, 0xf2, 0x4f, 0x09, 0x63, 0xad, 0x1f, 0x1a, 0x40, 0x99,
	0x1b, 0x91, 0x3e, 0x8a, 0x12, 0x72, 0x68, 0x83, 0x28, 0x15, 0xa0, 0xef, 0x80, 0x59, 0x9f, 0x58,
	0xd4, 0xa3, 0xb1, 0xc0, 0x24, 0x99, 0x77, 0xfb, 0xa1, 0x71, 0x2e, 0x71, 0x48, 0xa4, 0x45, 0x75,
	0x79, 0x29, 0x2b, 0x44, 0x23, 0x41, 0xfa, 0x03, 0x90, 0xc3, 0x0e, 0xeb, 0xba, 0x5c, 0xdd, 0xf9,
	0x8d, 0xa7, 0xa1, 0x31, 0xf1, 0x6b, 0x68, 0x5c, 0x6c, 0x51, 0xde, 0xee, 0x36, 0xab, 0x16, 0x73,
	0x6a, 0x49, 0x51, 0x8a, 0x9f, 0x8d, 0xc0, 0x3e, 0xac, 0xf1, 0x23, 0x8f, 0x04, 0xd5, 0x6d, 0x97,
	0x0f, 0x33, 0x20, 0x51, 0x20, 0x52, 0x70, 0xfa, 0x47, 0xa0, 0x40, 0x03, 0xd3, 0x27, 0xa2, 0xe4,
	0x4a, 0x93, 0xab, 0xda, 0x7a, 0xbe, 0x6e, 0xf4, 0x43, 0x23, 0x4f, 0x03, 0x14, 0xd9, 0x06, 0xa1,
	0x31, 0x2f, 0x4f, 0xc6, 0x16, 0x88, 0x12, 0x27, 0xfc, 0x23, 0x03, 0x80, 0xaa, 0x77, 0x91, 0xb9,
	0x0f, 0xc0, 0x34, 0xef, 0x99, 0x6d, 0x1c, 0xb4, 0x55, 0xd6, 0xde, 0xee, 0x87, 0x46, 0x8e, 0xf7,
	0x6e, 0xe3, 0xa0, 0x3d, 0xa4, 0x20, 0xf7, 0x10, 0x29, 0xc7, 0x78, 0xbe, 0x33, 0xff, 0x2e, 0xdf,
	0x9f, 0x00, 0x10, 0x10, 0xd7, 0x26, 0x7e, 0x04, 0x22, 0xb3, 0xf4, 0x4e, 0x3f, 0x34, 0x0a, 0xd2,
	0x2a, 0x31, 0x16, 0x94, 0x0c, 0x62, 0x13, 0x44, 0x43, 0xb7, 0x60, 0xef, 0x75, 0x9b, 0xe6, 0x21,
	0x39, 0x8a, 0x12, 0xa1, 0xd8, 0x7b, 0xdd, 0xe6, 0x1d, 0x72, 0x34, 0x64, 0x2f, 0xf7, 0x10, 0x29,
	0x47, 0x4a, 0x6d, 0x53, 0x67, 0x95, 0xed, 0x0d, 0x30, 0x69, 0x63, 0x8e, 0x4b, 0xb9, 0x55, 0x6d,
	0xfd, 0x5c, 0xfd, 0xd2, 0xb0, 0x6c, 0x85, 0x15, 0xfe, 0x1d, 0x1a, 0x25, 0xe2, 0x5a, 0x4c, 0x74,
	0xac, 0xda, 0xc3, 0x80, 0xb9, 0x55, 0x84, 0x1f, 0xef, 0x92, 0x20, 0xc0, 0x2d, 0x82, 0xa2, 0x83,
	0xf0, 0x4f, 0x0d, 0x14, 0x63, 0xb9, 0xe2, 0xce, 0xb6, 0x7b, 0xc0, 0xde, 0x54, 0xbd, 0xde, 0x1e,
	0xd1, 0xeb, 0xcc, 0x95, 0xb7, 0xaa, 0x52, 0x96, 0xd5, 0x26, 0x0e, 0x48, 0xf5, 0xd1, 0xe5, 0x26,
	0xe1, 0xf8, 0x72, 0x75, 0x93, 0x51, 0xb7, 0xbe, 0x24, 0xa4, 0xfc, 0x42, 0x81, 0xc2, 0xbf, 0xb2,
	0x20, 0xb7, 0x87, 0x7d, 0xec, 0x04, 0xfa, 0x25, 0x30, 0x4d, 0x7b, 0x2c, 0xf5, 0x91, 0xfa, 0xb0,
	0x0d, 0x28, 0x07, 0x44, 0x39, 0xda, 0x63, 0x82, 0xc1, 0x8f, 0x1a, 0x30, 0xe2, 0xb4, 0x38, 0xd4,
	0xa5, 0x4e, 0xd7, 0x31, 0xa9, 0x4b, 0x39, 0xc5, 0x9d, 0x78, 0xbe, 0x94, 0x32, 0xab, 0xd9, 0x97,
	0x73, 0xdb, 0x57, 0xdc, 0x2e, 0x8e, 0xe4, 0xee, 0x45, 0x78, 0xf0, 0x87, 0xdf, 0x8c, 0xf5, 0x57,
	0x28, 0x48, 0x01, 0x1d, 0xa0, 0x15, 0x85, 0xb6, 0x2b, 0xc1, 0xb6, 0x25, 0x96, 0x1a, 0x59, 0xfa,
	0x13, 0x0d, 0x2c, 0x31, 0x1f, 0x5b, 0x1d, 0x62, 0x1e, 0x10, 0x62, 0x7a, 0xc4, 0xb7, 0x88, 0xcb,
	0x71, 0x2b, 0x6e, 0xfa, 0x9f, 0xbd, 0x46, 0x03, 0x68, 0x10, 0x6b, 0x10, 0x1a, 0x2b, 0xf2, 0x1b,
	0x9e, 0x0b, 0x0a, 0xd1, 0xa2, 0xb4, 0xdf, 0x22, 0x64, 0x2f, 0xb1, 0xea, 0x5f, 0x81, 0x45, 0x97,
	0xd9, 0xa7, 0x18, 0xc8, 0xea, 0xd8, 0x79, 0x6d, 0x06, 0x65, 0xc9, 0xe0, 0x39, 0x90, 0x10, 0x15,
	0x85, 0x75, 0xe4, 0xdf, 0xe1, 0xcf, 0x1a, 0x98, 0x8a, 0x46, 0x97, 0x7e, 0x01, 0x64, 0x92, 0x3b,
	0x9f, 0x1d, 0x84, 0x46, 0x41, 0xdd, 0xb9, 0x0d, 0x51, 0x86, 0xda, 0xfa, 0x55, 0x30, 0x73, 0x7a,
	0x2c, 0x2d, 0x0f, 0x42, 0x43, 0x57, 0x0d, 0x67, 0xe8, 0x84, 0x08, 0xf0, 0x64, 0xf4, 0x88, 0x83,
	0xd1, 0xd0, 0x18, 0x69, 0x1a, 0xa9, 0x83, 0x29, 0x27, 0x44, 0x40, 0xed, 0x1a, 0x23, 0xb3, 0x7a,
	0xf2, 0xac, 0x11, 0xf3, 0xad, 0x06, 0x8a, 0x9f, 0x12, 0x97, 0x04, 0x34, 0xb8, 0x69, 0x59, 0x42,
	0xd2, 0xbb, 0xd8, 0xd3, 0xb7, 0x40, 0xd6, 0xc1, 0x5e, 0x49, 0x8b, 0x04, 0xb8, 0x56, 0x8d, 0x5f,
	0x5f, 0xa7, 0x02, 0xab, 0xbb, 0xd8, 0xdb, 0x72, 0xb9, 0x7f, 0x94, 0x7e, 0x33, 0x38, 0xd8, 0x83,
	0x48, 0x9c, 0x2f, 0x7f, 0x08, 0xf2, 0x71, 0x80, 0xbe, 0x00, 0xb2, 0xa2, 0x75, 0x45, 0x59, 0x42,
	0x62, 0xa9, 0x9f, 0x07, 0x53, 0x62, 0xa4, 0xaa, 0xc7, 0x0a, 0x92, 0x9b, 0xeb, 0x99, 0x6b, 0x1a,
	0xfc, 0x5a, 0x03, 0x20, 0xc5, 0xe6, 0xe3, 0x34, 0x9b, 0x95, 0x84, 0xcd, 0xff, 0x4e, 0xa3, 0x05,
	0xf4, 0x53, 0xed, 0x2c, 0xd0, 0xef, 0x82, 0x82, 0xcd, 0xac, 0xc0, 0xec, 0xd0, 0x80, 0x2b, 0x4e,
	0xe5, 0x84, 0xd3, 0xa9, 0xf8, 0x7a, 0x49, 0xd5, 0xa8, 0xea, 0xed, 0xc9, 0x51, 0x88, 0xf2, 0x62,
	0xbd, 0x23, 0x96, 0xf7, 0x41, 0x2e, 0x52, 0x52, 0xa0, 0xdf, 0x51, 0x57, 0x3e, 0x02, 0x3f, 0x97,
	0xc0, 0x47, 0x51, 0xf5, 0xb2, 0x82, 0x4c, 0xcb, 0x20, 0x06, 0x95, 0x32, 0x88, 0x60, 0xeb, 0x77,
	0x9f, 0x1e, 0x57, 0xb4, 0x67, 0xc7, 0x15, 0xed, 0xf7, 0xe3, 0x8a, 0xf6, 0xcd, 0x49, 0x65, 0xe2,
	0xd9, 0x49, 0x65, 0xe2, 0x97, 0x93, 0xca, 0xc4, 0xfe, 0xd5, 0x54, 0x51, 0xd0, 0x1e, 0x3b, 0x60,
	0x5d, 0xd7, 0x8e, 0x9e, 0x36, 0x62, 0xb7, 0xd1, 0xec, 0x30, 0xeb, 0xd0, 0x6a, 0x63, 0xea, 0xd6,
	0x7a, 0xf1, 0xcb, 0x5b, 0x56, 0x4a, 0x33, 0x17, 0x3d, 0xa7, 0xdf, 0xff, 0x27, 0x00, 0x00, 0xff,
	0xff, 0xd8, 0x25, 0x19, 0xeb, 0x99, 0x0b, 0x00, 0x00,
}

func (m *UpdateProjectStatusDoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProjectStatusDoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProjectStatusDoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthFundingTxnId) > 0 {
		i -= len(m.EthFundingTxnId)
		copy(dAtA[i:], m.EthFundingTxnId)
		i = encodeVarintProject(dAtA, i, uint64(len(m.EthFundingTxnId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintProject(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateAgentDoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAgentDoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAgentDoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintProject(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AgentDid) > 0 {
		i -= len(m.AgentDid)
		copy(dAtA[i:], m.AgentDid)
		i = encodeVarintProject(dAtA, i, uint64(len(m.AgentDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAgentDoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAgentDoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAgentDoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintProject(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintProject(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintProject(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateClaimDoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClaimDoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateClaimDoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimTemplateId) > 0 {
		i -= len(m.ClaimTemplateId)
		copy(dAtA[i:], m.ClaimTemplateId)
		i = encodeVarintProject(dAtA, i, uint64(len(m.ClaimTemplateId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClaimId) > 0 {
		i -= len(m.ClaimId)
		copy(dAtA[i:], m.ClaimId)
		i = encodeVarintProject(dAtA, i, uint64(len(m.ClaimId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateEvaluationDoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateEvaluationDoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateEvaluationDoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintProject(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClaimId) > 0 {
		i -= len(m.ClaimId)
		copy(dAtA[i:], m.ClaimId)
		i = encodeVarintProject(dAtA, i, uint64(len(m.ClaimId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawFundsDoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawFundsDoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawFundsDoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRefund {
		i--
		if m.IsRefund {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProject(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.RecipientDid) > 0 {
		i -= len(m.RecipientDid)
		copy(dAtA[i:], m.RecipientDid)
		i = encodeVarintProject(dAtA, i, uint64(len(m.RecipientDid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectDid) > 0 {
		i -= len(m.ProjectDid)
		copy(dAtA[i:], m.ProjectDid)
		i = encodeVarintProject(dAtA, i, uint64(len(m.ProjectDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProjectDoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectDoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProjectDoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintProject(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintProject(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintProject(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SenderDid) > 0 {
		i -= len(m.SenderDid)
		copy(dAtA[i:], m.SenderDid)
		i = encodeVarintProject(dAtA, i, uint64(len(m.SenderDid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProjectDid) > 0 {
		i -= len(m.ProjectDid)
		copy(dAtA[i:], m.ProjectDid)
		i = encodeVarintProject(dAtA, i, uint64(len(m.ProjectDid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintProject(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawalInfoDoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawalInfoDoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawalInfoDoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProject(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.RecipientDid) > 0 {
		i -= len(m.RecipientDid)
		copy(dAtA[i:], m.RecipientDid)
		i = encodeVarintProject(dAtA, i, uint64(len(m.RecipientDid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectDid) > 0 {
		i -= len(m.ProjectDid)
		copy(dAtA[i:], m.ProjectDid)
		i = encodeVarintProject(dAtA, i, uint64(len(m.ProjectDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.NodeFeePercentage.Size()
		i -= size
		if _, err := m.NodeFeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProject(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.OracleFeePercentage.Size()
		i -= size
		if _, err := m.OracleFeePercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProject(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ProjectMinimumInitialFunding) > 0 {
		for iNdEx := len(m.ProjectMinimumInitialFunding) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProjectMinimumInitialFunding[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.IxoDid) > 0 {
		i -= len(m.IxoDid)
		copy(dAtA[i:], m.IxoDid)
		i = encodeVarintProject(dAtA, i, uint64(len(m.IxoDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Claim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Claim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Claim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintProject(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClaimerDid) > 0 {
		i -= len(m.ClaimerDid)
		copy(dAtA[i:], m.ClaimerDid)
		i = encodeVarintProject(dAtA, i, uint64(len(m.ClaimerDid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TemplateId) > 0 {
		i -= len(m.TemplateId)
		copy(dAtA[i:], m.TemplateId)
		i = encodeVarintProject(dAtA, i, uint64(len(m.TemplateId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintProject(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisAccountMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisAccountMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisAccountMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k := range m.Map {
			v := m.Map[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintProject(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintProject(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintProject(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k := range m.Map {
			v := m.Map[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintProject(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintProject(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintProject(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawalInfoDocs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawalInfoDocs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawalInfoDocs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DocsList) > 0 {
		for iNdEx := len(m.DocsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DocsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Claims) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Claims) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Claims) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimsList) > 0 {
		for iNdEx := len(m.ClaimsList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimsList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProject(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintProject(dAtA []byte, offset int, v uint64) int {
	offset -= sovProject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateProjectStatusDoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.EthFundingTxnId)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	return n
}

func (m *CreateAgentDoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AgentDid)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	return n
}

func (m *UpdateAgentDoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	return n
}

func (m *CreateClaimDoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClaimId)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.ClaimTemplateId)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	return n
}

func (m *CreateEvaluationDoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClaimId)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	return n
}

func (m *WithdrawFundsDoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectDid)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.RecipientDid)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovProject(uint64(l))
	if m.IsRefund {
		n += 2
	}
	return n
}

func (m *ProjectDoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.ProjectDid)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.SenderDid)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	return n
}

func (m *WithdrawalInfoDoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectDid)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.RecipientDid)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovProject(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IxoDid)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	if len(m.ProjectMinimumInitialFunding) > 0 {
		for _, e := range m.ProjectMinimumInitialFunding {
			l = e.Size()
			n += 1 + l + sovProject(uint64(l))
		}
	}
	l = m.OracleFeePercentage.Size()
	n += 1 + l + sovProject(uint64(l))
	l = m.NodeFeePercentage.Size()
	n += 1 + l + sovProject(uint64(l))
	return n
}

func (m *Claim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.TemplateId)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.ClaimerDid)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovProject(uint64(l))
	}
	return n
}

func (m *GenesisAccountMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovProject(uint64(len(k))) + 1 + len(v) + sovProject(uint64(len(v)))
			n += mapEntrySize + 1 + sovProject(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AccountMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovProject(uint64(len(k))) + 1 + len(v) + sovProject(uint64(len(v)))
			n += mapEntrySize + 1 + sovProject(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *WithdrawalInfoDocs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DocsList) > 0 {
		for _, e := range m.DocsList {
			l = e.Size()
			n += 1 + l + sovProject(uint64(l))
		}
	}
	return n
}

func (m *Claims) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClaimsList) > 0 {
		for _, e := range m.ClaimsList {
			l = e.Size()
			n += 1 + l + sovProject(uint64(l))
		}
	}
	return n
}

func sovProject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProject(x uint64) (n int) {
	return sovProject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateProjectStatusDoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProjectStatusDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProjectStatusDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthFundingTxnId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthFundingTxnId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAgentDoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAgentDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAgentDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAgentDoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAgentDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAgentDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClaimDoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClaimDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClaimDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimTemplateId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimTemplateId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEvaluationDoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEvaluationDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEvaluationDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawFundsDoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawFundsDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawFundsDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRefund", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRefund = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectDoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawalInfoDoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawalInfoDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawalInfoDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IxoDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IxoDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectMinimumInitialFunding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectMinimumInitialFunding = append(m.ProjectMinimumInitialFunding, types.Coin{})
			if err := m.ProjectMinimumInitialFunding[len(m.ProjectMinimumInitialFunding)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OracleFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeFeePercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Claim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisAccountMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisAccountMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisAccountMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProject
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProject
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProject
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProject
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProject
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthProject
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthProject
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProject(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthProject
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Map[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProject
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProject
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProject
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProject
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProject
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthProject
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthProject
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProject(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthProject
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Map[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawalInfoDocs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawalInfoDocs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawalInfoDocs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocsList = append(m.DocsList, WithdrawalInfoDoc{})
			if err := m.DocsList[len(m.DocsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Claims) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claims: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claims: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimsList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimsList = append(m.ClaimsList, Claim{})
			if err := m.ClaimsList[len(m.ClaimsList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProject = fmt.Errorf("proto: unexpected end of group")
)
