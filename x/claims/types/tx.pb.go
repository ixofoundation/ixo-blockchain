// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ixo/claims/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	types1 "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	github_com_ixofoundation_ixo_blockchain_v5_x_iid_types "github.com/ixofoundation/ixo-blockchain/v5/x/iid/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateCollection struct {
	// entity is the DID of the entity for which the claims are being created
	Entity string `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	// signer address
	Signer string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	// protocol is the DID of the claim protocol
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// startDate is the date after which claims may be submitted
	StartDate *time.Time `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3,stdtime" json:"start_date,omitempty"`
	// endDate is the date after which no more claims may be submitted (no endDate
	// is allowed)
	EndDate *time.Time `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3,stdtime" json:"end_date,omitempty"`
	// quota is the maximum number of claims that may be submitted, 0 is unlimited
	Quota uint64 `protobuf:"varint,6,opt,name=quota,proto3" json:"quota,omitempty"`
	// state is the current state of this Collection (open, paused, closed)
	State CollectionState `protobuf:"varint,7,opt,name=state,proto3,enum=ixo.claims.v1beta1.CollectionState" json:"state,omitempty"`
	// payments is the amount paid for claim submission, evaluation, approval, or
	// rejection
	Payments *Payments `protobuf:"bytes,8,opt,name=payments,proto3" json:"payments,omitempty"`
	// intents is the option for intents for this collection (allow, deny,
	// required)
	Intents CollectionIntentOptions `protobuf:"varint,9,opt,name=intents,proto3,enum=ixo.claims.v1beta1.CollectionIntentOptions" json:"intents,omitempty"`
}

func (m *MsgCreateCollection) Reset()         { *m = MsgCreateCollection{} }
func (m *MsgCreateCollection) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCollection) ProtoMessage()    {}
func (*MsgCreateCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{0}
}
func (m *MsgCreateCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCollection.Merge(m, src)
}
func (m *MsgCreateCollection) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCollection.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCollection proto.InternalMessageInfo

func (m *MsgCreateCollection) GetEntity() string {
	if m != nil {
		return m.Entity
	}
	return ""
}

func (m *MsgCreateCollection) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgCreateCollection) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *MsgCreateCollection) GetStartDate() *time.Time {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *MsgCreateCollection) GetEndDate() *time.Time {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *MsgCreateCollection) GetQuota() uint64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *MsgCreateCollection) GetState() CollectionState {
	if m != nil {
		return m.State
	}
	return CollectionState_open
}

func (m *MsgCreateCollection) GetPayments() *Payments {
	if m != nil {
		return m.Payments
	}
	return nil
}

func (m *MsgCreateCollection) GetIntents() CollectionIntentOptions {
	if m != nil {
		return m.Intents
	}
	return CollectionIntentOptions_allow
}

type MsgCreateCollectionResponse struct {
}

func (m *MsgCreateCollectionResponse) Reset()         { *m = MsgCreateCollectionResponse{} }
func (m *MsgCreateCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCollectionResponse) ProtoMessage()    {}
func (*MsgCreateCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{1}
}
func (m *MsgCreateCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCollectionResponse.Merge(m, src)
}
func (m *MsgCreateCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCollectionResponse proto.InternalMessageInfo

type MsgSubmitClaim struct {
	// collection_id indicates to which Collection this claim belongs
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// claimID is the unique identifier of the claim in the cid hash format
	ClaimId string `protobuf:"bytes,2,opt,name=claim_id,json=claimId,proto3" json:"claim_id,omitempty"`
	// agent is the DID of the agent submitting the claim
	AgentDid     github_com_ixofoundation_ixo_blockchain_v5_x_iid_types.DIDFragment `protobuf:"bytes,3,opt,name=agent_did,json=agentDid,proto3,casttype=github.com/ixofoundation/ixo-blockchain/v5/x/iid/types.DIDFragment" json:"agent_did,omitempty"`
	AgentAddress string                                                             `protobuf:"bytes,4,opt,name=agent_address,json=agentAddress,proto3" json:"agent_address,omitempty"`
	// admin address used to sign this message, validated against Collection Admin
	AdminAddress string `protobuf:"bytes,5,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// use_intent is the option for using intent for this claim if it exists and
	// is active. NOTE: if use_intent is true then amount and cw20 amount are
	// ignored and overridden with intent amounts. NOTE: if use_intent is true and
	// there is no active intent then will error
	UseIntent bool `protobuf:"varint,6,opt,name=use_intent,json=useIntent,proto3" json:"use_intent,omitempty"`
	// custom amount specified by service agent for claim approval
	// NOTE: if both amount and cw20_payment are empty then collection default is
	// used
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	// custom cw20 payments specified by service agent for claim approval
	// NOTE: if both amount and cw20 amount are empty then collection default is
	// used
	Cw20Payment []*CW20Payment `protobuf:"bytes,8,rep,name=cw20_payment,json=cw20Payment,proto3" json:"cw20_payment,omitempty"`
}

func (m *MsgSubmitClaim) Reset()         { *m = MsgSubmitClaim{} }
func (m *MsgSubmitClaim) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitClaim) ProtoMessage()    {}
func (*MsgSubmitClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{2}
}
func (m *MsgSubmitClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitClaim.Merge(m, src)
}
func (m *MsgSubmitClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitClaim proto.InternalMessageInfo

func (m *MsgSubmitClaim) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgSubmitClaim) GetClaimId() string {
	if m != nil {
		return m.ClaimId
	}
	return ""
}

func (m *MsgSubmitClaim) GetAgentDid() github_com_ixofoundation_ixo_blockchain_v5_x_iid_types.DIDFragment {
	if m != nil {
		return m.AgentDid
	}
	return ""
}

func (m *MsgSubmitClaim) GetAgentAddress() string {
	if m != nil {
		return m.AgentAddress
	}
	return ""
}

func (m *MsgSubmitClaim) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgSubmitClaim) GetUseIntent() bool {
	if m != nil {
		return m.UseIntent
	}
	return false
}

func (m *MsgSubmitClaim) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgSubmitClaim) GetCw20Payment() []*CW20Payment {
	if m != nil {
		return m.Cw20Payment
	}
	return nil
}

type MsgSubmitClaimResponse struct {
}

func (m *MsgSubmitClaimResponse) Reset()         { *m = MsgSubmitClaimResponse{} }
func (m *MsgSubmitClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitClaimResponse) ProtoMessage()    {}
func (*MsgSubmitClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{3}
}
func (m *MsgSubmitClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitClaimResponse.Merge(m, src)
}
func (m *MsgSubmitClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitClaimResponse proto.InternalMessageInfo

type MsgEvaluateClaim struct {
	// claimID is the unique identifier of the claim to make evaluation against
	ClaimId string `protobuf:"bytes,1,opt,name=claim_id,json=claimId,proto3" json:"claim_id,omitempty"`
	// collection_id indicates to which Collection this claim belongs
	CollectionId string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// oracle is the DID of the Oracle entity that evaluates the claim
	Oracle string `protobuf:"bytes,3,opt,name=oracle,proto3" json:"oracle,omitempty"`
	// agent is the DID of the agent that submits the evaluation
	AgentDid     github_com_ixofoundation_ixo_blockchain_v5_x_iid_types.DIDFragment `protobuf:"bytes,4,opt,name=agent_did,json=agentDid,proto3,casttype=github.com/ixofoundation/ixo-blockchain/v5/x/iid/types.DIDFragment" json:"agent_did,omitempty"`
	AgentAddress string                                                             `protobuf:"bytes,5,opt,name=agent_address,json=agentAddress,proto3" json:"agent_address,omitempty"`
	// admin address used to sign this message, validated against Collection Admin
	AdminAddress string `protobuf:"bytes,6,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// status is the evaluation status expressed as an integer (2=approved,
	// 3=rejected, ...)
	Status EvaluationStatus `protobuf:"varint,7,opt,name=status,proto3,enum=ixo.claims.v1beta1.EvaluationStatus" json:"status,omitempty"`
	// reason is the code expressed as an integer, for why the evaluation result
	// was given (codes defined by evaluator)
	Reason uint32 `protobuf:"varint,8,opt,name=reason,proto3" json:"reason,omitempty"`
	// verificationProof is the cid of the evaluation Verifiable Credential
	VerificationProof string `protobuf:"bytes,9,opt,name=verification_proof,json=verificationProof,proto3" json:"verification_proof,omitempty"`
	// custom amount specified by evaluator for claim approval
	// NOTE: if claim is using intent, then amount and cw20 amount are ignored and
	// overridden with intent amounts NOTE: if both amount and cw20 amount are
	// empty then collection default is used
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,10,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	// custom cw20 payments specified by evaluator for claim approval
	// NOTE: if claim is using intent, then amount and cw20 amount are ignored and
	// overridden with intent amounts NOTE: if both amount and cw20 amount are
	// empty then collection default is used
	Cw20Payment []*CW20Payment `protobuf:"bytes,11,rep,name=cw20_payment,json=cw20Payment,proto3" json:"cw20_payment,omitempty"`
}

func (m *MsgEvaluateClaim) Reset()         { *m = MsgEvaluateClaim{} }
func (m *MsgEvaluateClaim) String() string { return proto.CompactTextString(m) }
func (*MsgEvaluateClaim) ProtoMessage()    {}
func (*MsgEvaluateClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{4}
}
func (m *MsgEvaluateClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEvaluateClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEvaluateClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEvaluateClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEvaluateClaim.Merge(m, src)
}
func (m *MsgEvaluateClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgEvaluateClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEvaluateClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEvaluateClaim proto.InternalMessageInfo

func (m *MsgEvaluateClaim) GetClaimId() string {
	if m != nil {
		return m.ClaimId
	}
	return ""
}

func (m *MsgEvaluateClaim) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgEvaluateClaim) GetOracle() string {
	if m != nil {
		return m.Oracle
	}
	return ""
}

func (m *MsgEvaluateClaim) GetAgentDid() github_com_ixofoundation_ixo_blockchain_v5_x_iid_types.DIDFragment {
	if m != nil {
		return m.AgentDid
	}
	return ""
}

func (m *MsgEvaluateClaim) GetAgentAddress() string {
	if m != nil {
		return m.AgentAddress
	}
	return ""
}

func (m *MsgEvaluateClaim) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgEvaluateClaim) GetStatus() EvaluationStatus {
	if m != nil {
		return m.Status
	}
	return EvaluationStatus_pending
}

func (m *MsgEvaluateClaim) GetReason() uint32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

func (m *MsgEvaluateClaim) GetVerificationProof() string {
	if m != nil {
		return m.VerificationProof
	}
	return ""
}

func (m *MsgEvaluateClaim) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgEvaluateClaim) GetCw20Payment() []*CW20Payment {
	if m != nil {
		return m.Cw20Payment
	}
	return nil
}

type MsgEvaluateClaimResponse struct {
}

func (m *MsgEvaluateClaimResponse) Reset()         { *m = MsgEvaluateClaimResponse{} }
func (m *MsgEvaluateClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEvaluateClaimResponse) ProtoMessage()    {}
func (*MsgEvaluateClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{5}
}
func (m *MsgEvaluateClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEvaluateClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEvaluateClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEvaluateClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEvaluateClaimResponse.Merge(m, src)
}
func (m *MsgEvaluateClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEvaluateClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEvaluateClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEvaluateClaimResponse proto.InternalMessageInfo

// Agent laying dispute must be admin for Collection, or controller on
// Collection entity, or have authz cap, aka is agent
type MsgDisputeClaim struct {
	// subject_id for which this dispute is against, for now can only lay disputes
	// against claims
	SubjectId string `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	// agent is the DID of the agent disputing the claim, agent details won't be
	// saved in kvStore
	AgentDid     github_com_ixofoundation_ixo_blockchain_v5_x_iid_types.DIDFragment `protobuf:"bytes,2,opt,name=agent_did,json=agentDid,proto3,casttype=github.com/ixofoundation/ixo-blockchain/v5/x/iid/types.DIDFragment" json:"agent_did,omitempty"`
	AgentAddress string                                                             `protobuf:"bytes,3,opt,name=agent_address,json=agentAddress,proto3" json:"agent_address,omitempty"`
	// type is expressed as an integer, interpreted by the client
	DisputeType int32        `protobuf:"varint,4,opt,name=dispute_type,json=disputeType,proto3" json:"dispute_type,omitempty"`
	Data        *DisputeData `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgDisputeClaim) Reset()         { *m = MsgDisputeClaim{} }
func (m *MsgDisputeClaim) String() string { return proto.CompactTextString(m) }
func (*MsgDisputeClaim) ProtoMessage()    {}
func (*MsgDisputeClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{6}
}
func (m *MsgDisputeClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisputeClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisputeClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisputeClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisputeClaim.Merge(m, src)
}
func (m *MsgDisputeClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisputeClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisputeClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisputeClaim proto.InternalMessageInfo

func (m *MsgDisputeClaim) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

func (m *MsgDisputeClaim) GetAgentDid() github_com_ixofoundation_ixo_blockchain_v5_x_iid_types.DIDFragment {
	if m != nil {
		return m.AgentDid
	}
	return ""
}

func (m *MsgDisputeClaim) GetAgentAddress() string {
	if m != nil {
		return m.AgentAddress
	}
	return ""
}

func (m *MsgDisputeClaim) GetDisputeType() int32 {
	if m != nil {
		return m.DisputeType
	}
	return 0
}

func (m *MsgDisputeClaim) GetData() *DisputeData {
	if m != nil {
		return m.Data
	}
	return nil
}

type MsgDisputeClaimResponse struct {
}

func (m *MsgDisputeClaimResponse) Reset()         { *m = MsgDisputeClaimResponse{} }
func (m *MsgDisputeClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDisputeClaimResponse) ProtoMessage()    {}
func (*MsgDisputeClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{7}
}
func (m *MsgDisputeClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisputeClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisputeClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisputeClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisputeClaimResponse.Merge(m, src)
}
func (m *MsgDisputeClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisputeClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisputeClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisputeClaimResponse proto.InternalMessageInfo

type MsgWithdrawPayment struct {
	// claim_id the withdrawal is for
	ClaimId string `protobuf:"bytes,1,opt,name=claim_id,json=claimId,proto3" json:"claim_id,omitempty"`
	// Inputs to the multi send tx to run to withdraw payment
	Inputs []types1.Input `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs"`
	// Outputs for the multi send tx to run to withdraw payment
	Outputs []types1.Output `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs"`
	// payment type to keep track what payment is for and mark claim payment
	// accordingly
	PaymentType PaymentType `protobuf:"varint,4,opt,name=payment_type,json=paymentType,proto3,enum=ixo.claims.v1beta1.PaymentType" json:"payment_type,omitempty"`
	// if empty(nil) then no contract payment
	Contract_1155Payment *Contract1155Payment `protobuf:"bytes,5,opt,name=contract_1155_payment,json=contract1155Payment,proto3" json:"contract_1155_payment,omitempty"`
	// for contract payment
	ToAddress string `protobuf:"bytes,6,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	// for contract payment
	FromAddress string `protobuf:"bytes,7,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	// date that grantee can execute authorization, calculated from created date
	// plus the timeout on Collection payments
	ReleaseDate *time.Time `protobuf:"bytes,8,opt,name=release_date,json=releaseDate,proto3,stdtime" json:"release_date,omitempty"`
	// admin address used to sign this message, validated against Collection Admin
	AdminAddress string `protobuf:"bytes,9,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// cw20 payments, can be empty or multiple
	Cw20Payment []*CW20Payment `protobuf:"bytes,10,rep,name=cw20_payment,json=cw20Payment,proto3" json:"cw20_payment,omitempty"`
}

func (m *MsgWithdrawPayment) Reset()         { *m = MsgWithdrawPayment{} }
func (m *MsgWithdrawPayment) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawPayment) ProtoMessage()    {}
func (*MsgWithdrawPayment) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{8}
}
func (m *MsgWithdrawPayment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawPayment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawPayment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawPayment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawPayment.Merge(m, src)
}
func (m *MsgWithdrawPayment) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawPayment) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawPayment.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawPayment proto.InternalMessageInfo

func (m *MsgWithdrawPayment) GetClaimId() string {
	if m != nil {
		return m.ClaimId
	}
	return ""
}

func (m *MsgWithdrawPayment) GetInputs() []types1.Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *MsgWithdrawPayment) GetOutputs() []types1.Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *MsgWithdrawPayment) GetPaymentType() PaymentType {
	if m != nil {
		return m.PaymentType
	}
	return PaymentType_submission
}

func (m *MsgWithdrawPayment) GetContract_1155Payment() *Contract1155Payment {
	if m != nil {
		return m.Contract_1155Payment
	}
	return nil
}

func (m *MsgWithdrawPayment) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *MsgWithdrawPayment) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgWithdrawPayment) GetReleaseDate() *time.Time {
	if m != nil {
		return m.ReleaseDate
	}
	return nil
}

func (m *MsgWithdrawPayment) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgWithdrawPayment) GetCw20Payment() []*CW20Payment {
	if m != nil {
		return m.Cw20Payment
	}
	return nil
}

type MsgWithdrawPaymentResponse struct {
}

func (m *MsgWithdrawPaymentResponse) Reset()         { *m = MsgWithdrawPaymentResponse{} }
func (m *MsgWithdrawPaymentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawPaymentResponse) ProtoMessage()    {}
func (*MsgWithdrawPaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{9}
}
func (m *MsgWithdrawPaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawPaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawPaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawPaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawPaymentResponse.Merge(m, src)
}
func (m *MsgWithdrawPaymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawPaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawPaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawPaymentResponse proto.InternalMessageInfo

type MsgUpdateCollectionState struct {
	// collection_id indicates which Collection to update
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// state is the state of this Collection (open, paused, closed) you want to
	// update to
	State CollectionState `protobuf:"varint,2,opt,name=state,proto3,enum=ixo.claims.v1beta1.CollectionState" json:"state,omitempty"`
	// admin address used to sign this message, validated against Collection Admin
	AdminAddress string `protobuf:"bytes,3,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
}

func (m *MsgUpdateCollectionState) Reset()         { *m = MsgUpdateCollectionState{} }
func (m *MsgUpdateCollectionState) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCollectionState) ProtoMessage()    {}
func (*MsgUpdateCollectionState) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{10}
}
func (m *MsgUpdateCollectionState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCollectionState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCollectionState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCollectionState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCollectionState.Merge(m, src)
}
func (m *MsgUpdateCollectionState) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCollectionState) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCollectionState.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCollectionState proto.InternalMessageInfo

func (m *MsgUpdateCollectionState) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgUpdateCollectionState) GetState() CollectionState {
	if m != nil {
		return m.State
	}
	return CollectionState_open
}

func (m *MsgUpdateCollectionState) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

type MsgUpdateCollectionStateResponse struct {
}

func (m *MsgUpdateCollectionStateResponse) Reset()         { *m = MsgUpdateCollectionStateResponse{} }
func (m *MsgUpdateCollectionStateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCollectionStateResponse) ProtoMessage()    {}
func (*MsgUpdateCollectionStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{11}
}
func (m *MsgUpdateCollectionStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCollectionStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCollectionStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCollectionStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCollectionStateResponse.Merge(m, src)
}
func (m *MsgUpdateCollectionStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCollectionStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCollectionStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCollectionStateResponse proto.InternalMessageInfo

type MsgUpdateCollectionDates struct {
	// collection_id indicates which Collection to update
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// startDate is the date after which claims may be submitted
	StartDate *time.Time `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3,stdtime" json:"start_date,omitempty"`
	// endDate is the date after which no more claims may be submitted (no endDate
	// is allowed)
	EndDate *time.Time `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3,stdtime" json:"end_date,omitempty"`
	// admin address used to sign this message, validated against Collection Admin
	AdminAddress string `protobuf:"bytes,4,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
}

func (m *MsgUpdateCollectionDates) Reset()         { *m = MsgUpdateCollectionDates{} }
func (m *MsgUpdateCollectionDates) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCollectionDates) ProtoMessage()    {}
func (*MsgUpdateCollectionDates) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{12}
}
func (m *MsgUpdateCollectionDates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCollectionDates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCollectionDates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCollectionDates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCollectionDates.Merge(m, src)
}
func (m *MsgUpdateCollectionDates) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCollectionDates) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCollectionDates.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCollectionDates proto.InternalMessageInfo

func (m *MsgUpdateCollectionDates) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgUpdateCollectionDates) GetStartDate() *time.Time {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *MsgUpdateCollectionDates) GetEndDate() *time.Time {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *MsgUpdateCollectionDates) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

type MsgUpdateCollectionDatesResponse struct {
}

func (m *MsgUpdateCollectionDatesResponse) Reset()         { *m = MsgUpdateCollectionDatesResponse{} }
func (m *MsgUpdateCollectionDatesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCollectionDatesResponse) ProtoMessage()    {}
func (*MsgUpdateCollectionDatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{13}
}
func (m *MsgUpdateCollectionDatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCollectionDatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCollectionDatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCollectionDatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCollectionDatesResponse.Merge(m, src)
}
func (m *MsgUpdateCollectionDatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCollectionDatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCollectionDatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCollectionDatesResponse proto.InternalMessageInfo

type MsgUpdateCollectionPayments struct {
	// collection_id indicates which Collection to update
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// payments is the amount paid for claim submission, evaluation, approval, or
	// rejection
	Payments *Payments `protobuf:"bytes,2,opt,name=payments,proto3" json:"payments,omitempty"`
	// admin address used to sign this message, validated against Collection Admin
	AdminAddress string `protobuf:"bytes,3,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
}

func (m *MsgUpdateCollectionPayments) Reset()         { *m = MsgUpdateCollectionPayments{} }
func (m *MsgUpdateCollectionPayments) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCollectionPayments) ProtoMessage()    {}
func (*MsgUpdateCollectionPayments) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{14}
}
func (m *MsgUpdateCollectionPayments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCollectionPayments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCollectionPayments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCollectionPayments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCollectionPayments.Merge(m, src)
}
func (m *MsgUpdateCollectionPayments) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCollectionPayments) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCollectionPayments.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCollectionPayments proto.InternalMessageInfo

func (m *MsgUpdateCollectionPayments) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgUpdateCollectionPayments) GetPayments() *Payments {
	if m != nil {
		return m.Payments
	}
	return nil
}

func (m *MsgUpdateCollectionPayments) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

type MsgUpdateCollectionPaymentsResponse struct {
}

func (m *MsgUpdateCollectionPaymentsResponse) Reset()         { *m = MsgUpdateCollectionPaymentsResponse{} }
func (m *MsgUpdateCollectionPaymentsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCollectionPaymentsResponse) ProtoMessage()    {}
func (*MsgUpdateCollectionPaymentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{15}
}
func (m *MsgUpdateCollectionPaymentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCollectionPaymentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCollectionPaymentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCollectionPaymentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCollectionPaymentsResponse.Merge(m, src)
}
func (m *MsgUpdateCollectionPaymentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCollectionPaymentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCollectionPaymentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCollectionPaymentsResponse proto.InternalMessageInfo

type MsgUpdateCollectionIntents struct {
	// collection_id indicates which Collection to update
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// intents is the option for intents for this collection (allow, deny,
	// required)
	Intents CollectionIntentOptions `protobuf:"varint,2,opt,name=intents,proto3,enum=ixo.claims.v1beta1.CollectionIntentOptions" json:"intents,omitempty"`
	// admin address used to sign this message, validated against Collection Admin
	AdminAddress string `protobuf:"bytes,3,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
}

func (m *MsgUpdateCollectionIntents) Reset()         { *m = MsgUpdateCollectionIntents{} }
func (m *MsgUpdateCollectionIntents) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCollectionIntents) ProtoMessage()    {}
func (*MsgUpdateCollectionIntents) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{16}
}
func (m *MsgUpdateCollectionIntents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCollectionIntents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCollectionIntents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCollectionIntents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCollectionIntents.Merge(m, src)
}
func (m *MsgUpdateCollectionIntents) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCollectionIntents) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCollectionIntents.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCollectionIntents proto.InternalMessageInfo

func (m *MsgUpdateCollectionIntents) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgUpdateCollectionIntents) GetIntents() CollectionIntentOptions {
	if m != nil {
		return m.Intents
	}
	return CollectionIntentOptions_allow
}

func (m *MsgUpdateCollectionIntents) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

type MsgUpdateCollectionIntentsResponse struct {
}

func (m *MsgUpdateCollectionIntentsResponse) Reset()         { *m = MsgUpdateCollectionIntentsResponse{} }
func (m *MsgUpdateCollectionIntentsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCollectionIntentsResponse) ProtoMessage()    {}
func (*MsgUpdateCollectionIntentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{17}
}
func (m *MsgUpdateCollectionIntentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCollectionIntentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCollectionIntentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCollectionIntentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCollectionIntentsResponse.Merge(m, src)
}
func (m *MsgUpdateCollectionIntentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCollectionIntentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCollectionIntentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCollectionIntentsResponse proto.InternalMessageInfo

type MsgClaimIntent struct {
	// The service agent's DID (Decentralized Identifier).
	AgentDid github_com_ixofoundation_ixo_blockchain_v5_x_iid_types.DIDFragment `protobuf:"bytes,1,opt,name=agent_did,json=agentDid,proto3,casttype=github.com/ixofoundation/ixo-blockchain/v5/x/iid/types.DIDFragment" json:"agent_did,omitempty"`
	// The service agent's address (who submits this message).
	AgentAddress string `protobuf:"bytes,2,opt,name=agent_address,json=agentAddress,proto3" json:"agent_address,omitempty"`
	// The id of the collection this intent is linked to.
	CollectionId string `protobuf:"bytes,3,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// The desired claim amount, if any.
	// NOTE: if both amount and cw20 amount are empty then default by Collection
	// is used (APPROVAL payment).
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	// The custom CW20 payment, if any.
	// NOTE: if both amount and cw20 amount are empty then default by Collection
	// is used (APPROVAL payment).
	Cw20Payment []*CW20Payment `protobuf:"bytes,5,rep,name=cw20_payment,json=cw20Payment,proto3" json:"cw20_payment,omitempty"`
}

func (m *MsgClaimIntent) Reset()         { *m = MsgClaimIntent{} }
func (m *MsgClaimIntent) String() string { return proto.CompactTextString(m) }
func (*MsgClaimIntent) ProtoMessage()    {}
func (*MsgClaimIntent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{18}
}
func (m *MsgClaimIntent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimIntent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimIntent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimIntent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimIntent.Merge(m, src)
}
func (m *MsgClaimIntent) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimIntent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimIntent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimIntent proto.InternalMessageInfo

func (m *MsgClaimIntent) GetAgentDid() github_com_ixofoundation_ixo_blockchain_v5_x_iid_types.DIDFragment {
	if m != nil {
		return m.AgentDid
	}
	return ""
}

func (m *MsgClaimIntent) GetAgentAddress() string {
	if m != nil {
		return m.AgentAddress
	}
	return ""
}

func (m *MsgClaimIntent) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgClaimIntent) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgClaimIntent) GetCw20Payment() []*CW20Payment {
	if m != nil {
		return m.Cw20Payment
	}
	return nil
}

// MsgClaimIntentResponse defines the response after submitting an intent.
type MsgClaimIntentResponse struct {
	// Resulting intent id.
	IntentId string `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	// Timeout period for the intent. If the claim is not submitted by this time,
	// the intent expires.
	ExpireAt *time.Time `protobuf:"bytes,2,opt,name=expire_at,json=expireAt,proto3,stdtime" json:"expire_at,omitempty"`
}

func (m *MsgClaimIntentResponse) Reset()         { *m = MsgClaimIntentResponse{} }
func (m *MsgClaimIntentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimIntentResponse) ProtoMessage()    {}
func (*MsgClaimIntentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{19}
}
func (m *MsgClaimIntentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimIntentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimIntentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimIntentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimIntentResponse.Merge(m, src)
}
func (m *MsgClaimIntentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimIntentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimIntentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimIntentResponse proto.InternalMessageInfo

func (m *MsgClaimIntentResponse) GetIntentId() string {
	if m != nil {
		return m.IntentId
	}
	return ""
}

func (m *MsgClaimIntentResponse) GetExpireAt() *time.Time {
	if m != nil {
		return m.ExpireAt
	}
	return nil
}

// MsgCreateClaimAuthorization defines a message for creating a claim
// authorization on behalf of an entity admin account (SubmitClaimAuthorization
// or EvaluateClaimAuthorization)
type MsgCreateClaimAuthorization struct {
	// Address of the creator (user with meta-authorization)
	CreatorAddress string `protobuf:"bytes,1,opt,name=creator_address,json=creatorAddress,proto3" json:"creator_address,omitempty"`
	// agent is the DID of the agent submitting the claim
	CreatorDid github_com_ixofoundation_ixo_blockchain_v5_x_iid_types.DIDFragment `protobuf:"bytes,2,opt,name=creator_did,json=creatorDid,proto3,casttype=github.com/ixofoundation/ixo-blockchain/v5/x/iid/types.DIDFragment" json:"creator_did,omitempty"`
	// Address of the grantee (who will receive the authorization)
	GranteeAddress string `protobuf:"bytes,3,opt,name=grantee_address,json=granteeAddress,proto3" json:"grantee_address,omitempty"`
	// admin address used to sign this message, validated against Collection Admin
	AdminAddress string `protobuf:"bytes,4,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// Collection ID the authorization applies to (for both submit and evaluate)
	CollectionId string `protobuf:"bytes,5,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// Type of authorization to create (submit or evaluate, can't create both in a
	// single request)
	AuthType CreateClaimAuthorizationType `protobuf:"varint,6,opt,name=auth_type,json=authType,proto3,enum=ixo.claims.v1beta1.CreateClaimAuthorizationType" json:"auth_type,omitempty"`
	// Quota for the created authorization (for both submit and evaluate)
	AgentQuota uint64 `protobuf:"varint,7,opt,name=agent_quota,json=agentQuota,proto3" json:"agent_quota,omitempty"`
	// Maximum amount that can be specified in the authorization (for both submit
	// and evaluate)
	MaxAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=max_amount,json=maxAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"max_amount"`
	// Maximum CW20 payment that can be specified in the authorization (for both
	// submit and evaluate)
	MaxCw20Payment []*CW20Payment `protobuf:"bytes,9,rep,name=max_cw20_payment,json=maxCw20Payment,proto3" json:"max_cw20_payment,omitempty"`
	// Expiration time for the authorization, be careful with this as it is the
	// expiration of the authorization itself, not the constraints, meaning if the
	// authorization expires all constraints will be removed with the
	// authorization (standard authz behavior)
	Expiration *time.Time `protobuf:"bytes,10,opt,name=expiration,proto3,stdtime" json:"expiration,omitempty"`
	// Maximum intent duration for the authorization allowed (for submit)
	IntentDurationNs time.Duration `protobuf:"bytes,11,opt,name=intent_duration_ns,json=intentDurationNs,proto3,stdduration" json:"intent_duration_ns"`
	// if null then no before_date validation done (for evaluate)
	BeforeDate *time.Time `protobuf:"bytes,12,opt,name=before_date,json=beforeDate,proto3,stdtime" json:"before_date,omitempty"`
}

func (m *MsgCreateClaimAuthorization) Reset()         { *m = MsgCreateClaimAuthorization{} }
func (m *MsgCreateClaimAuthorization) String() string { return proto.CompactTextString(m) }
func (*MsgCreateClaimAuthorization) ProtoMessage()    {}
func (*MsgCreateClaimAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{20}
}
func (m *MsgCreateClaimAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateClaimAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateClaimAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateClaimAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateClaimAuthorization.Merge(m, src)
}
func (m *MsgCreateClaimAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateClaimAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateClaimAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateClaimAuthorization proto.InternalMessageInfo

func (m *MsgCreateClaimAuthorization) GetCreatorAddress() string {
	if m != nil {
		return m.CreatorAddress
	}
	return ""
}

func (m *MsgCreateClaimAuthorization) GetCreatorDid() github_com_ixofoundation_ixo_blockchain_v5_x_iid_types.DIDFragment {
	if m != nil {
		return m.CreatorDid
	}
	return ""
}

func (m *MsgCreateClaimAuthorization) GetGranteeAddress() string {
	if m != nil {
		return m.GranteeAddress
	}
	return ""
}

func (m *MsgCreateClaimAuthorization) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *MsgCreateClaimAuthorization) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgCreateClaimAuthorization) GetAuthType() CreateClaimAuthorizationType {
	if m != nil {
		return m.AuthType
	}
	return CreateClaimAuthorizationType_ALL
}

func (m *MsgCreateClaimAuthorization) GetAgentQuota() uint64 {
	if m != nil {
		return m.AgentQuota
	}
	return 0
}

func (m *MsgCreateClaimAuthorization) GetMaxAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MaxAmount
	}
	return nil
}

func (m *MsgCreateClaimAuthorization) GetMaxCw20Payment() []*CW20Payment {
	if m != nil {
		return m.MaxCw20Payment
	}
	return nil
}

func (m *MsgCreateClaimAuthorization) GetExpiration() *time.Time {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (m *MsgCreateClaimAuthorization) GetIntentDurationNs() time.Duration {
	if m != nil {
		return m.IntentDurationNs
	}
	return 0
}

func (m *MsgCreateClaimAuthorization) GetBeforeDate() *time.Time {
	if m != nil {
		return m.BeforeDate
	}
	return nil
}

// MsgCreateClaimAuthorizationResponse defines the response for creating a claim
// authorization
type MsgCreateClaimAuthorizationResponse struct {
}

func (m *MsgCreateClaimAuthorizationResponse) Reset()         { *m = MsgCreateClaimAuthorizationResponse{} }
func (m *MsgCreateClaimAuthorizationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateClaimAuthorizationResponse) ProtoMessage()    {}
func (*MsgCreateClaimAuthorizationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0095508349b828a, []int{21}
}
func (m *MsgCreateClaimAuthorizationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateClaimAuthorizationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateClaimAuthorizationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateClaimAuthorizationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateClaimAuthorizationResponse.Merge(m, src)
}
func (m *MsgCreateClaimAuthorizationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateClaimAuthorizationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateClaimAuthorizationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateClaimAuthorizationResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateCollection)(nil), "ixo.claims.v1beta1.MsgCreateCollection")
	proto.RegisterType((*MsgCreateCollectionResponse)(nil), "ixo.claims.v1beta1.MsgCreateCollectionResponse")
	proto.RegisterType((*MsgSubmitClaim)(nil), "ixo.claims.v1beta1.MsgSubmitClaim")
	proto.RegisterType((*MsgSubmitClaimResponse)(nil), "ixo.claims.v1beta1.MsgSubmitClaimResponse")
	proto.RegisterType((*MsgEvaluateClaim)(nil), "ixo.claims.v1beta1.MsgEvaluateClaim")
	proto.RegisterType((*MsgEvaluateClaimResponse)(nil), "ixo.claims.v1beta1.MsgEvaluateClaimResponse")
	proto.RegisterType((*MsgDisputeClaim)(nil), "ixo.claims.v1beta1.MsgDisputeClaim")
	proto.RegisterType((*MsgDisputeClaimResponse)(nil), "ixo.claims.v1beta1.MsgDisputeClaimResponse")
	proto.RegisterType((*MsgWithdrawPayment)(nil), "ixo.claims.v1beta1.MsgWithdrawPayment")
	proto.RegisterType((*MsgWithdrawPaymentResponse)(nil), "ixo.claims.v1beta1.MsgWithdrawPaymentResponse")
	proto.RegisterType((*MsgUpdateCollectionState)(nil), "ixo.claims.v1beta1.MsgUpdateCollectionState")
	proto.RegisterType((*MsgUpdateCollectionStateResponse)(nil), "ixo.claims.v1beta1.MsgUpdateCollectionStateResponse")
	proto.RegisterType((*MsgUpdateCollectionDates)(nil), "ixo.claims.v1beta1.MsgUpdateCollectionDates")
	proto.RegisterType((*MsgUpdateCollectionDatesResponse)(nil), "ixo.claims.v1beta1.MsgUpdateCollectionDatesResponse")
	proto.RegisterType((*MsgUpdateCollectionPayments)(nil), "ixo.claims.v1beta1.MsgUpdateCollectionPayments")
	proto.RegisterType((*MsgUpdateCollectionPaymentsResponse)(nil), "ixo.claims.v1beta1.MsgUpdateCollectionPaymentsResponse")
	proto.RegisterType((*MsgUpdateCollectionIntents)(nil), "ixo.claims.v1beta1.MsgUpdateCollectionIntents")
	proto.RegisterType((*MsgUpdateCollectionIntentsResponse)(nil), "ixo.claims.v1beta1.MsgUpdateCollectionIntentsResponse")
	proto.RegisterType((*MsgClaimIntent)(nil), "ixo.claims.v1beta1.MsgClaimIntent")
	proto.RegisterType((*MsgClaimIntentResponse)(nil), "ixo.claims.v1beta1.MsgClaimIntentResponse")
	proto.RegisterType((*MsgCreateClaimAuthorization)(nil), "ixo.claims.v1beta1.MsgCreateClaimAuthorization")
	proto.RegisterType((*MsgCreateClaimAuthorizationResponse)(nil), "ixo.claims.v1beta1.MsgCreateClaimAuthorizationResponse")
}

func init() { proto.RegisterFile("ixo/claims/v1beta1/tx.proto", fileDescriptor_e0095508349b828a) }

var fileDescriptor_e0095508349b828a = []byte{
	// 1717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xcd, 0x6f, 0x24, 0x47,
	0x15, 0xdf, 0x9e, 0xef, 0x7e, 0xe3, 0xb5, 0x4d, 0x25, 0xd9, 0x1d, 0x8f, 0x77, 0x6d, 0x33, 0x5e,
	0x58, 0x2b, 0x61, 0x67, 0x6c, 0x87, 0x85, 0x7c, 0x80, 0xc0, 0x63, 0x27, 0x92, 0x0f, 0x26, 0x49,
	0x6f, 0x50, 0x24, 0x10, 0x1a, 0x6a, 0xba, 0xcb, 0xed, 0x8e, 0x67, 0xba, 0x86, 0xae, 0x6a, 0x67,
	0x1c, 0x4e, 0x20, 0xfe, 0x80, 0x1c, 0xf9, 0x0b, 0x38, 0x70, 0x42, 0x42, 0xb9, 0x22, 0x71, 0x0b,
	0xb7, 0x1c, 0x91, 0x90, 0x12, 0xb4, 0x7b, 0xe0, 0xc8, 0x8d, 0x03, 0xe2, 0x80, 0xea, 0xa3, 0x7b,
	0x7a, 0x66, 0xba, 0xbd, 0x6d, 0xaf, 0xe5, 0xd3, 0xba, 0xea, 0xfd, 0x5e, 0xbd, 0xaa, 0xf7, 0x7e,
	0xaf, 0xea, 0x37, 0xbd, 0xb0, 0xea, 0x8d, 0x69, 0xc7, 0x1e, 0x60, 0x6f, 0xc8, 0x3a, 0x67, 0x3b,
	0x7d, 0xc2, 0xf1, 0x4e, 0x87, 0x8f, 0xdb, 0xa3, 0x80, 0x72, 0x8a, 0x90, 0x37, 0xa6, 0x6d, 0x65,
	0x6c, 0x6b, 0x63, 0xf3, 0x65, 0x97, 0xba, 0x54, 0x9a, 0x3b, 0xe2, 0x2f, 0x85, 0x6c, 0xae, 0xbb,
	0x94, 0xba, 0x03, 0xd2, 0x91, 0xa3, 0x7e, 0x78, 0xdc, 0xe1, 0xde, 0x90, 0x30, 0x8e, 0x87, 0xa3,
	0x08, 0x90, 0x12, 0x47, 0xaf, 0xac, 0x00, 0x6b, 0x36, 0x65, 0x43, 0xca, 0x3a, 0x7d, 0xcc, 0xc8,
	0x04, 0x41, 0x3d, 0x7f, 0xce, 0xee, 0x9f, 0xc6, 0x76, 0x31, 0xd0, 0xf6, 0xbb, 0xda, 0x3e, 0x64,
	0x6e, 0xe7, 0x6c, 0x47, 0xfc, 0x13, 0x39, 0xa6, 0x44, 0xc6, 0x21, 0x3f, 0xf9, 0x34, 0xb2, 0xcf,
	0x6e, 0xdd, 0x09, 0x03, 0xcc, 0x3d, 0xaa, 0x03, 0xb7, 0xfe, 0x52, 0x84, 0x97, 0x8e, 0x98, 0xbb,
	0x1f, 0x10, 0xcc, 0xc9, 0x3e, 0x1d, 0x0c, 0x88, 0x2d, 0xac, 0xe8, 0x0e, 0x54, 0x88, 0xcf, 0x3d,
	0x7e, 0xde, 0x30, 0x36, 0x8c, 0x2d, 0xd3, 0xd2, 0x23, 0x31, 0xcf, 0x3c, 0xd7, 0x27, 0x41, 0xa3,
	0xa0, 0xe6, 0xd5, 0x08, 0x35, 0xa1, 0x26, 0x17, 0xb4, 0xe9, 0xa0, 0x51, 0x94, 0x96, 0x78, 0x8c,
	0x7e, 0x04, 0xc0, 0x38, 0x0e, 0x78, 0xcf, 0xc1, 0x9c, 0x34, 0x4a, 0x1b, 0xc6, 0x56, 0x7d, 0xb7,
	0xd9, 0x56, 0x1b, 0x6b, 0x47, 0x1b, 0x6b, 0x7f, 0x18, 0xe5, 0xb4, 0x5b, 0xfa, 0xec, 0xeb, 0x75,
	0xc3, 0x32, 0xa5, 0xcf, 0x01, 0xe6, 0x04, 0xbd, 0x0d, 0x35, 0xe2, 0x3b, 0xca, 0xbd, 0x9c, 0xd3,
	0xbd, 0x4a, 0x7c, 0x47, 0x3a, 0xbf, 0x0c, 0xe5, 0x5f, 0x85, 0x94, 0xe3, 0x46, 0x65, 0xc3, 0xd8,
	0x2a, 0x59, 0x6a, 0x80, 0xde, 0x84, 0x32, 0xe3, 0x62, 0xbd, 0xea, 0x86, 0xb1, 0xb5, 0xb8, 0xbb,
	0xd9, 0x9e, 0x27, 0x43, 0x7b, 0x92, 0x8e, 0x27, 0x02, 0x6a, 0x29, 0x0f, 0xf4, 0x06, 0xd4, 0x46,
	0xf8, 0x7c, 0x48, 0x7c, 0xce, 0x1a, 0x35, 0xb9, 0x9b, 0x7b, 0x69, 0xde, 0xef, 0x6b, 0x8c, 0x15,
	0xa3, 0xd1, 0x3b, 0x50, 0xf5, 0x7c, 0x2e, 0x1d, 0x4d, 0x19, 0xf6, 0xb5, 0x8b, 0xc3, 0x1e, 0x4a,
	0xf0, 0x7b, 0x23, 0xf1, 0x37, 0xb3, 0x22, 0xdf, 0xb7, 0xea, 0xbf, 0xfd, 0xd7, 0x9f, 0x5e, 0xd5,
	0x89, 0x6f, 0xdd, 0x87, 0xd5, 0x94, 0xfa, 0x59, 0x84, 0x8d, 0xa8, 0xcf, 0x48, 0xeb, 0x1f, 0x45,
	0x58, 0x3c, 0x62, 0xee, 0x93, 0xb0, 0x3f, 0xf4, 0xf8, 0xbe, 0x08, 0x84, 0x36, 0xe1, 0xb6, 0x1d,
	0x03, 0x7b, 0x9e, 0xa3, 0x2b, 0xbc, 0x30, 0x99, 0x3c, 0x74, 0xd0, 0x0a, 0xd4, 0xe4, 0xb6, 0x84,
	0x5d, 0x55, 0xba, 0x2a, 0xc7, 0x87, 0x0e, 0xb2, 0xc1, 0xc4, 0x2e, 0xf1, 0x79, 0xcf, 0xf1, 0x1c,
	0x55, 0xeb, 0xee, 0xbb, 0xff, 0xfd, 0x6a, 0xbd, 0xeb, 0x7a, 0xfc, 0x24, 0xec, 0xb7, 0x6d, 0x3a,
	0xec, 0x78, 0x63, 0x7a, 0x4c, 0x43, 0xdf, 0x91, 0x4c, 0x13, 0xa3, 0x47, 0xfd, 0x01, 0xb5, 0x4f,
	0xed, 0x13, 0xec, 0xf9, 0x9d, 0xb3, 0xc7, 0x9d, 0x71, 0xc7, 0xf3, 0x9c, 0x0e, 0x3f, 0x1f, 0x11,
	0xd6, 0x3e, 0x38, 0x3c, 0x78, 0x37, 0xc0, 0xae, 0xc8, 0x90, 0x55, 0x93, 0x0b, 0x1f, 0x78, 0x8e,
	0xd8, 0xa4, 0x0a, 0x82, 0x1d, 0x27, 0x20, 0x8c, 0x49, 0xda, 0x98, 0xd6, 0x82, 0x9c, 0xdc, 0x53,
	0x73, 0x12, 0xe4, 0x0c, 0x3d, 0x3f, 0x06, 0x95, 0x35, 0x48, 0x4c, 0x46, 0xa0, 0xfb, 0x00, 0x21,
	0x23, 0x3d, 0x95, 0x3c, 0x49, 0x82, 0x9a, 0x65, 0x86, 0x8c, 0xa8, 0xe4, 0x22, 0x1b, 0x2a, 0x78,
	0x48, 0x43, 0x9f, 0x37, 0xaa, 0x1b, 0xc5, 0xad, 0xfa, 0xee, 0x4a, 0x5b, 0xb5, 0x5a, 0x5b, 0xb4,
	0x6a, 0xa2, 0x26, 0x9e, 0xdf, 0xdd, 0xfe, 0xe2, 0xab, 0xf5, 0x5b, 0x7f, 0xfc, 0x7a, 0x7d, 0x2b,
	0x71, 0x52, 0xdd, 0x97, 0xea, 0x9f, 0x47, 0xcc, 0x39, 0xd5, 0xa7, 0x12, 0x0e, 0xcc, 0xd2, 0x4b,
	0xa3, 0x2e, 0x2c, 0xd8, 0x9f, 0xec, 0x6e, 0xf7, 0x34, 0x13, 0x1a, 0x35, 0x19, 0x6a, 0x3d, 0xb5,
	0xfa, 0x1f, 0xed, 0x6e, 0x6b, 0xea, 0x58, 0x75, 0xe1, 0xa4, 0x07, 0x6f, 0x21, 0x51, 0xf5, 0xe9,
	0xf3, 0xb6, 0x1a, 0x70, 0x67, 0xba, 0xb8, 0x93, 0xba, 0x97, 0x60, 0xf9, 0x88, 0xb9, 0xef, 0x9c,
	0xe1, 0x41, 0x28, 0x98, 0x21, 0x2b, 0x9f, 0x2c, 0xaa, 0x31, 0x5d, 0xd4, 0x39, 0x52, 0x14, 0x52,
	0x48, 0x71, 0x07, 0x2a, 0x34, 0xc0, 0xf6, 0x80, 0xe8, 0x16, 0xd7, 0xa3, 0x69, 0x46, 0x94, 0x6e,
	0x8a, 0x11, 0xe5, 0x3c, 0x8c, 0xa8, 0xa4, 0x30, 0xe2, 0x07, 0x50, 0x11, 0x9d, 0x1c, 0x32, 0xdd,
	0xfc, 0x0f, 0xd2, 0xea, 0xa0, 0x33, 0xa7, 0x9b, 0x3f, 0x64, 0x96, 0xf6, 0x11, 0x49, 0x08, 0x08,
	0x66, 0xd4, 0x97, 0xcd, 0x7f, 0xdb, 0xd2, 0x23, 0xf4, 0x08, 0xd0, 0x19, 0x09, 0xbc, 0x63, 0xcf,
	0x96, 0x5e, 0xbd, 0x51, 0x40, 0xe9, 0xb1, 0xec, 0x73, 0xd3, 0xfa, 0x46, 0xd2, 0xf2, 0xbe, 0x30,
	0x24, 0x78, 0x07, 0x37, 0xc7, 0xbb, 0xfa, 0x35, 0xf1, 0xae, 0x09, 0x8d, 0x59, 0x72, 0xc5, 0xcc,
	0xfb, 0x43, 0x01, 0x96, 0x8e, 0x98, 0x7b, 0xe0, 0xb1, 0x51, 0x18, 0x11, 0xef, 0x3e, 0x00, 0x0b,
	0xfb, 0x1f, 0x13, 0x9b, 0x4f, 0xa8, 0x67, 0xea, 0x99, 0xd9, 0x1b, 0xa5, 0x70, 0x53, 0xfc, 0x29,
	0xa6, 0xf0, 0xe7, 0x9b, 0xb0, 0xe0, 0xa8, 0x8d, 0xf7, 0xc4, 0x5a, 0x92, 0xcc, 0x65, 0xab, 0xae,
	0xe7, 0x3e, 0x3c, 0x1f, 0x11, 0xf4, 0x3a, 0x94, 0x1c, 0xcc, 0xb1, 0x7e, 0x88, 0x52, 0x73, 0xa9,
	0xcf, 0x7e, 0x80, 0x39, 0xb6, 0x24, 0x38, 0x4a, 0x62, 0x32, 0x7e, 0x6b, 0x05, 0xee, 0xce, 0xe4,
	0x29, 0xce, 0xe1, 0xdf, 0x4a, 0x80, 0x8e, 0x98, 0xfb, 0x91, 0xc7, 0x4f, 0x9c, 0x00, 0x7f, 0xa2,
	0x4b, 0x71, 0x51, 0xff, 0xbe, 0x01, 0x15, 0xcf, 0x1f, 0x85, 0x9c, 0x35, 0x0a, 0xb2, 0xc6, 0xcd,
	0x09, 0x9d, 0xfc, 0xd3, 0x78, 0x63, 0x87, 0x02, 0xd2, 0x2d, 0x09, 0x3e, 0x59, 0x1a, 0x8f, 0xde,
	0x86, 0x2a, 0x0d, 0xb9, 0x74, 0x2d, 0x4a, 0xd7, 0xd5, 0x54, 0xd7, 0xf7, 0x24, 0x46, 0xfb, 0x46,
	0x1e, 0x82, 0x60, 0x9a, 0x5b, 0x93, 0x7c, 0x2d, 0xa6, 0x27, 0x45, 0x1f, 0x42, 0xe4, 0xd0, 0xaa,
	0x8f, 0x26, 0x03, 0xf4, 0x73, 0x78, 0xc5, 0xa6, 0x3e, 0x0f, 0xb0, 0xcd, 0x7b, 0x3b, 0x3b, 0x8f,
	0x1f, 0xc7, 0x6c, 0x55, 0x19, 0x7e, 0x98, 0xfe, 0x46, 0x2a, 0x07, 0x81, 0x8f, 0x58, 0xfb, 0x92,
	0x3d, 0x3f, 0x89, 0xee, 0x81, 0xc9, 0xe9, 0xde, 0xd4, 0x65, 0x30, 0x99, 0x40, 0x1b, 0x50, 0x3f,
	0x0e, 0xe8, 0x30, 0xb2, 0x57, 0xa5, 0x3d, 0x39, 0x85, 0xf6, 0x61, 0x21, 0x20, 0x03, 0x82, 0x19,
	0x51, 0xf2, 0xa3, 0x96, 0x53, 0x7e, 0xd4, 0xb5, 0x97, 0x94, 0x20, 0x73, 0xb7, 0x92, 0x99, 0x72,
	0x2b, 0xcd, 0xf6, 0x2a, 0x5c, 0x53, 0xaf, 0xde, 0x83, 0xe6, 0x3c, 0x95, 0x62, 0xa6, 0xfd, 0xd9,
	0x90, 0xad, 0xfc, 0xd3, 0x91, 0x33, 0xa5, 0x1f, 0xa4, 0xe0, 0xc9, 0xa7, 0x14, 0x62, 0x25, 0x55,
	0xb8, 0xb4, 0x92, 0x9a, 0xcb, 0x4b, 0x71, 0x3e, 0x2f, 0xa9, 0x67, 0x6a, 0xc1, 0x46, 0xd6, 0xa6,
	0xe3, 0x93, 0xfd, 0x27, 0xfd, 0x64, 0xa2, 0x20, 0x2c, 0xdf, 0xc9, 0xa6, 0x75, 0x6b, 0xe1, 0xc5,
	0x74, 0x6b, 0xf1, 0xb2, 0xba, 0x75, 0x2e, 0x39, 0xa5, 0x17, 0x4a, 0x8e, 0x3c, 0x77, 0x9c, 0x9c,
	0xcf, 0x0d, 0x29, 0x1b, 0x67, 0x41, 0x91, 0x66, 0xcd, 0x97, 0x9f, 0xa4, 0x10, 0x2e, 0x5c, 0x4a,
	0x08, 0x5f, 0xb9, 0xf0, 0xdf, 0x82, 0xcd, 0x0b, 0xb6, 0x1d, 0x1f, 0xef, 0xaf, 0x86, 0x24, 0xfd,
	0x2c, 0x4e, 0x49, 0xbe, 0x9c, 0xa7, 0x4b, 0x88, 0xf5, 0xc2, 0xd5, 0xc5, 0xfa, 0xd5, 0x8f, 0xfa,
	0x00, 0x5a, 0xd9, 0x47, 0x88, 0x4f, 0xfa, 0xbf, 0x82, 0xd4, 0xf7, 0xf2, 0xf9, 0x88, 0x15, 0x6d,
	0xe2, 0x35, 0x35, 0x6e, 0xea, 0x35, 0x2d, 0xa4, 0xab, 0xb1, 0xe9, 0x3c, 0x17, 0x53, 0xf2, 0x3c,
	0x11, 0x42, 0xa5, 0x9b, 0x13, 0x42, 0xe5, 0xab, 0x5f, 0xae, 0x53, 0x6f, 0x38, 0x97, 0x02, 0x3c,
	0x91, 0xfd, 0xa8, 0x30, 0x68, 0x15, 0x4c, 0x45, 0x81, 0x09, 0xbf, 0x6a, 0x6a, 0xe2, 0xd0, 0x41,
	0x3f, 0x04, 0x93, 0x8c, 0x47, 0x5e, 0x40, 0x7a, 0x98, 0xe7, 0xbe, 0x58, 0x6a, 0xca, 0x65, 0x8f,
	0xb7, 0x3e, 0xaf, 0x24, 0x7f, 0xf4, 0x89, 0xe0, 0x7b, 0x21, 0x3f, 0xa1, 0x81, 0xf7, 0xa9, 0x2c,
	0x28, 0x7a, 0x08, 0x4b, 0xb6, 0xb0, 0xd1, 0x20, 0x2e, 0x8f, 0xda, 0xc1, 0xa2, 0x9e, 0x8e, 0x0a,
	0xe4, 0x42, 0x3d, 0x02, 0x5e, 0xbf, 0xf4, 0x02, 0xbd, 0xb4, 0xa0, 0xcb, 0x43, 0x58, 0x72, 0x03,
	0xec, 0x73, 0x42, 0x66, 0xfa, 0x60, 0x51, 0x4f, 0x67, 0x0a, 0xf8, 0x94, 0x5b, 0x6f, 0x9e, 0x57,
	0xe5, 0x14, 0x5e, 0x1d, 0x81, 0x89, 0x43, 0x7e, 0xa2, 0x74, 0x49, 0x45, 0x76, 0xf0, 0x76, 0x6a,
	0xbd, 0x33, 0xb2, 0x28, 0x85, 0x4a, 0x4d, 0x2c, 0x21, 0x55, 0xca, 0x3a, 0xd4, 0x55, 0xe9, 0xd5,
	0xc7, 0x84, 0xaa, 0xfc, 0x98, 0x00, 0x72, 0xea, 0x03, 0xf9, 0x45, 0xe1, 0x63, 0x80, 0x21, 0x1e,
	0xf7, 0x34, 0x97, 0x6b, 0xd7, 0xcf, 0x65, 0x73, 0x88, 0xc7, 0x7b, 0x8a, 0xce, 0x87, 0xb0, 0x2c,
	0x62, 0x4d, 0x51, 0xda, 0xcc, 0x47, 0xe9, 0xc5, 0x21, 0x1e, 0xef, 0x4f, 0x58, 0x8d, 0x7e, 0x0c,
	0x20, 0x79, 0x25, 0xcf, 0xdc, 0x80, 0x9c, 0x5c, 0x4c, 0xf8, 0xa0, 0x0f, 0x00, 0x69, 0xa6, 0x47,
	0xdf, 0x96, 0x7a, 0x3e, 0x6b, 0xd4, 0xe5, 0x4a, 0x2b, 0x73, 0x2b, 0x1d, 0x68, 0x4c, 0xb7, 0x26,
	0x12, 0xf0, 0x7b, 0xb1, 0xd8, 0xb2, 0x72, 0x8f, 0x2c, 0x3f, 0x61, 0x68, 0x0f, 0xea, 0x7d, 0x72,
	0x4c, 0x03, 0x2d, 0xba, 0x16, 0xf2, 0xee, 0x4a, 0x39, 0x89, 0xa7, 0xee, 0x82, 0xd7, 0x23, 0xab,
	0xe0, 0x51, 0xeb, 0xee, 0xfe, 0xdb, 0x84, 0xe2, 0x11, 0x73, 0xd1, 0x00, 0x96, 0xe7, 0xbe, 0x8b,
	0xa5, 0xaa, 0xd1, 0x94, 0x0f, 0x30, 0xcd, 0x4e, 0x4e, 0x60, 0x7c, 0x61, 0xfc, 0x02, 0xea, 0xc9,
	0xaf, 0x34, 0xad, 0x0c, 0xff, 0x04, 0xa6, 0xf9, 0xea, 0xf3, 0x31, 0xf1, 0xf2, 0x36, 0xdc, 0x9e,
	0xfe, 0x18, 0xf0, 0x20, 0xc3, 0x79, 0x0a, 0xd5, 0xfc, 0x4e, 0x1e, 0x54, 0x1c, 0xe4, 0x97, 0xb0,
	0x30, 0xf5, 0xbb, 0x6f, 0x33, 0xc3, 0x3b, 0x09, 0x6a, 0xbe, 0x96, 0x03, 0x14, 0x47, 0xf0, 0x60,
	0x69, 0xf6, 0x57, 0xd1, 0xb7, 0x33, 0xfc, 0x67, 0x70, 0xcd, 0x76, 0x3e, 0x5c, 0x1c, 0xea, 0xd7,
	0xf0, 0x4a, 0xba, 0x2c, 0xce, 0xca, 0x49, 0x2a, 0xba, 0xf9, 0xdd, 0xcb, 0xa0, 0x2f, 0x0a, 0xae,
	0x94, 0x6b, 0xde, 0xe0, 0x12, 0x9d, 0x3b, 0xf8, 0x94, 0x3a, 0x44, 0xbf, 0x33, 0xa0, 0x91, 0x29,
	0x0d, 0x3b, 0x39, 0x97, 0x8c, 0x1c, 0x9a, 0xdf, 0xbf, 0xa4, 0x43, 0xbc, 0x8d, 0xdf, 0x18, 0x70,
	0x37, 0x4b, 0xc2, 0xb5, 0x73, 0x2e, 0xaa, 0xf1, 0xcd, 0xef, 0x5d, 0x0e, 0x9f, 0xec, 0xca, 0xa4,
	0xb6, 0xca, 0xea, 0xca, 0x04, 0x26, 0xb3, 0x2b, 0xd3, 0x54, 0x82, 0xc8, 0x74, 0xe6, 0x33, 0xfe,
	0x9c, 0x2b, 0x64, 0xce, 0x21, 0x33, 0xd3, 0xcf, 0xbb, 0xf1, 0xba, 0x4f, 0xbe, 0x78, 0xba, 0x66,
	0x7c, 0xf9, 0x74, 0xcd, 0xf8, 0xe7, 0xd3, 0x35, 0xe3, 0xb3, 0x67, 0x6b, 0xb7, 0xbe, 0x7c, 0xb6,
	0x76, 0xeb, 0xef, 0xcf, 0xd6, 0x6e, 0xfd, 0xec, 0xcd, 0x4b, 0x09, 0x01, 0xfd, 0x1f, 0x11, 0xf2,
	0xd5, 0xea, 0x57, 0xe4, 0x3d, 0xfd, 0xfa, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xd0, 0xf0,
	0xc2, 0x85, 0x19, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateCollection(ctx context.Context, in *MsgCreateCollection, opts ...grpc.CallOption) (*MsgCreateCollectionResponse, error)
	SubmitClaim(ctx context.Context, in *MsgSubmitClaim, opts ...grpc.CallOption) (*MsgSubmitClaimResponse, error)
	EvaluateClaim(ctx context.Context, in *MsgEvaluateClaim, opts ...grpc.CallOption) (*MsgEvaluateClaimResponse, error)
	DisputeClaim(ctx context.Context, in *MsgDisputeClaim, opts ...grpc.CallOption) (*MsgDisputeClaimResponse, error)
	WithdrawPayment(ctx context.Context, in *MsgWithdrawPayment, opts ...grpc.CallOption) (*MsgWithdrawPaymentResponse, error)
	UpdateCollectionState(ctx context.Context, in *MsgUpdateCollectionState, opts ...grpc.CallOption) (*MsgUpdateCollectionStateResponse, error)
	UpdateCollectionDates(ctx context.Context, in *MsgUpdateCollectionDates, opts ...grpc.CallOption) (*MsgUpdateCollectionDatesResponse, error)
	UpdateCollectionPayments(ctx context.Context, in *MsgUpdateCollectionPayments, opts ...grpc.CallOption) (*MsgUpdateCollectionPaymentsResponse, error)
	UpdateCollectionIntents(ctx context.Context, in *MsgUpdateCollectionIntents, opts ...grpc.CallOption) (*MsgUpdateCollectionIntentsResponse, error)
	ClaimIntent(ctx context.Context, in *MsgClaimIntent, opts ...grpc.CallOption) (*MsgClaimIntentResponse, error)
	CreateClaimAuthorization(ctx context.Context, in *MsgCreateClaimAuthorization, opts ...grpc.CallOption) (*MsgCreateClaimAuthorizationResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateCollection(ctx context.Context, in *MsgCreateCollection, opts ...grpc.CallOption) (*MsgCreateCollectionResponse, error) {
	out := new(MsgCreateCollectionResponse)
	err := c.cc.Invoke(ctx, "/ixo.claims.v1beta1.Msg/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitClaim(ctx context.Context, in *MsgSubmitClaim, opts ...grpc.CallOption) (*MsgSubmitClaimResponse, error) {
	out := new(MsgSubmitClaimResponse)
	err := c.cc.Invoke(ctx, "/ixo.claims.v1beta1.Msg/SubmitClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EvaluateClaim(ctx context.Context, in *MsgEvaluateClaim, opts ...grpc.CallOption) (*MsgEvaluateClaimResponse, error) {
	out := new(MsgEvaluateClaimResponse)
	err := c.cc.Invoke(ctx, "/ixo.claims.v1beta1.Msg/EvaluateClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DisputeClaim(ctx context.Context, in *MsgDisputeClaim, opts ...grpc.CallOption) (*MsgDisputeClaimResponse, error) {
	out := new(MsgDisputeClaimResponse)
	err := c.cc.Invoke(ctx, "/ixo.claims.v1beta1.Msg/DisputeClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawPayment(ctx context.Context, in *MsgWithdrawPayment, opts ...grpc.CallOption) (*MsgWithdrawPaymentResponse, error) {
	out := new(MsgWithdrawPaymentResponse)
	err := c.cc.Invoke(ctx, "/ixo.claims.v1beta1.Msg/WithdrawPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCollectionState(ctx context.Context, in *MsgUpdateCollectionState, opts ...grpc.CallOption) (*MsgUpdateCollectionStateResponse, error) {
	out := new(MsgUpdateCollectionStateResponse)
	err := c.cc.Invoke(ctx, "/ixo.claims.v1beta1.Msg/UpdateCollectionState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCollectionDates(ctx context.Context, in *MsgUpdateCollectionDates, opts ...grpc.CallOption) (*MsgUpdateCollectionDatesResponse, error) {
	out := new(MsgUpdateCollectionDatesResponse)
	err := c.cc.Invoke(ctx, "/ixo.claims.v1beta1.Msg/UpdateCollectionDates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCollectionPayments(ctx context.Context, in *MsgUpdateCollectionPayments, opts ...grpc.CallOption) (*MsgUpdateCollectionPaymentsResponse, error) {
	out := new(MsgUpdateCollectionPaymentsResponse)
	err := c.cc.Invoke(ctx, "/ixo.claims.v1beta1.Msg/UpdateCollectionPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCollectionIntents(ctx context.Context, in *MsgUpdateCollectionIntents, opts ...grpc.CallOption) (*MsgUpdateCollectionIntentsResponse, error) {
	out := new(MsgUpdateCollectionIntentsResponse)
	err := c.cc.Invoke(ctx, "/ixo.claims.v1beta1.Msg/UpdateCollectionIntents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimIntent(ctx context.Context, in *MsgClaimIntent, opts ...grpc.CallOption) (*MsgClaimIntentResponse, error) {
	out := new(MsgClaimIntentResponse)
	err := c.cc.Invoke(ctx, "/ixo.claims.v1beta1.Msg/ClaimIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateClaimAuthorization(ctx context.Context, in *MsgCreateClaimAuthorization, opts ...grpc.CallOption) (*MsgCreateClaimAuthorizationResponse, error) {
	out := new(MsgCreateClaimAuthorizationResponse)
	err := c.cc.Invoke(ctx, "/ixo.claims.v1beta1.Msg/CreateClaimAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateCollection(context.Context, *MsgCreateCollection) (*MsgCreateCollectionResponse, error)
	SubmitClaim(context.Context, *MsgSubmitClaim) (*MsgSubmitClaimResponse, error)
	EvaluateClaim(context.Context, *MsgEvaluateClaim) (*MsgEvaluateClaimResponse, error)
	DisputeClaim(context.Context, *MsgDisputeClaim) (*MsgDisputeClaimResponse, error)
	WithdrawPayment(context.Context, *MsgWithdrawPayment) (*MsgWithdrawPaymentResponse, error)
	UpdateCollectionState(context.Context, *MsgUpdateCollectionState) (*MsgUpdateCollectionStateResponse, error)
	UpdateCollectionDates(context.Context, *MsgUpdateCollectionDates) (*MsgUpdateCollectionDatesResponse, error)
	UpdateCollectionPayments(context.Context, *MsgUpdateCollectionPayments) (*MsgUpdateCollectionPaymentsResponse, error)
	UpdateCollectionIntents(context.Context, *MsgUpdateCollectionIntents) (*MsgUpdateCollectionIntentsResponse, error)
	ClaimIntent(context.Context, *MsgClaimIntent) (*MsgClaimIntentResponse, error)
	CreateClaimAuthorization(context.Context, *MsgCreateClaimAuthorization) (*MsgCreateClaimAuthorizationResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateCollection(ctx context.Context, req *MsgCreateCollection) (*MsgCreateCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (*UnimplementedMsgServer) SubmitClaim(ctx context.Context, req *MsgSubmitClaim) (*MsgSubmitClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitClaim not implemented")
}
func (*UnimplementedMsgServer) EvaluateClaim(ctx context.Context, req *MsgEvaluateClaim) (*MsgEvaluateClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateClaim not implemented")
}
func (*UnimplementedMsgServer) DisputeClaim(ctx context.Context, req *MsgDisputeClaim) (*MsgDisputeClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisputeClaim not implemented")
}
func (*UnimplementedMsgServer) WithdrawPayment(ctx context.Context, req *MsgWithdrawPayment) (*MsgWithdrawPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawPayment not implemented")
}
func (*UnimplementedMsgServer) UpdateCollectionState(ctx context.Context, req *MsgUpdateCollectionState) (*MsgUpdateCollectionStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionState not implemented")
}
func (*UnimplementedMsgServer) UpdateCollectionDates(ctx context.Context, req *MsgUpdateCollectionDates) (*MsgUpdateCollectionDatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionDates not implemented")
}
func (*UnimplementedMsgServer) UpdateCollectionPayments(ctx context.Context, req *MsgUpdateCollectionPayments) (*MsgUpdateCollectionPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionPayments not implemented")
}
func (*UnimplementedMsgServer) UpdateCollectionIntents(ctx context.Context, req *MsgUpdateCollectionIntents) (*MsgUpdateCollectionIntentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionIntents not implemented")
}
func (*UnimplementedMsgServer) ClaimIntent(ctx context.Context, req *MsgClaimIntent) (*MsgClaimIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimIntent not implemented")
}
func (*UnimplementedMsgServer) CreateClaimAuthorization(ctx context.Context, req *MsgCreateClaimAuthorization) (*MsgCreateClaimAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClaimAuthorization not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.claims.v1beta1.Msg/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCollection(ctx, req.(*MsgCreateCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.claims.v1beta1.Msg/SubmitClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitClaim(ctx, req.(*MsgSubmitClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EvaluateClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEvaluateClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EvaluateClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.claims.v1beta1.Msg/EvaluateClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EvaluateClaim(ctx, req.(*MsgEvaluateClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DisputeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDisputeClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DisputeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.claims.v1beta1.Msg/DisputeClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DisputeClaim(ctx, req.(*MsgDisputeClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.claims.v1beta1.Msg/WithdrawPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawPayment(ctx, req.(*MsgWithdrawPayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCollectionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCollectionState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCollectionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.claims.v1beta1.Msg/UpdateCollectionState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCollectionState(ctx, req.(*MsgUpdateCollectionState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCollectionDates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCollectionDates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCollectionDates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.claims.v1beta1.Msg/UpdateCollectionDates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCollectionDates(ctx, req.(*MsgUpdateCollectionDates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCollectionPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCollectionPayments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCollectionPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.claims.v1beta1.Msg/UpdateCollectionPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCollectionPayments(ctx, req.(*MsgUpdateCollectionPayments))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCollectionIntents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCollectionIntents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCollectionIntents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.claims.v1beta1.Msg/UpdateCollectionIntents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCollectionIntents(ctx, req.(*MsgUpdateCollectionIntents))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimIntent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.claims.v1beta1.Msg/ClaimIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimIntent(ctx, req.(*MsgClaimIntent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateClaimAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateClaimAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateClaimAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.claims.v1beta1.Msg/CreateClaimAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateClaimAuthorization(ctx, req.(*MsgCreateClaimAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ixo.claims.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollection",
			Handler:    _Msg_CreateCollection_Handler,
		},
		{
			MethodName: "SubmitClaim",
			Handler:    _Msg_SubmitClaim_Handler,
		},
		{
			MethodName: "EvaluateClaim",
			Handler:    _Msg_EvaluateClaim_Handler,
		},
		{
			MethodName: "DisputeClaim",
			Handler:    _Msg_DisputeClaim_Handler,
		},
		{
			MethodName: "WithdrawPayment",
			Handler:    _Msg_WithdrawPayment_Handler,
		},
		{
			MethodName: "UpdateCollectionState",
			Handler:    _Msg_UpdateCollectionState_Handler,
		},
		{
			MethodName: "UpdateCollectionDates",
			Handler:    _Msg_UpdateCollectionDates_Handler,
		},
		{
			MethodName: "UpdateCollectionPayments",
			Handler:    _Msg_UpdateCollectionPayments_Handler,
		},
		{
			MethodName: "UpdateCollectionIntents",
			Handler:    _Msg_UpdateCollectionIntents_Handler,
		},
		{
			MethodName: "ClaimIntent",
			Handler:    _Msg_ClaimIntent_Handler,
		},
		{
			MethodName: "CreateClaimAuthorization",
			Handler:    _Msg_CreateClaimAuthorization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ixo/claims/v1beta1/tx.proto",
}

func (m *MsgCreateCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Intents != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Intents))
		i--
		dAtA[i] = 0x48
	}
	if m.Payments != nil {
		{
			size, err := m.Payments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.State != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x38
	}
	if m.Quota != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Quota))
		i--
		dAtA[i] = 0x30
	}
	if m.EndDate != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.EndDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EndDate):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintTx(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x2a
	}
	if m.StartDate != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.StartDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.StartDate):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintTx(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Protocol) > 0 {
		i -= len(m.Protocol)
		copy(dAtA[i:], m.Protocol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Protocol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Entity) > 0 {
		i -= len(m.Entity)
		copy(dAtA[i:], m.Entity)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Entity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cw20Payment) > 0 {
		for iNdEx := len(m.Cw20Payment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cw20Payment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.UseIntent {
		i--
		if m.UseIntent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AgentAddress) > 0 {
		i -= len(m.AgentAddress)
		copy(dAtA[i:], m.AgentAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AgentAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AgentDid) > 0 {
		i -= len(m.AgentDid)
		copy(dAtA[i:], m.AgentDid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AgentDid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClaimId) > 0 {
		i -= len(m.ClaimId)
		copy(dAtA[i:], m.ClaimId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClaimId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEvaluateClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEvaluateClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEvaluateClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cw20Payment) > 0 {
		for iNdEx := len(m.Cw20Payment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cw20Payment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.VerificationProof) > 0 {
		i -= len(m.VerificationProof)
		copy(dAtA[i:], m.VerificationProof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerificationProof)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Reason != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AgentAddress) > 0 {
		i -= len(m.AgentAddress)
		copy(dAtA[i:], m.AgentAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AgentAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AgentDid) > 0 {
		i -= len(m.AgentDid)
		copy(dAtA[i:], m.AgentDid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AgentDid)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Oracle) > 0 {
		i -= len(m.Oracle)
		copy(dAtA[i:], m.Oracle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Oracle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClaimId) > 0 {
		i -= len(m.ClaimId)
		copy(dAtA[i:], m.ClaimId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClaimId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEvaluateClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEvaluateClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEvaluateClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDisputeClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisputeClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisputeClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DisputeType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DisputeType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AgentAddress) > 0 {
		i -= len(m.AgentAddress)
		copy(dAtA[i:], m.AgentAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AgentAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AgentDid) > 0 {
		i -= len(m.AgentDid)
		copy(dAtA[i:], m.AgentDid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AgentDid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubjectId) > 0 {
		i -= len(m.SubjectId)
		copy(dAtA[i:], m.SubjectId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDisputeClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisputeClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisputeClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawPayment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawPayment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawPayment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cw20Payment) > 0 {
		for iNdEx := len(m.Cw20Payment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cw20Payment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ReleaseDate != nil {
		n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ReleaseDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ReleaseDate):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintTx(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x42
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.Contract_1155Payment != nil {
		{
			size, err := m.Contract_1155Payment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PaymentType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PaymentType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Outputs) > 0 {
		for iNdEx := len(m.Outputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClaimId) > 0 {
		i -= len(m.ClaimId)
		copy(dAtA[i:], m.ClaimId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClaimId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawPaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawPaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawPaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCollectionState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCollectionState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCollectionState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCollectionStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCollectionStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCollectionStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCollectionDates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCollectionDates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCollectionDates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndDate != nil {
		n7, err7 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.EndDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EndDate):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintTx(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x1a
	}
	if m.StartDate != nil {
		n8, err8 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.StartDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.StartDate):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintTx(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCollectionDatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCollectionDatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCollectionDatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCollectionPayments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCollectionPayments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCollectionPayments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Payments != nil {
		{
			size, err := m.Payments.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCollectionPaymentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCollectionPaymentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCollectionPaymentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCollectionIntents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCollectionIntents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCollectionIntents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Intents != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Intents))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCollectionIntentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCollectionIntentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCollectionIntentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimIntent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimIntent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimIntent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cw20Payment) > 0 {
		for iNdEx := len(m.Cw20Payment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cw20Payment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AgentAddress) > 0 {
		i -= len(m.AgentAddress)
		copy(dAtA[i:], m.AgentAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AgentAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AgentDid) > 0 {
		i -= len(m.AgentDid)
		copy(dAtA[i:], m.AgentDid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AgentDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimIntentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimIntentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimIntentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpireAt != nil {
		n10, err10 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ExpireAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpireAt):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintTx(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IntentId) > 0 {
		i -= len(m.IntentId)
		copy(dAtA[i:], m.IntentId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IntentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateClaimAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateClaimAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateClaimAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BeforeDate != nil {
		n11, err11 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.BeforeDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.BeforeDate):])
		if err11 != nil {
			return 0, err11
		}
		i -= n11
		i = encodeVarintTx(dAtA, i, uint64(n11))
		i--
		dAtA[i] = 0x62
	}
	n12, err12 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.IntentDurationNs, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.IntentDurationNs):])
	if err12 != nil {
		return 0, err12
	}
	i -= n12
	i = encodeVarintTx(dAtA, i, uint64(n12))
	i--
	dAtA[i] = 0x5a
	if m.Expiration != nil {
		n13, err13 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.Expiration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Expiration):])
		if err13 != nil {
			return 0, err13
		}
		i -= n13
		i = encodeVarintTx(dAtA, i, uint64(n13))
		i--
		dAtA[i] = 0x52
	}
	if len(m.MaxCw20Payment) > 0 {
		for iNdEx := len(m.MaxCw20Payment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxCw20Payment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.MaxAmount) > 0 {
		for iNdEx := len(m.MaxAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.AgentQuota != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AgentQuota))
		i--
		dAtA[i] = 0x38
	}
	if m.AuthType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AuthType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GranteeAddress) > 0 {
		i -= len(m.GranteeAddress)
		copy(dAtA[i:], m.GranteeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GranteeAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CreatorDid) > 0 {
		i -= len(m.CreatorDid)
		copy(dAtA[i:], m.CreatorDid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CreatorDid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreatorAddress) > 0 {
		i -= len(m.CreatorAddress)
		copy(dAtA[i:], m.CreatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CreatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateClaimAuthorizationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateClaimAuthorizationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateClaimAuthorizationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Entity)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.StartDate)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EndDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EndDate)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Quota != 0 {
		n += 1 + sovTx(uint64(m.Quota))
	}
	if m.State != 0 {
		n += 1 + sovTx(uint64(m.State))
	}
	if m.Payments != nil {
		l = m.Payments.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Intents != 0 {
		n += 1 + sovTx(uint64(m.Intents))
	}
	return n
}

func (m *MsgCreateCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClaimId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AgentDid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AgentAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UseIntent {
		n += 2
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Cw20Payment) > 0 {
		for _, e := range m.Cw20Payment {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEvaluateClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClaimId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Oracle)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AgentDid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AgentAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	if m.Reason != 0 {
		n += 1 + sovTx(uint64(m.Reason))
	}
	l = len(m.VerificationProof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Cw20Payment) > 0 {
		for _, e := range m.Cw20Payment {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgEvaluateClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDisputeClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubjectId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AgentDid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AgentAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DisputeType != 0 {
		n += 1 + sovTx(uint64(m.DisputeType))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDisputeClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawPayment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClaimId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.PaymentType != 0 {
		n += 1 + sovTx(uint64(m.PaymentType))
	}
	if m.Contract_1155Payment != nil {
		l = m.Contract_1155Payment.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ReleaseDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ReleaseDate)
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Cw20Payment) > 0 {
		for _, e := range m.Cw20Payment {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgWithdrawPaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCollectionState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovTx(uint64(m.State))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCollectionStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCollectionDates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.StartDate)
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EndDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EndDate)
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCollectionDatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCollectionPayments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Payments != nil {
		l = m.Payments.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCollectionPaymentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCollectionIntents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Intents != 0 {
		n += 1 + sovTx(uint64(m.Intents))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCollectionIntentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimIntent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AgentDid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AgentAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Cw20Payment) > 0 {
		for _, e := range m.Cw20Payment {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgClaimIntentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IntentId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExpireAt != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpireAt)
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateClaimAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CreatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CreatorDid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GranteeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AuthType != 0 {
		n += 1 + sovTx(uint64(m.AuthType))
	}
	if m.AgentQuota != 0 {
		n += 1 + sovTx(uint64(m.AgentQuota))
	}
	if len(m.MaxAmount) > 0 {
		for _, e := range m.MaxAmount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.MaxCw20Payment) > 0 {
		for _, e := range m.MaxCw20Payment {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Expiration != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Expiration)
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.IntentDurationNs)
	n += 1 + l + sovTx(uint64(l))
	if m.BeforeDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.BeforeDate)
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateClaimAuthorizationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.StartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.EndDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			m.Quota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quota |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= CollectionState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payments == nil {
				m.Payments = &Payments{}
			}
			if err := m.Payments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intents", wireType)
			}
			m.Intents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Intents |= CollectionIntentOptions(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentDid = github_com_ixofoundation_ixo_blockchain_v5_x_iid_types.DIDFragment(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseIntent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseIntent = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20Payment = append(m.Cw20Payment, &CW20Payment{})
			if err := m.Cw20Payment[len(m.Cw20Payment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEvaluateClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEvaluateClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEvaluateClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentDid = github_com_ixofoundation_ixo_blockchain_v5_x_iid_types.DIDFragment(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= EvaluationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationProof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationProof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20Payment = append(m.Cw20Payment, &CW20Payment{})
			if err := m.Cw20Payment[len(m.Cw20Payment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEvaluateClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEvaluateClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEvaluateClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisputeClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisputeClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisputeClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentDid = github_com_ixofoundation_ixo_blockchain_v5_x_iid_types.DIDFragment(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeType", wireType)
			}
			m.DisputeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DisputeData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisputeClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisputeClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisputeClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawPayment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawPayment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawPayment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, types1.Input{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, types1.Output{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			m.PaymentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentType |= PaymentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract_1155Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contract_1155Payment == nil {
				m.Contract_1155Payment = &Contract1155Payment{}
			}
			if err := m.Contract_1155Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReleaseDate == nil {
				m.ReleaseDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ReleaseDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20Payment = append(m.Cw20Payment, &CW20Payment{})
			if err := m.Cw20Payment[len(m.Cw20Payment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawPaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawPaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawPaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCollectionState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCollectionState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCollectionState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= CollectionState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCollectionStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCollectionStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCollectionStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCollectionDates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCollectionDates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCollectionDates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.StartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.EndDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCollectionDatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCollectionDatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCollectionDatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCollectionPayments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCollectionPayments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCollectionPayments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payments == nil {
				m.Payments = &Payments{}
			}
			if err := m.Payments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCollectionPaymentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCollectionPaymentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCollectionPaymentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCollectionIntents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCollectionIntents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCollectionIntents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intents", wireType)
			}
			m.Intents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Intents |= CollectionIntentOptions(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCollectionIntentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCollectionIntentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCollectionIntentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimIntent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimIntent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimIntent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentDid = github_com_ixofoundation_ixo_blockchain_v5_x_iid_types.DIDFragment(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20Payment = append(m.Cw20Payment, &CW20Payment{})
			if err := m.Cw20Payment[len(m.Cw20Payment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimIntentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimIntentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimIntentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpireAt == nil {
				m.ExpireAt = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ExpireAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateClaimAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateClaimAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateClaimAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorDid = github_com_ixofoundation_ixo_blockchain_v5_x_iid_types.DIDFragment(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GranteeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GranteeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthType", wireType)
			}
			m.AuthType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthType |= CreateClaimAuthorizationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentQuota", wireType)
			}
			m.AgentQuota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentQuota |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxAmount = append(m.MaxAmount, types.Coin{})
			if err := m.MaxAmount[len(m.MaxAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCw20Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxCw20Payment = append(m.MaxCw20Payment, &CW20Payment{})
			if err := m.MaxCw20Payment[len(m.MaxCw20Payment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiration == nil {
				m.Expiration = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.Expiration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntentDurationNs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.IntentDurationNs, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BeforeDate == nil {
				m.BeforeDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.BeforeDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateClaimAuthorizationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateClaimAuthorizationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateClaimAuthorizationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
