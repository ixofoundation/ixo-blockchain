// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ixo/claims/v1beta1/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CollectionCreatedEvent is an event triggered on a Collection creation
type CollectionCreatedEvent struct {
	Collection *Collection `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (m *CollectionCreatedEvent) Reset()         { *m = CollectionCreatedEvent{} }
func (m *CollectionCreatedEvent) String() string { return proto.CompactTextString(m) }
func (*CollectionCreatedEvent) ProtoMessage()    {}
func (*CollectionCreatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_26b125bce36ddb45, []int{0}
}
func (m *CollectionCreatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionCreatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionCreatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionCreatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionCreatedEvent.Merge(m, src)
}
func (m *CollectionCreatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *CollectionCreatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionCreatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionCreatedEvent proto.InternalMessageInfo

func (m *CollectionCreatedEvent) GetCollection() *Collection {
	if m != nil {
		return m.Collection
	}
	return nil
}

// CollectionUpdatedEvent is an event triggered on a Collection update
type CollectionUpdatedEvent struct {
	Collection *Collection `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (m *CollectionUpdatedEvent) Reset()         { *m = CollectionUpdatedEvent{} }
func (m *CollectionUpdatedEvent) String() string { return proto.CompactTextString(m) }
func (*CollectionUpdatedEvent) ProtoMessage()    {}
func (*CollectionUpdatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_26b125bce36ddb45, []int{1}
}
func (m *CollectionUpdatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionUpdatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionUpdatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionUpdatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionUpdatedEvent.Merge(m, src)
}
func (m *CollectionUpdatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *CollectionUpdatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionUpdatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionUpdatedEvent proto.InternalMessageInfo

func (m *CollectionUpdatedEvent) GetCollection() *Collection {
	if m != nil {
		return m.Collection
	}
	return nil
}

// CollectionCreatedEvent is an event triggered on a Claim submission
type ClaimSubmittedEvent struct {
	Claim *Claim `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (m *ClaimSubmittedEvent) Reset()         { *m = ClaimSubmittedEvent{} }
func (m *ClaimSubmittedEvent) String() string { return proto.CompactTextString(m) }
func (*ClaimSubmittedEvent) ProtoMessage()    {}
func (*ClaimSubmittedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_26b125bce36ddb45, []int{2}
}
func (m *ClaimSubmittedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimSubmittedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimSubmittedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimSubmittedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimSubmittedEvent.Merge(m, src)
}
func (m *ClaimSubmittedEvent) XXX_Size() int {
	return m.Size()
}
func (m *ClaimSubmittedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimSubmittedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimSubmittedEvent proto.InternalMessageInfo

func (m *ClaimSubmittedEvent) GetClaim() *Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

// ClaimUpdatedEvent is an event triggered on a Claim update
type ClaimUpdatedEvent struct {
	Claim *Claim `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (m *ClaimUpdatedEvent) Reset()         { *m = ClaimUpdatedEvent{} }
func (m *ClaimUpdatedEvent) String() string { return proto.CompactTextString(m) }
func (*ClaimUpdatedEvent) ProtoMessage()    {}
func (*ClaimUpdatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_26b125bce36ddb45, []int{3}
}
func (m *ClaimUpdatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimUpdatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimUpdatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimUpdatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimUpdatedEvent.Merge(m, src)
}
func (m *ClaimUpdatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *ClaimUpdatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimUpdatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimUpdatedEvent proto.InternalMessageInfo

func (m *ClaimUpdatedEvent) GetClaim() *Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

// ClaimEvaluatedEvent is an event triggered on a Claim evaluation
type ClaimEvaluatedEvent struct {
	Evaluation *Evaluation `protobuf:"bytes,1,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
}

func (m *ClaimEvaluatedEvent) Reset()         { *m = ClaimEvaluatedEvent{} }
func (m *ClaimEvaluatedEvent) String() string { return proto.CompactTextString(m) }
func (*ClaimEvaluatedEvent) ProtoMessage()    {}
func (*ClaimEvaluatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_26b125bce36ddb45, []int{4}
}
func (m *ClaimEvaluatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimEvaluatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimEvaluatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimEvaluatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimEvaluatedEvent.Merge(m, src)
}
func (m *ClaimEvaluatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *ClaimEvaluatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimEvaluatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimEvaluatedEvent proto.InternalMessageInfo

func (m *ClaimEvaluatedEvent) GetEvaluation() *Evaluation {
	if m != nil {
		return m.Evaluation
	}
	return nil
}

// ClaimDisputedEvent is an event triggered on a Claim dispute
type ClaimDisputedEvent struct {
	Dispute *Dispute `protobuf:"bytes,1,opt,name=dispute,proto3" json:"dispute,omitempty"`
}

func (m *ClaimDisputedEvent) Reset()         { *m = ClaimDisputedEvent{} }
func (m *ClaimDisputedEvent) String() string { return proto.CompactTextString(m) }
func (*ClaimDisputedEvent) ProtoMessage()    {}
func (*ClaimDisputedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_26b125bce36ddb45, []int{5}
}
func (m *ClaimDisputedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimDisputedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimDisputedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimDisputedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimDisputedEvent.Merge(m, src)
}
func (m *ClaimDisputedEvent) XXX_Size() int {
	return m.Size()
}
func (m *ClaimDisputedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimDisputedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimDisputedEvent proto.InternalMessageInfo

func (m *ClaimDisputedEvent) GetDispute() *Dispute {
	if m != nil {
		return m.Dispute
	}
	return nil
}

// ClaimDisputedEvent is an event triggered on a Claim dispute
type PaymentWithdrawnEvent struct {
	Withdraw *WithdrawPaymentConstraints `protobuf:"bytes,1,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
}

func (m *PaymentWithdrawnEvent) Reset()         { *m = PaymentWithdrawnEvent{} }
func (m *PaymentWithdrawnEvent) String() string { return proto.CompactTextString(m) }
func (*PaymentWithdrawnEvent) ProtoMessage()    {}
func (*PaymentWithdrawnEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_26b125bce36ddb45, []int{6}
}
func (m *PaymentWithdrawnEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentWithdrawnEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentWithdrawnEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentWithdrawnEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentWithdrawnEvent.Merge(m, src)
}
func (m *PaymentWithdrawnEvent) XXX_Size() int {
	return m.Size()
}
func (m *PaymentWithdrawnEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentWithdrawnEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentWithdrawnEvent proto.InternalMessageInfo

func (m *PaymentWithdrawnEvent) GetWithdraw() *WithdrawPaymentConstraints {
	if m != nil {
		return m.Withdraw
	}
	return nil
}

// ClaimDisputedEvent is an event triggered on a Claim dispute
type PaymentWithdrawCreatedEvent struct {
	Withdraw *WithdrawPaymentConstraints `protobuf:"bytes,1,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
}

func (m *PaymentWithdrawCreatedEvent) Reset()         { *m = PaymentWithdrawCreatedEvent{} }
func (m *PaymentWithdrawCreatedEvent) String() string { return proto.CompactTextString(m) }
func (*PaymentWithdrawCreatedEvent) ProtoMessage()    {}
func (*PaymentWithdrawCreatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_26b125bce36ddb45, []int{7}
}
func (m *PaymentWithdrawCreatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentWithdrawCreatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentWithdrawCreatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentWithdrawCreatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentWithdrawCreatedEvent.Merge(m, src)
}
func (m *PaymentWithdrawCreatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *PaymentWithdrawCreatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentWithdrawCreatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentWithdrawCreatedEvent proto.InternalMessageInfo

func (m *PaymentWithdrawCreatedEvent) GetWithdraw() *WithdrawPaymentConstraints {
	if m != nil {
		return m.Withdraw
	}
	return nil
}

// IntentSubmittedEvent is an event triggered on an Intent submission
type IntentSubmittedEvent struct {
	Intent *Intent `protobuf:"bytes,1,opt,name=intent,proto3" json:"intent,omitempty"`
}

func (m *IntentSubmittedEvent) Reset()         { *m = IntentSubmittedEvent{} }
func (m *IntentSubmittedEvent) String() string { return proto.CompactTextString(m) }
func (*IntentSubmittedEvent) ProtoMessage()    {}
func (*IntentSubmittedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_26b125bce36ddb45, []int{8}
}
func (m *IntentSubmittedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntentSubmittedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntentSubmittedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntentSubmittedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntentSubmittedEvent.Merge(m, src)
}
func (m *IntentSubmittedEvent) XXX_Size() int {
	return m.Size()
}
func (m *IntentSubmittedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_IntentSubmittedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_IntentSubmittedEvent proto.InternalMessageInfo

func (m *IntentSubmittedEvent) GetIntent() *Intent {
	if m != nil {
		return m.Intent
	}
	return nil
}

// IntentUpdatedEvent is an event triggered on an Intent update
type IntentUpdatedEvent struct {
	Intent *Intent `protobuf:"bytes,1,opt,name=intent,proto3" json:"intent,omitempty"`
}

func (m *IntentUpdatedEvent) Reset()         { *m = IntentUpdatedEvent{} }
func (m *IntentUpdatedEvent) String() string { return proto.CompactTextString(m) }
func (*IntentUpdatedEvent) ProtoMessage()    {}
func (*IntentUpdatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_26b125bce36ddb45, []int{9}
}
func (m *IntentUpdatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntentUpdatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntentUpdatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntentUpdatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntentUpdatedEvent.Merge(m, src)
}
func (m *IntentUpdatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *IntentUpdatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_IntentUpdatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_IntentUpdatedEvent proto.InternalMessageInfo

func (m *IntentUpdatedEvent) GetIntent() *Intent {
	if m != nil {
		return m.Intent
	}
	return nil
}

func init() {
	proto.RegisterType((*CollectionCreatedEvent)(nil), "ixo.claims.v1beta1.CollectionCreatedEvent")
	proto.RegisterType((*CollectionUpdatedEvent)(nil), "ixo.claims.v1beta1.CollectionUpdatedEvent")
	proto.RegisterType((*ClaimSubmittedEvent)(nil), "ixo.claims.v1beta1.ClaimSubmittedEvent")
	proto.RegisterType((*ClaimUpdatedEvent)(nil), "ixo.claims.v1beta1.ClaimUpdatedEvent")
	proto.RegisterType((*ClaimEvaluatedEvent)(nil), "ixo.claims.v1beta1.ClaimEvaluatedEvent")
	proto.RegisterType((*ClaimDisputedEvent)(nil), "ixo.claims.v1beta1.ClaimDisputedEvent")
	proto.RegisterType((*PaymentWithdrawnEvent)(nil), "ixo.claims.v1beta1.PaymentWithdrawnEvent")
	proto.RegisterType((*PaymentWithdrawCreatedEvent)(nil), "ixo.claims.v1beta1.PaymentWithdrawCreatedEvent")
	proto.RegisterType((*IntentSubmittedEvent)(nil), "ixo.claims.v1beta1.IntentSubmittedEvent")
	proto.RegisterType((*IntentUpdatedEvent)(nil), "ixo.claims.v1beta1.IntentUpdatedEvent")
}

func init() { proto.RegisterFile("ixo/claims/v1beta1/event.proto", fileDescriptor_26b125bce36ddb45) }

var fileDescriptor_26b125bce36ddb45 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x41, 0x6f, 0x9b, 0x30,
	0x14, 0xc7, 0xc3, 0x61, 0xd9, 0xe4, 0x9d, 0xc6, 0xb2, 0x69, 0x4b, 0x24, 0x6f, 0xe2, 0xb4, 0xcb,
	0xb0, 0x92, 0x6d, 0x87, 0x5d, 0x7a, 0x28, 0x49, 0xd5, 0xa6, 0x97, 0x8a, 0x28, 0x6a, 0xd5, 0x9b,
	0x01, 0x37, 0x58, 0x05, 0x1b, 0x81, 0x21, 0xa4, 0x9f, 0xa2, 0x1f, 0xab, 0xc7, 0x1c, 0x7b, 0xac,
	0x92, 0x2f, 0x52, 0x81, 0x1d, 0x1a, 0x52, 0xa4, 0xaa, 0x55, 0x6e, 0xf8, 0xbd, 0xff, 0xff, 0xf7,
	0x7f, 0x16, 0xcf, 0x00, 0xd2, 0x9c, 0x23, 0x37, 0xc0, 0x34, 0x4c, 0x50, 0xd6, 0x77, 0x88, 0xc0,
	0x7d, 0x44, 0x32, 0xc2, 0x84, 0x19, 0xc5, 0x5c, 0x70, 0x5d, 0xa7, 0x39, 0x37, 0x65, 0xdf, 0x54,
	0xfd, 0x6e, 0x67, 0xc6, 0x67, 0xbc, 0x6c, 0xa3, 0xe2, 0x4b, 0x2a, 0xbb, 0x3f, 0x1a, 0x48, 0xca,
	0x28, 0x05, 0x4d, 0x51, 0x38, 0x15, 0xfe, 0x8d, 0xec, 0x1b, 0x17, 0xe0, 0xab, 0xc5, 0x83, 0x80,
	0xb8, 0x82, 0x72, 0x66, 0xc5, 0x04, 0x0b, 0xe2, 0x8d, 0x8a, 0x51, 0xf4, 0x03, 0x00, 0xdc, 0xaa,
	0xf3, 0x4d, 0xfb, 0xa9, 0xfd, 0xfa, 0x38, 0x80, 0xe6, 0xf3, 0xc9, 0xcc, 0x27, 0xbf, 0xbd, 0xe5,
	0xa8, 0x93, 0xa7, 0x91, 0xb7, 0x3f, 0xf2, 0x11, 0xf8, 0x6c, 0x15, 0xc2, 0x49, 0xea, 0x84, 0x54,
	0x54, 0x58, 0x04, 0xde, 0x95, 0x7e, 0x45, 0xfc, 0xde, 0x48, 0x2c, 0x8e, 0xb6, 0xd4, 0x19, 0x43,
	0xf0, 0xa9, 0x3c, 0xd7, 0x86, 0x7b, 0x35, 0x65, 0xaa, 0xa6, 0x19, 0x65, 0x38, 0x48, 0x6b, 0x97,
	0x24, 0xb2, 0xf2, 0xc2, 0x25, 0x47, 0x95, 0xca, 0xde, 0x72, 0x18, 0xa7, 0x40, 0x2f, 0xb1, 0x43,
	0x9a, 0x44, 0x69, 0x45, 0xfd, 0x07, 0xde, 0x7b, 0xb2, 0xa0, 0x90, 0xbd, 0x26, 0xa4, 0xf2, 0xd8,
	0x1b, 0xad, 0xe1, 0x82, 0x2f, 0x67, 0x78, 0x11, 0x12, 0x26, 0xce, 0xa9, 0xf0, 0xbd, 0x18, 0xcf,
	0x99, 0xe4, 0x8d, 0xc1, 0x87, 0xb9, 0xaa, 0x28, 0xa0, 0xd9, 0x04, 0xdc, 0xb8, 0x14, 0xc4, 0xe2,
	0x2c, 0x11, 0x31, 0xa6, 0x4c, 0x24, 0x76, 0xe5, 0x37, 0x28, 0xe8, 0xed, 0x84, 0xd4, 0xf6, 0x69,
	0x9f, 0x51, 0x63, 0xd0, 0x39, 0x61, 0x82, 0x30, 0xb1, 0xb3, 0x02, 0x03, 0xd0, 0xa6, 0x65, 0x5d,
	0x25, 0x74, 0x9b, 0x12, 0xa4, 0xd3, 0x56, 0x4a, 0xe3, 0x18, 0xe8, 0xb2, 0x52, 0x5b, 0x83, 0x37,
	0x90, 0x0e, 0x27, 0x77, 0x2b, 0xa8, 0x2d, 0x57, 0x50, 0x7b, 0x58, 0x41, 0xed, 0x76, 0x0d, 0x5b,
	0xcb, 0x35, 0x6c, 0xdd, 0xaf, 0x61, 0xeb, 0xf2, 0xff, 0x8c, 0x0a, 0x3f, 0x75, 0x4c, 0x97, 0x87,
	0x88, 0xe6, 0xfc, 0x8a, 0xa7, 0xcc, 0x2b, 0x7f, 0x73, 0x71, 0xfa, 0xed, 0x04, 0xdc, 0xbd, 0x76,
	0x7d, 0x4c, 0x19, 0xca, 0xfe, 0xa2, 0x7c, 0xf3, 0x5c, 0xc5, 0x22, 0x22, 0x89, 0xd3, 0x2e, 0xdf,
	0xe9, 0x9f, 0xc7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0x5a, 0x95, 0xf2, 0x34, 0x04, 0x00, 0x00,
}

func (m *CollectionCreatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionCreatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionCreatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Collection != nil {
		{
			size, err := m.Collection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CollectionUpdatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionUpdatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionUpdatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Collection != nil {
		{
			size, err := m.Collection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimSubmittedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimSubmittedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimSubmittedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimUpdatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimUpdatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimUpdatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Claim != nil {
		{
			size, err := m.Claim.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimEvaluatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimEvaluatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimEvaluatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Evaluation != nil {
		{
			size, err := m.Evaluation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimDisputedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimDisputedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimDisputedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Dispute != nil {
		{
			size, err := m.Dispute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentWithdrawnEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentWithdrawnEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentWithdrawnEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Withdraw != nil {
		{
			size, err := m.Withdraw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentWithdrawCreatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentWithdrawCreatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentWithdrawCreatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Withdraw != nil {
		{
			size, err := m.Withdraw.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IntentSubmittedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntentSubmittedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntentSubmittedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Intent != nil {
		{
			size, err := m.Intent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IntentUpdatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntentUpdatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntentUpdatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Intent != nil {
		{
			size, err := m.Intent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CollectionCreatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Collection != nil {
		l = m.Collection.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *CollectionUpdatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Collection != nil {
		l = m.Collection.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *ClaimSubmittedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *ClaimUpdatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Claim != nil {
		l = m.Claim.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *ClaimEvaluatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Evaluation != nil {
		l = m.Evaluation.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *ClaimDisputedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dispute != nil {
		l = m.Dispute.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *PaymentWithdrawnEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Withdraw != nil {
		l = m.Withdraw.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *PaymentWithdrawCreatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Withdraw != nil {
		l = m.Withdraw.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *IntentSubmittedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Intent != nil {
		l = m.Intent.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *IntentUpdatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Intent != nil {
		l = m.Intent.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CollectionCreatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionCreatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionCreatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collection == nil {
				m.Collection = &Collection{}
			}
			if err := m.Collection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionUpdatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionUpdatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionUpdatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collection == nil {
				m.Collection = &Collection{}
			}
			if err := m.Collection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimSubmittedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimSubmittedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimSubmittedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &Claim{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimUpdatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimUpdatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimUpdatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Claim == nil {
				m.Claim = &Claim{}
			}
			if err := m.Claim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimEvaluatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimEvaluatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimEvaluatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evaluation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evaluation == nil {
				m.Evaluation = &Evaluation{}
			}
			if err := m.Evaluation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimDisputedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimDisputedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimDisputedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dispute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dispute == nil {
				m.Dispute = &Dispute{}
			}
			if err := m.Dispute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentWithdrawnEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentWithdrawnEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentWithdrawnEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Withdraw == nil {
				m.Withdraw = &WithdrawPaymentConstraints{}
			}
			if err := m.Withdraw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentWithdrawCreatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentWithdrawCreatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentWithdrawCreatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Withdraw == nil {
				m.Withdraw = &WithdrawPaymentConstraints{}
			}
			if err := m.Withdraw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntentSubmittedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntentSubmittedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntentSubmittedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Intent == nil {
				m.Intent = &Intent{}
			}
			if err := m.Intent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntentUpdatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntentUpdatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntentUpdatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Intent == nil {
				m.Intent = &Intent{}
			}
			if err := m.Intent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
