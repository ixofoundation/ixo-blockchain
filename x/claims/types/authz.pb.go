// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ixo/claims/v1beta1/authz.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuthorizationType defines the types of claim authorizations that can be
// created
type CreateClaimAuthorizationType int32

const (
	CreateClaimAuthorizationType_ALL      CreateClaimAuthorizationType = 0
	CreateClaimAuthorizationType_SUBMIT   CreateClaimAuthorizationType = 1
	CreateClaimAuthorizationType_EVALUATE CreateClaimAuthorizationType = 2
)

var CreateClaimAuthorizationType_name = map[int32]string{
	0: "ALL",
	1: "SUBMIT",
	2: "EVALUATE",
}

var CreateClaimAuthorizationType_value = map[string]int32{
	"ALL":      0,
	"SUBMIT":   1,
	"EVALUATE": 2,
}

func (x CreateClaimAuthorizationType) String() string {
	return proto.EnumName(CreateClaimAuthorizationType_name, int32(x))
}

func (CreateClaimAuthorizationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{0}
}

type SubmitClaimAuthorization struct {
	// address of admin (entity admin module account)
	Admin       string                    `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	Constraints []*SubmitClaimConstraints `protobuf:"bytes,2,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (m *SubmitClaimAuthorization) Reset()         { *m = SubmitClaimAuthorization{} }
func (m *SubmitClaimAuthorization) String() string { return proto.CompactTextString(m) }
func (*SubmitClaimAuthorization) ProtoMessage()    {}
func (*SubmitClaimAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{0}
}
func (m *SubmitClaimAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitClaimAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitClaimAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitClaimAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitClaimAuthorization.Merge(m, src)
}
func (m *SubmitClaimAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *SubmitClaimAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitClaimAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitClaimAuthorization proto.InternalMessageInfo

func (m *SubmitClaimAuthorization) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *SubmitClaimAuthorization) GetConstraints() []*SubmitClaimConstraints {
	if m != nil {
		return m.Constraints
	}
	return nil
}

type SubmitClaimConstraints struct {
	// collection_id indicates to which Collection this claim belongs
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	AgentQuota   uint64 `protobuf:"varint,2,opt,name=agent_quota,json=agentQuota,proto3" json:"agent_quota,omitempty"`
	// custom max_amount allowed to be specified by service agent for claim
	// approval, if empty then no custom amount is allowed, and default payments
	// from Collection payments are used
	MaxAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=max_amount,json=maxAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"max_amount"`
	// custom max_cw20_payment allowed to be specified by service agent for claim
	// approval, if empty then no custom amount is allowed, and default payments
	// from Collection payments are used
	MaxCw20Payment []*CW20Payment `protobuf:"bytes,4,rep,name=max_cw20_payment,json=maxCw20Payment,proto3" json:"max_cw20_payment,omitempty"`
	// intent_duration_ns is the duration for which the intent is active, after
	// which it will expire (in nanoseconds)
	IntentDurationNs time.Duration `protobuf:"bytes,5,opt,name=intent_duration_ns,json=intentDurationNs,proto3,stdduration" json:"intent_duration_ns"`
}

func (m *SubmitClaimConstraints) Reset()         { *m = SubmitClaimConstraints{} }
func (m *SubmitClaimConstraints) String() string { return proto.CompactTextString(m) }
func (*SubmitClaimConstraints) ProtoMessage()    {}
func (*SubmitClaimConstraints) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{1}
}
func (m *SubmitClaimConstraints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitClaimConstraints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitClaimConstraints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitClaimConstraints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitClaimConstraints.Merge(m, src)
}
func (m *SubmitClaimConstraints) XXX_Size() int {
	return m.Size()
}
func (m *SubmitClaimConstraints) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitClaimConstraints.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitClaimConstraints proto.InternalMessageInfo

func (m *SubmitClaimConstraints) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *SubmitClaimConstraints) GetAgentQuota() uint64 {
	if m != nil {
		return m.AgentQuota
	}
	return 0
}

func (m *SubmitClaimConstraints) GetMaxAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MaxAmount
	}
	return nil
}

func (m *SubmitClaimConstraints) GetMaxCw20Payment() []*CW20Payment {
	if m != nil {
		return m.MaxCw20Payment
	}
	return nil
}

func (m *SubmitClaimConstraints) GetIntentDurationNs() time.Duration {
	if m != nil {
		return m.IntentDurationNs
	}
	return 0
}

type EvaluateClaimAuthorization struct {
	// address of admin (entity admin module account)
	Admin       string                      `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	Constraints []*EvaluateClaimConstraints `protobuf:"bytes,2,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (m *EvaluateClaimAuthorization) Reset()         { *m = EvaluateClaimAuthorization{} }
func (m *EvaluateClaimAuthorization) String() string { return proto.CompactTextString(m) }
func (*EvaluateClaimAuthorization) ProtoMessage()    {}
func (*EvaluateClaimAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{2}
}
func (m *EvaluateClaimAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateClaimAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateClaimAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateClaimAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateClaimAuthorization.Merge(m, src)
}
func (m *EvaluateClaimAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateClaimAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateClaimAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateClaimAuthorization proto.InternalMessageInfo

func (m *EvaluateClaimAuthorization) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *EvaluateClaimAuthorization) GetConstraints() []*EvaluateClaimConstraints {
	if m != nil {
		return m.Constraints
	}
	return nil
}

type EvaluateClaimConstraints struct {
	// collection_id indicates to which Collection this claim belongs
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// either collection_id or claim_ids is needed
	ClaimIds   []string `protobuf:"bytes,2,rep,name=claim_ids,json=claimIds,proto3" json:"claim_ids,omitempty"`
	AgentQuota uint64   `protobuf:"varint,3,opt,name=agent_quota,json=agentQuota,proto3" json:"agent_quota,omitempty"`
	// if null then no before_date validation done
	BeforeDate *time.Time `protobuf:"bytes,4,opt,name=before_date,json=beforeDate,proto3,stdtime" json:"before_date,omitempty"`
	// max custom amount evaluator can change, if empty then no custom amount is
	// allowed, and default payments from Collection payments are used
	MaxCustomAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,10,rep,name=max_custom_amount,json=maxCustomAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"max_custom_amount"`
	// max custom cw20 payment evaluator can change, if empty then no custom
	// amount is allowed, and default payments from Collection payments are used
	MaxCustomCw20Payment []*CW20Payment `protobuf:"bytes,11,rep,name=max_custom_cw20_payment,json=maxCustomCw20Payment,proto3" json:"max_custom_cw20_payment,omitempty"`
}

func (m *EvaluateClaimConstraints) Reset()         { *m = EvaluateClaimConstraints{} }
func (m *EvaluateClaimConstraints) String() string { return proto.CompactTextString(m) }
func (*EvaluateClaimConstraints) ProtoMessage()    {}
func (*EvaluateClaimConstraints) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{3}
}
func (m *EvaluateClaimConstraints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateClaimConstraints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateClaimConstraints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateClaimConstraints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateClaimConstraints.Merge(m, src)
}
func (m *EvaluateClaimConstraints) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateClaimConstraints) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateClaimConstraints.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateClaimConstraints proto.InternalMessageInfo

func (m *EvaluateClaimConstraints) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *EvaluateClaimConstraints) GetClaimIds() []string {
	if m != nil {
		return m.ClaimIds
	}
	return nil
}

func (m *EvaluateClaimConstraints) GetAgentQuota() uint64 {
	if m != nil {
		return m.AgentQuota
	}
	return 0
}

func (m *EvaluateClaimConstraints) GetBeforeDate() *time.Time {
	if m != nil {
		return m.BeforeDate
	}
	return nil
}

func (m *EvaluateClaimConstraints) GetMaxCustomAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MaxCustomAmount
	}
	return nil
}

func (m *EvaluateClaimConstraints) GetMaxCustomCw20Payment() []*CW20Payment {
	if m != nil {
		return m.MaxCustomCw20Payment
	}
	return nil
}

type WithdrawPaymentAuthorization struct {
	// address of admin
	Admin       string                        `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	Constraints []*WithdrawPaymentConstraints `protobuf:"bytes,2,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (m *WithdrawPaymentAuthorization) Reset()         { *m = WithdrawPaymentAuthorization{} }
func (m *WithdrawPaymentAuthorization) String() string { return proto.CompactTextString(m) }
func (*WithdrawPaymentAuthorization) ProtoMessage()    {}
func (*WithdrawPaymentAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{4}
}
func (m *WithdrawPaymentAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawPaymentAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawPaymentAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawPaymentAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawPaymentAuthorization.Merge(m, src)
}
func (m *WithdrawPaymentAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawPaymentAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawPaymentAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawPaymentAuthorization proto.InternalMessageInfo

func (m *WithdrawPaymentAuthorization) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *WithdrawPaymentAuthorization) GetConstraints() []*WithdrawPaymentConstraints {
	if m != nil {
		return m.Constraints
	}
	return nil
}

type WithdrawPaymentConstraints struct {
	// claim_id the withdrawal is for
	ClaimId string `protobuf:"bytes,1,opt,name=claim_id,json=claimId,proto3" json:"claim_id,omitempty"`
	// Inputs to the multisend tx to run to withdraw payment
	Inputs []types1.Input `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs"`
	// Outputs for the multisend tx to run to withdraw payment
	Outputs []types1.Output `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs"`
	// payment type to keep track what payment is for and mark claim payment
	// accordingly
	PaymentType PaymentType `protobuf:"varint,4,opt,name=payment_type,json=paymentType,proto3,enum=ixo.claims.v1beta1.PaymentType" json:"payment_type,omitempty"`
	// if empty(nil) then no contract payment
	Contract_1155Payment *Contract1155Payment `protobuf:"bytes,5,opt,name=contract_1155_payment,json=contract1155Payment,proto3" json:"contract_1155_payment,omitempty"`
	// for contract payment
	ToAddress string `protobuf:"bytes,6,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	// for contract payment
	FromAddress string `protobuf:"bytes,7,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	// date that grantee can execute authorization, calculated from created date
	// plus the timeout on Collection payments, if null then none
	ReleaseDate *time.Time `protobuf:"bytes,8,opt,name=release_date,json=releaseDate,proto3,stdtime" json:"release_date,omitempty"`
	// cw20 payments, can be empty or multiple
	Cw20Payment []*CW20Payment `protobuf:"bytes,9,rep,name=cw20_payment,json=cw20Payment,proto3" json:"cw20_payment,omitempty"`
}

func (m *WithdrawPaymentConstraints) Reset()         { *m = WithdrawPaymentConstraints{} }
func (m *WithdrawPaymentConstraints) String() string { return proto.CompactTextString(m) }
func (*WithdrawPaymentConstraints) ProtoMessage()    {}
func (*WithdrawPaymentConstraints) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{5}
}
func (m *WithdrawPaymentConstraints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawPaymentConstraints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawPaymentConstraints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawPaymentConstraints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawPaymentConstraints.Merge(m, src)
}
func (m *WithdrawPaymentConstraints) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawPaymentConstraints) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawPaymentConstraints.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawPaymentConstraints proto.InternalMessageInfo

func (m *WithdrawPaymentConstraints) GetClaimId() string {
	if m != nil {
		return m.ClaimId
	}
	return ""
}

func (m *WithdrawPaymentConstraints) GetInputs() []types1.Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *WithdrawPaymentConstraints) GetOutputs() []types1.Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *WithdrawPaymentConstraints) GetPaymentType() PaymentType {
	if m != nil {
		return m.PaymentType
	}
	return PaymentType_submission
}

func (m *WithdrawPaymentConstraints) GetContract_1155Payment() *Contract1155Payment {
	if m != nil {
		return m.Contract_1155Payment
	}
	return nil
}

func (m *WithdrawPaymentConstraints) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *WithdrawPaymentConstraints) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *WithdrawPaymentConstraints) GetReleaseDate() *time.Time {
	if m != nil {
		return m.ReleaseDate
	}
	return nil
}

func (m *WithdrawPaymentConstraints) GetCw20Payment() []*CW20Payment {
	if m != nil {
		return m.Cw20Payment
	}
	return nil
}

// CreateClaimAuthorizationAuthorization allows a grantee to create
// SubmitClaimAuthorization and EvaluateClaimAuthorization for specific
// collections(constraints)
type CreateClaimAuthorizationAuthorization struct {
	// address of admin (entity admin module account)
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// Constraints on the authorizations that can be created
	Constraints []*CreateClaimAuthorizationConstraints `protobuf:"bytes,2,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (m *CreateClaimAuthorizationAuthorization) Reset()         { *m = CreateClaimAuthorizationAuthorization{} }
func (m *CreateClaimAuthorizationAuthorization) String() string { return proto.CompactTextString(m) }
func (*CreateClaimAuthorizationAuthorization) ProtoMessage()    {}
func (*CreateClaimAuthorizationAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{6}
}
func (m *CreateClaimAuthorizationAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateClaimAuthorizationAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateClaimAuthorizationAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateClaimAuthorizationAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClaimAuthorizationAuthorization.Merge(m, src)
}
func (m *CreateClaimAuthorizationAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *CreateClaimAuthorizationAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClaimAuthorizationAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClaimAuthorizationAuthorization proto.InternalMessageInfo

func (m *CreateClaimAuthorizationAuthorization) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *CreateClaimAuthorizationAuthorization) GetConstraints() []*CreateClaimAuthorizationConstraints {
	if m != nil {
		return m.Constraints
	}
	return nil
}

// CreateClaimAuthorizationConstraints defines the constraints for creating
// claim authorizations
type CreateClaimAuthorizationConstraints struct {
	// Maximum number of authorizations that can be created through this
	// meta-authorization, 0 means no quota
	MaxAuthorizations uint64 `protobuf:"varint,1,opt,name=max_authorizations,json=maxAuthorizations,proto3" json:"max_authorizations,omitempty"`
	// Maximum quota that can be set in created authorizations
	// 0 means no quota maximum quota per authorization
	MaxAgentQuota uint64 `protobuf:"varint,2,opt,name=max_agent_quota,json=maxAgentQuota,proto3" json:"max_agent_quota,omitempty"`
	// Maximum amount that can be set in created authorizations,
	// if empty then any custom amount is allowed in the created authorizations
	// explicitly set to 0 to disallow any custom amount in the created
	// authorizations
	MaxAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=max_amount,json=maxAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"max_amount"`
	// Maximum cw20 payment that can be set in created authorizations,
	// if empty then any cw20 payment is allowed in the created authorizations
	// explicitly set to 0 to disallow any cw20 payment in the created
	// authorizations
	MaxCw20Payment []*CW20Payment `protobuf:"bytes,4,rep,name=max_cw20_payment,json=maxCw20Payment,proto3" json:"max_cw20_payment,omitempty"`
	// Expiration of this meta-authorization(specific constraint), if not set then
	// no expiration
	Expiration *time.Time `protobuf:"bytes,5,opt,name=expiration,proto3,stdtime" json:"expiration,omitempty"`
	// Collection IDs the grantee can create authorizations for, if empty then all
	// collections for the admin are allowed
	CollectionIds []string `protobuf:"bytes,6,rep,name=collection_ids,json=collectionIds,proto3" json:"collection_ids,omitempty"`
	// Types of authorizations the grantee can create (submit, evaluate, or
	// all(both))
	AllowedAuthTypes CreateClaimAuthorizationType `protobuf:"varint,7,opt,name=allowed_auth_types,json=allowedAuthTypes,proto3,enum=ixo.claims.v1beta1.CreateClaimAuthorizationType" json:"allowed_auth_types,omitempty"`
	// Maximum intent duration for the authorization allowed (for submit)
	MaxIntentDurationNs time.Duration `protobuf:"bytes,8,opt,name=max_intent_duration_ns,json=maxIntentDurationNs,proto3,stdduration" json:"max_intent_duration_ns"`
}

func (m *CreateClaimAuthorizationConstraints) Reset()         { *m = CreateClaimAuthorizationConstraints{} }
func (m *CreateClaimAuthorizationConstraints) String() string { return proto.CompactTextString(m) }
func (*CreateClaimAuthorizationConstraints) ProtoMessage()    {}
func (*CreateClaimAuthorizationConstraints) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{7}
}
func (m *CreateClaimAuthorizationConstraints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateClaimAuthorizationConstraints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateClaimAuthorizationConstraints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateClaimAuthorizationConstraints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClaimAuthorizationConstraints.Merge(m, src)
}
func (m *CreateClaimAuthorizationConstraints) XXX_Size() int {
	return m.Size()
}
func (m *CreateClaimAuthorizationConstraints) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClaimAuthorizationConstraints.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClaimAuthorizationConstraints proto.InternalMessageInfo

func (m *CreateClaimAuthorizationConstraints) GetMaxAuthorizations() uint64 {
	if m != nil {
		return m.MaxAuthorizations
	}
	return 0
}

func (m *CreateClaimAuthorizationConstraints) GetMaxAgentQuota() uint64 {
	if m != nil {
		return m.MaxAgentQuota
	}
	return 0
}

func (m *CreateClaimAuthorizationConstraints) GetMaxAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MaxAmount
	}
	return nil
}

func (m *CreateClaimAuthorizationConstraints) GetMaxCw20Payment() []*CW20Payment {
	if m != nil {
		return m.MaxCw20Payment
	}
	return nil
}

func (m *CreateClaimAuthorizationConstraints) GetExpiration() *time.Time {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (m *CreateClaimAuthorizationConstraints) GetCollectionIds() []string {
	if m != nil {
		return m.CollectionIds
	}
	return nil
}

func (m *CreateClaimAuthorizationConstraints) GetAllowedAuthTypes() CreateClaimAuthorizationType {
	if m != nil {
		return m.AllowedAuthTypes
	}
	return CreateClaimAuthorizationType_ALL
}

func (m *CreateClaimAuthorizationConstraints) GetMaxIntentDurationNs() time.Duration {
	if m != nil {
		return m.MaxIntentDurationNs
	}
	return 0
}

func init() {
	proto.RegisterEnum("ixo.claims.v1beta1.CreateClaimAuthorizationType", CreateClaimAuthorizationType_name, CreateClaimAuthorizationType_value)
	proto.RegisterType((*SubmitClaimAuthorization)(nil), "ixo.claims.v1beta1.SubmitClaimAuthorization")
	proto.RegisterType((*SubmitClaimConstraints)(nil), "ixo.claims.v1beta1.SubmitClaimConstraints")
	proto.RegisterType((*EvaluateClaimAuthorization)(nil), "ixo.claims.v1beta1.EvaluateClaimAuthorization")
	proto.RegisterType((*EvaluateClaimConstraints)(nil), "ixo.claims.v1beta1.EvaluateClaimConstraints")
	proto.RegisterType((*WithdrawPaymentAuthorization)(nil), "ixo.claims.v1beta1.WithdrawPaymentAuthorization")
	proto.RegisterType((*WithdrawPaymentConstraints)(nil), "ixo.claims.v1beta1.WithdrawPaymentConstraints")
	proto.RegisterType((*CreateClaimAuthorizationAuthorization)(nil), "ixo.claims.v1beta1.CreateClaimAuthorizationAuthorization")
	proto.RegisterType((*CreateClaimAuthorizationConstraints)(nil), "ixo.claims.v1beta1.CreateClaimAuthorizationConstraints")
}

func init() { proto.RegisterFile("ixo/claims/v1beta1/authz.proto", fileDescriptor_f4b7f6c531e101a6) }

var fileDescriptor_f4b7f6c531e101a6 = []byte{
	// 1044 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4d, 0x4f, 0x1b, 0x47,
	0x18, 0x66, 0xc1, 0x01, 0xfb, 0x35, 0x21, 0xee, 0x84, 0xa6, 0xc6, 0x41, 0x36, 0x22, 0x4a, 0x8a,
	0xa2, 0xb2, 0x0b, 0xb4, 0x51, 0xbf, 0x2e, 0xb5, 0x1d, 0x0e, 0x96, 0x68, 0x9a, 0x2c, 0x24, 0xe9,
	0x87, 0xd4, 0xd5, 0x78, 0x77, 0x30, 0x53, 0xbc, 0x3b, 0xee, 0xce, 0x2c, 0x98, 0xfc, 0x8a, 0xf4,
	0x96, 0x5f, 0xd0, 0x43, 0x0e, 0x3d, 0xf5, 0x07, 0xf4, 0x18, 0xf5, 0x94, 0x53, 0xd5, 0x53, 0x53,
	0xc1, 0xa5, 0x3f, 0xa3, 0x9a, 0xd9, 0x59, 0x7f, 0xe0, 0xa5, 0xda, 0x8a, 0x5e, 0x7a, 0xb2, 0xe7,
	0xfd, 0x78, 0xe6, 0x99, 0xf7, 0x7d, 0xde, 0x99, 0x85, 0x2a, 0xed, 0x33, 0xcb, 0xed, 0x62, 0xea,
	0x73, 0xeb, 0x68, 0xb3, 0x4d, 0x04, 0xde, 0xb4, 0x70, 0x24, 0x0e, 0x9e, 0x99, 0xbd, 0x90, 0x09,
	0x86, 0x10, 0xed, 0x33, 0x33, 0xf6, 0x9b, 0xda, 0x5f, 0x59, 0xec, 0xb0, 0x0e, 0x53, 0x6e, 0x4b,
	0xfe, 0x8b, 0x23, 0x2b, 0x4b, 0x2e, 0xe3, 0x3e, 0xe3, 0x4e, 0xec, 0x88, 0x17, 0xda, 0x55, 0xeb,
	0x30, 0xd6, 0xe9, 0x12, 0x4b, 0xad, 0xda, 0xd1, 0xbe, 0x25, 0xa8, 0x4f, 0xb8, 0xc0, 0x7e, 0x4f,
	0x07, 0x54, 0xe3, 0x70, 0xab, 0x8d, 0x39, 0x19, 0xd0, 0x70, 0x19, 0x0d, 0x12, 0x80, 0x14, 0x96,
	0x9a, 0x94, 0x06, 0x38, 0xbf, 0x83, 0x17, 0x85, 0x58, 0x50, 0x16, 0x4c, 0x6c, 0x10, 0x1c, 0x0e,
	0x10, 0xe4, 0x22, 0xf6, 0xaf, 0xfe, 0x68, 0x40, 0x79, 0x37, 0x6a, 0xfb, 0x54, 0x34, 0x25, 0x6c,
	0x3d, 0x12, 0x07, 0x2c, 0xa4, 0xcf, 0x14, 0x04, 0x5a, 0x84, 0x2b, 0xd8, 0xf3, 0x69, 0x50, 0x36,
	0x56, 0x8c, 0xb5, 0x82, 0x1d, 0x2f, 0xd0, 0x0e, 0x14, 0x5d, 0x16, 0x70, 0x11, 0x62, 0x1a, 0x08,
	0x5e, 0x9e, 0x5e, 0x99, 0x59, 0x2b, 0x6e, 0xdd, 0x35, 0x27, 0xeb, 0x65, 0x8e, 0x00, 0x37, 0x87,
	0x19, 0xf6, 0x68, 0xfa, 0x27, 0x77, 0x7e, 0xfd, 0x79, 0x7d, 0x55, 0x17, 0x2d, 0xae, 0x7f, 0x92,
	0x3d, 0xc6, 0x65, 0xf5, 0xaf, 0x69, 0xb8, 0x91, 0x8e, 0x87, 0x6e, 0xc1, 0x55, 0x97, 0x75, 0xbb,
	0xc4, 0x95, 0x81, 0x0e, 0xf5, 0x34, 0xdd, 0xf9, 0xa1, 0xb1, 0xe5, 0xa1, 0x1a, 0x14, 0x71, 0x87,
	0x04, 0xc2, 0xf9, 0x3e, 0x62, 0x02, 0x97, 0xa7, 0x57, 0x8c, 0xb5, 0x9c, 0x0d, 0xca, 0xf4, 0x48,
	0x5a, 0xd0, 0x77, 0x00, 0x3e, 0xee, 0x3b, 0xd8, 0x67, 0x51, 0x20, 0xca, 0x33, 0xea, 0x54, 0x4b,
	0xa6, 0x66, 0x26, 0xfb, 0x33, 0x20, 0xd6, 0x64, 0x34, 0x68, 0x6c, 0xbc, 0xfa, 0xa3, 0x36, 0xf5,
	0xf2, 0x4d, 0x6d, 0xad, 0x43, 0xc5, 0x41, 0xd4, 0x36, 0x5d, 0xe6, 0xeb, 0xde, 0xeb, 0x9f, 0x75,
	0xee, 0x1d, 0x5a, 0xe2, 0xa4, 0x47, 0xb8, 0x4a, 0xe0, 0x76, 0xc1, 0xc7, 0xfd, 0xba, 0x42, 0x47,
	0x2d, 0x28, 0xc9, 0xbd, 0xdc, 0xe3, 0xad, 0x0d, 0xa7, 0x87, 0x4f, 0x7c, 0x12, 0x88, 0x72, 0x4e,
	0xed, 0x58, 0x4b, 0xab, 0x63, 0xf3, 0xe9, 0xd6, 0xc6, 0xc3, 0x38, 0xcc, 0x5e, 0xf0, 0x71, 0xbf,
	0x79, 0x3c, 0x58, 0xa3, 0x47, 0x80, 0x68, 0x20, 0xe4, 0xc1, 0x92, 0xce, 0x3b, 0x01, 0x2f, 0x5f,
	0x59, 0x31, 0x14, 0xfd, 0x58, 0x1d, 0x66, 0xa2, 0x0e, 0xf3, 0xbe, 0x8e, 0x69, 0xe4, 0x25, 0xfd,
	0x17, 0x6f, 0x6a, 0x86, 0x5d, 0x8a, 0xd3, 0x13, 0xcf, 0x03, 0xbe, 0xfa, 0xd2, 0x80, 0xca, 0xf6,
	0x11, 0xee, 0x46, 0x58, 0x90, 0xcc, 0xaa, 0x78, 0x90, 0xa6, 0x8a, 0xf7, 0xd2, 0x4e, 0x33, 0x06,
	0x7d, 0x69, 0x5d, 0xfc, 0x30, 0x03, 0xe5, 0x8b, 0x10, 0xb3, 0x29, 0xe3, 0x26, 0x14, 0x14, 0x43,
	0x87, 0x7a, 0x31, 0xef, 0x82, 0x9d, 0x57, 0x86, 0x96, 0xc7, 0xcf, 0xcb, 0x66, 0x66, 0x42, 0x36,
	0x75, 0x28, 0xb6, 0xc9, 0x3e, 0x0b, 0x89, 0xe3, 0x61, 0x41, 0xca, 0x39, 0x55, 0xf8, 0xca, 0x44,
	0xe1, 0xf7, 0x92, 0xc1, 0x6f, 0xe4, 0x9e, 0xcb, 0xaa, 0x43, 0x9c, 0x74, 0x1f, 0x0b, 0x82, 0x8e,
	0xe1, 0x2d, 0xa5, 0x86, 0x88, 0x0b, 0xe6, 0x27, 0x02, 0x84, 0xff, 0x5e, 0x80, 0xd7, 0xa4, 0x74,
	0xd4, 0x26, 0x5a, 0x86, 0x4f, 0xe0, 0x9d, 0x91, 0x8d, 0xc7, 0xd4, 0x58, 0xcc, 0xa6, 0xc6, 0xc5,
	0x01, 0xe4, 0x88, 0x26, 0x57, 0x7f, 0x32, 0x60, 0xf9, 0x29, 0x15, 0x07, 0x5e, 0x88, 0x8f, 0xb5,
	0x2d, 0x8b, 0x84, 0x1e, 0xa6, 0x49, 0xc8, 0x4c, 0xa3, 0x70, 0x0e, 0xfc, 0xd2, 0x22, 0x7a, 0x91,
	0x83, 0xca, 0xc5, 0x98, 0x68, 0x09, 0xf2, 0x89, 0x42, 0x34, 0xe3, 0x39, 0x2d, 0x10, 0xf4, 0x11,
	0xcc, 0xd2, 0xa0, 0x17, 0x0d, 0xe8, 0x56, 0x86, 0x0d, 0x0b, 0x0e, 0x07, 0xbb, 0xb5, 0x64, 0x48,
	0x23, 0x27, 0x3b, 0x66, 0xeb, 0x78, 0xf4, 0x29, 0xcc, 0xb1, 0x48, 0xa8, 0xd4, 0xf8, 0xb2, 0xb9,
	0x99, 0x9a, 0xfa, 0x85, 0x8a, 0xd1, 0xb9, 0x49, 0x06, 0x6a, 0xc0, 0xbc, 0xee, 0x94, 0x23, 0x3b,
	0xac, 0x64, 0xb7, 0x90, 0xde, 0x2e, 0x7d, 0x9e, 0xbd, 0x93, 0x1e, 0xb1, 0x8b, 0xbd, 0xe1, 0x02,
	0x7d, 0x03, 0x6f, 0xbb, 0x2c, 0x10, 0x21, 0x76, 0x85, 0xb3, 0xb9, 0x79, 0xef, 0xde, 0xa0, 0xf7,
	0xf1, 0xe5, 0xf1, 0x6e, 0x6a, 0xef, 0x75, 0x82, 0x8c, 0x4f, 0x34, 0x70, 0xdd, 0x9d, 0x34, 0xa2,
	0x65, 0x28, 0x08, 0x56, 0xf7, 0xbc, 0x90, 0x70, 0x5e, 0x9e, 0x55, 0x35, 0x1b, 0x1a, 0xd0, 0x0a,
	0x14, 0xf7, 0x43, 0xe6, 0x27, 0xfe, 0x39, 0xe5, 0x1f, 0x35, 0xa1, 0x26, 0xcc, 0x87, 0xa4, 0x4b,
	0x30, 0xd7, 0x73, 0x95, 0xcf, 0x38, 0x57, 0x45, 0x9d, 0xa5, 0x06, 0xab, 0x01, 0xf3, 0x63, 0xa2,
	0x2e, 0x64, 0x13, 0x75, 0xd1, 0x1d, 0xd1, 0xf2, 0x2f, 0x06, 0xdc, 0x6e, 0x86, 0x24, 0xf5, 0x2a,
	0xcc, 0x22, 0xea, 0xaf, 0xd2, 0x44, 0xfd, 0x61, 0x2a, 0x85, 0x0b, 0x76, 0xb9, 0xb4, 0xba, 0x7f,
	0xcb, 0xc1, 0xad, 0x0c, 0xe0, 0x68, 0x1d, 0x90, 0x7a, 0x01, 0x47, 0xfd, 0x5c, 0x9d, 0x26, 0x67,
	0xcb, 0x1b, 0x6a, 0x2c, 0x91, 0xa3, 0x3b, 0x70, 0x4d, 0x85, 0x4f, 0xbc, 0xaa, 0x57, 0x65, 0xec,
	0xff, 0xfe, 0x61, 0xfd, 0x0c, 0x80, 0xf4, 0x7b, 0x34, 0x7e, 0x15, 0xf5, 0x4c, 0x64, 0xb8, 0xd7,
	0x87, 0x39, 0xe8, 0x36, 0x2c, 0x8c, 0xbd, 0x3e, 0x72, 0x10, 0xe4, 0xeb, 0x72, 0x75, 0xf4, 0xf9,
	0xe1, 0xe8, 0x5b, 0x40, 0xb8, 0xdb, 0x65, 0xc7, 0xc4, 0x53, 0xa5, 0x57, 0x03, 0x1d, 0xcf, 0xc4,
	0xc2, 0xd6, 0xc6, 0xbf, 0x11, 0x8a, 0x1a, 0xf1, 0x92, 0xc6, 0x92, 0x1e, 0x69, 0xe0, 0xe8, 0x4b,
	0xb8, 0x21, 0x6b, 0x92, 0xf2, 0x95, 0x90, 0xcf, 0xfe, 0x95, 0x70, 0xdd, 0xc7, 0xfd, 0xd6, 0xb9,
	0x0f, 0x85, 0xbb, 0x75, 0x58, 0xfe, 0x27, 0x2e, 0x68, 0x0e, 0x66, 0xea, 0x3b, 0x3b, 0xa5, 0x29,
	0x04, 0x30, 0xbb, 0xfb, 0xb8, 0xf1, 0x79, 0x6b, 0xaf, 0x64, 0xa0, 0x79, 0xc8, 0x6f, 0x3f, 0xa9,
	0xef, 0x3c, 0xae, 0xef, 0x6d, 0x97, 0xa6, 0x1b, 0xbb, 0xaf, 0x4e, 0xab, 0xc6, 0xeb, 0xd3, 0xaa,
	0xf1, 0xe7, 0x69, 0xd5, 0x78, 0x7e, 0x56, 0x9d, 0x7a, 0x7d, 0x56, 0x9d, 0xfa, 0xfd, 0xac, 0x3a,
	0xf5, 0xf5, 0xc7, 0x23, 0xfd, 0xa7, 0x7d, 0xb6, 0xcf, 0xa2, 0xc0, 0x53, 0xd0, 0x72, 0xb5, 0xde,
	0xee, 0x32, 0xf7, 0xd0, 0x3d, 0xc0, 0x34, 0xb0, 0x8e, 0x3e, 0xb0, 0xfa, 0xc9, 0x37, 0xb2, 0xaa,
	0x5d, 0x7b, 0x56, 0x9d, 0xe4, 0xfd, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x94, 0xfc, 0x62, 0x5a,
	0xe4, 0x0b, 0x00, 0x00,
}

func (m *SubmitClaimAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitClaimAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitClaimAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Constraints) > 0 {
		for iNdEx := len(m.Constraints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Constraints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitClaimConstraints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitClaimConstraints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitClaimConstraints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.IntentDurationNs, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.IntentDurationNs):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintAuthz(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	if len(m.MaxCw20Payment) > 0 {
		for iNdEx := len(m.MaxCw20Payment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxCw20Payment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MaxAmount) > 0 {
		for iNdEx := len(m.MaxAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.AgentQuota != 0 {
		i = encodeVarintAuthz(dAtA, i, uint64(m.AgentQuota))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateClaimAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateClaimAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateClaimAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Constraints) > 0 {
		for iNdEx := len(m.Constraints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Constraints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateClaimConstraints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateClaimConstraints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateClaimConstraints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxCustomCw20Payment) > 0 {
		for iNdEx := len(m.MaxCustomCw20Payment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxCustomCw20Payment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.MaxCustomAmount) > 0 {
		for iNdEx := len(m.MaxCustomAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxCustomAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.BeforeDate != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.BeforeDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.BeforeDate):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintAuthz(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x22
	}
	if m.AgentQuota != 0 {
		i = encodeVarintAuthz(dAtA, i, uint64(m.AgentQuota))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ClaimIds) > 0 {
		for iNdEx := len(m.ClaimIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClaimIds[iNdEx])
			copy(dAtA[i:], m.ClaimIds[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.ClaimIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawPaymentAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawPaymentAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawPaymentAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Constraints) > 0 {
		for iNdEx := len(m.Constraints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Constraints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawPaymentConstraints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawPaymentConstraints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawPaymentConstraints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cw20Payment) > 0 {
		for iNdEx := len(m.Cw20Payment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cw20Payment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.ReleaseDate != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ReleaseDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ReleaseDate):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintAuthz(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x42
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.Contract_1155Payment != nil {
		{
			size, err := m.Contract_1155Payment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PaymentType != 0 {
		i = encodeVarintAuthz(dAtA, i, uint64(m.PaymentType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Outputs) > 0 {
		for iNdEx := len(m.Outputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClaimId) > 0 {
		i -= len(m.ClaimId)
		copy(dAtA[i:], m.ClaimId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.ClaimId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateClaimAuthorizationAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClaimAuthorizationAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateClaimAuthorizationAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Constraints) > 0 {
		for iNdEx := len(m.Constraints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Constraints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateClaimAuthorizationConstraints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClaimAuthorizationConstraints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateClaimAuthorizationConstraints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n5, err5 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.MaxIntentDurationNs, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MaxIntentDurationNs):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintAuthz(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x42
	if m.AllowedAuthTypes != 0 {
		i = encodeVarintAuthz(dAtA, i, uint64(m.AllowedAuthTypes))
		i--
		dAtA[i] = 0x38
	}
	if len(m.CollectionIds) > 0 {
		for iNdEx := len(m.CollectionIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CollectionIds[iNdEx])
			copy(dAtA[i:], m.CollectionIds[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.CollectionIds[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Expiration != nil {
		n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.Expiration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Expiration):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintAuthz(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MaxCw20Payment) > 0 {
		for iNdEx := len(m.MaxCw20Payment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxCw20Payment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.MaxAmount) > 0 {
		for iNdEx := len(m.MaxAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MaxAgentQuota != 0 {
		i = encodeVarintAuthz(dAtA, i, uint64(m.MaxAgentQuota))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxAuthorizations != 0 {
		i = encodeVarintAuthz(dAtA, i, uint64(m.MaxAuthorizations))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuthz(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthz(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubmitClaimAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.Constraints) > 0 {
		for _, e := range m.Constraints {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *SubmitClaimConstraints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if m.AgentQuota != 0 {
		n += 1 + sovAuthz(uint64(m.AgentQuota))
	}
	if len(m.MaxAmount) > 0 {
		for _, e := range m.MaxAmount {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	if len(m.MaxCw20Payment) > 0 {
		for _, e := range m.MaxCw20Payment {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.IntentDurationNs)
	n += 1 + l + sovAuthz(uint64(l))
	return n
}

func (m *EvaluateClaimAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.Constraints) > 0 {
		for _, e := range m.Constraints {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *EvaluateClaimConstraints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.ClaimIds) > 0 {
		for _, s := range m.ClaimIds {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	if m.AgentQuota != 0 {
		n += 1 + sovAuthz(uint64(m.AgentQuota))
	}
	if m.BeforeDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.BeforeDate)
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.MaxCustomAmount) > 0 {
		for _, e := range m.MaxCustomAmount {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	if len(m.MaxCustomCw20Payment) > 0 {
		for _, e := range m.MaxCustomCw20Payment {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *WithdrawPaymentAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.Constraints) > 0 {
		for _, e := range m.Constraints {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *WithdrawPaymentConstraints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClaimId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	if m.PaymentType != 0 {
		n += 1 + sovAuthz(uint64(m.PaymentType))
	}
	if m.Contract_1155Payment != nil {
		l = m.Contract_1155Payment.Size()
		n += 1 + l + sovAuthz(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if m.ReleaseDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ReleaseDate)
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.Cw20Payment) > 0 {
		for _, e := range m.Cw20Payment {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *CreateClaimAuthorizationAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.Constraints) > 0 {
		for _, e := range m.Constraints {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *CreateClaimAuthorizationConstraints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxAuthorizations != 0 {
		n += 1 + sovAuthz(uint64(m.MaxAuthorizations))
	}
	if m.MaxAgentQuota != 0 {
		n += 1 + sovAuthz(uint64(m.MaxAgentQuota))
	}
	if len(m.MaxAmount) > 0 {
		for _, e := range m.MaxAmount {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	if len(m.MaxCw20Payment) > 0 {
		for _, e := range m.MaxCw20Payment {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	if m.Expiration != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.Expiration)
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.CollectionIds) > 0 {
		for _, s := range m.CollectionIds {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	if m.AllowedAuthTypes != 0 {
		n += 1 + sovAuthz(uint64(m.AllowedAuthTypes))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MaxIntentDurationNs)
	n += 1 + l + sovAuthz(uint64(l))
	return n
}

func sovAuthz(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuthz(x uint64) (n int) {
	return sovAuthz(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubmitClaimAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitClaimAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitClaimAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constraints = append(m.Constraints, &SubmitClaimConstraints{})
			if err := m.Constraints[len(m.Constraints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitClaimConstraints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitClaimConstraints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitClaimConstraints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentQuota", wireType)
			}
			m.AgentQuota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentQuota |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxAmount = append(m.MaxAmount, types.Coin{})
			if err := m.MaxAmount[len(m.MaxAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCw20Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxCw20Payment = append(m.MaxCw20Payment, &CW20Payment{})
			if err := m.MaxCw20Payment[len(m.MaxCw20Payment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntentDurationNs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.IntentDurationNs, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateClaimAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateClaimAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateClaimAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constraints = append(m.Constraints, &EvaluateClaimConstraints{})
			if err := m.Constraints[len(m.Constraints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateClaimConstraints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateClaimConstraints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateClaimConstraints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimIds = append(m.ClaimIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentQuota", wireType)
			}
			m.AgentQuota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentQuota |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BeforeDate == nil {
				m.BeforeDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.BeforeDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCustomAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxCustomAmount = append(m.MaxCustomAmount, types.Coin{})
			if err := m.MaxCustomAmount[len(m.MaxCustomAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCustomCw20Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxCustomCw20Payment = append(m.MaxCustomCw20Payment, &CW20Payment{})
			if err := m.MaxCustomCw20Payment[len(m.MaxCustomCw20Payment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawPaymentAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawPaymentAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawPaymentAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constraints = append(m.Constraints, &WithdrawPaymentConstraints{})
			if err := m.Constraints[len(m.Constraints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawPaymentConstraints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawPaymentConstraints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawPaymentConstraints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, types1.Input{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, types1.Output{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			m.PaymentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentType |= PaymentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract_1155Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contract_1155Payment == nil {
				m.Contract_1155Payment = &Contract1155Payment{}
			}
			if err := m.Contract_1155Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReleaseDate == nil {
				m.ReleaseDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ReleaseDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20Payment = append(m.Cw20Payment, &CW20Payment{})
			if err := m.Cw20Payment[len(m.Cw20Payment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClaimAuthorizationAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClaimAuthorizationAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClaimAuthorizationAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constraints = append(m.Constraints, &CreateClaimAuthorizationConstraints{})
			if err := m.Constraints[len(m.Constraints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClaimAuthorizationConstraints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClaimAuthorizationConstraints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClaimAuthorizationConstraints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAuthorizations", wireType)
			}
			m.MaxAuthorizations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAuthorizations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAgentQuota", wireType)
			}
			m.MaxAgentQuota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAgentQuota |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxAmount = append(m.MaxAmount, types.Coin{})
			if err := m.MaxAmount[len(m.MaxAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCw20Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxCw20Payment = append(m.MaxCw20Payment, &CW20Payment{})
			if err := m.MaxCw20Payment[len(m.MaxCw20Payment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiration == nil {
				m.Expiration = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.Expiration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionIds = append(m.CollectionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedAuthTypes", wireType)
			}
			m.AllowedAuthTypes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowedAuthTypes |= CreateClaimAuthorizationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxIntentDurationNs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.MaxIntentDurationNs, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthz(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthz
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthz
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthz
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthz        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthz          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthz = fmt.Errorf("proto: unexpected end of group")
)
