// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ixo/claims/v1beta1/authz.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EvaluateAuthorization struct {
	// address of minter
	Minter      string             `protobuf:"bytes,1,opt,name=minter,proto3" json:"minter,omitempty"`
	Constraints []*MintConstraints `protobuf:"bytes,2,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (m *EvaluateAuthorization) Reset()         { *m = EvaluateAuthorization{} }
func (m *EvaluateAuthorization) String() string { return proto.CompactTextString(m) }
func (*EvaluateAuthorization) ProtoMessage()    {}
func (*EvaluateAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{0}
}
func (m *EvaluateAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateAuthorization.Merge(m, src)
}
func (m *EvaluateAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateAuthorization proto.InternalMessageInfo

func (m *EvaluateAuthorization) GetMinter() string {
	if m != nil {
		return m.Minter
	}
	return ""
}

func (m *EvaluateAuthorization) GetConstraints() []*MintConstraints {
	if m != nil {
		return m.Constraints
	}
	return nil
}

type MintConstraints struct {
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *MintConstraints) Reset()         { *m = MintConstraints{} }
func (m *MintConstraints) String() string { return proto.CompactTextString(m) }
func (*MintConstraints) ProtoMessage()    {}
func (*MintConstraints) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{1}
}
func (m *MintConstraints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintConstraints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintConstraints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintConstraints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintConstraints.Merge(m, src)
}
func (m *MintConstraints) XXX_Size() int {
	return m.Size()
}
func (m *MintConstraints) XXX_DiscardUnknown() {
	xxx_messageInfo_MintConstraints.DiscardUnknown(m)
}

var xxx_messageInfo_MintConstraints proto.InternalMessageInfo

func (m *MintConstraints) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*EvaluateAuthorization)(nil), "ixo.claims.v1beta1.EvaluateAuthorization")
	proto.RegisterType((*MintConstraints)(nil), "ixo.claims.v1beta1.MintConstraints")
}

func init() { proto.RegisterFile("ixo/claims/v1beta1/authz.proto", fileDescriptor_f4b7f6c531e101a6) }

var fileDescriptor_f4b7f6c531e101a6 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xbf, 0x4a, 0x03, 0x41,
	0x10, 0xc6, 0xb3, 0x0a, 0x01, 0x37, 0x48, 0xf4, 0x50, 0x89, 0x29, 0x96, 0x10, 0x9b, 0x58, 0x64,
	0x97, 0x28, 0x58, 0x88, 0x4d, 0x94, 0x94, 0x82, 0xa4, 0xb4, 0x09, 0x7b, 0x9b, 0x33, 0xb7, 0x98,
	0xdb, 0x09, 0xbb, 0x73, 0xe1, 0xcc, 0x1b, 0xd8, 0xf9, 0x30, 0x3e, 0x84, 0x65, 0xb0, 0xb2, 0x94,
	0xdc, 0x8b, 0x48, 0x6e, 0x2f, 0xf8, 0xaf, 0x9b, 0x6f, 0x7e, 0x33, 0x7c, 0x1f, 0x1f, 0x65, 0x3a,
	0x03, 0xa1, 0xa6, 0x52, 0x27, 0x4e, 0xcc, 0x7b, 0x61, 0x84, 0xb2, 0x27, 0x64, 0x8a, 0xf1, 0x82,
	0xcf, 0x2c, 0x20, 0x04, 0x81, 0xce, 0x80, 0x7b, 0xce, 0x4b, 0xde, 0x3c, 0x98, 0xc0, 0x04, 0x0a,
	0x2c, 0xd6, 0x93, 0xbf, 0x6c, 0x1e, 0x2b, 0x70, 0x09, 0xb8, 0x91, 0x07, 0x5e, 0x78, 0xd4, 0x7e,
	0x26, 0xf4, 0x70, 0x30, 0x97, 0xd3, 0x54, 0x62, 0xd4, 0x4f, 0x31, 0x06, 0xab, 0x17, 0x12, 0x35,
	0x98, 0xe0, 0x88, 0x56, 0x13, 0x6d, 0x30, 0xb2, 0x0d, 0xd2, 0x22, 0x9d, 0x9d, 0x61, 0xa9, 0x82,
	0x01, 0xad, 0x29, 0x30, 0x0e, 0xad, 0xd4, 0x06, 0x5d, 0x63, 0xab, 0xb5, 0xdd, 0xa9, 0x9d, 0x9d,
	0xf0, 0xff, 0x61, 0xf8, 0xad, 0x36, 0x78, 0xf3, 0x7d, 0x3a, 0xfc, 0xf9, 0x77, 0xb9, 0xff, 0xfe,
	0xda, 0xdd, 0xfd, 0xe5, 0xd8, 0xbe, 0xa2, 0xf5, 0x3f, 0x2f, 0xc1, 0x29, 0xdd, 0x53, 0x60, 0xd0,
	0x4a, 0x85, 0x23, 0x39, 0x1e, 0xdb, 0xc8, 0xb9, 0x32, 0x4e, 0x7d, 0xb3, 0xef, 0xfb, 0xf5, 0xf5,
	0xdd, 0xdb, 0x8a, 0x91, 0xe5, 0x8a, 0x91, 0xcf, 0x15, 0x23, 0x2f, 0x39, 0xab, 0x2c, 0x73, 0x56,
	0xf9, 0xc8, 0x59, 0xe5, 0xfe, 0x62, 0xa2, 0x31, 0x4e, 0x43, 0xae, 0x20, 0x11, 0x3a, 0x83, 0x07,
	0x48, 0xcd, 0xb8, 0x70, 0x5c, 0xab, 0x6e, 0x38, 0x05, 0xf5, 0xa8, 0x62, 0xa9, 0x8d, 0xc8, 0x36,
	0x75, 0xe3, 0xd3, 0x2c, 0x72, 0x61, 0xb5, 0xa8, 0xe8, 0xfc, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xf5,
	0x6a, 0x2b, 0x72, 0x89, 0x01, 0x00, 0x00,
}

func (m *EvaluateAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Constraints) > 0 {
		for iNdEx := len(m.Constraints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Constraints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Minter) > 0 {
		i -= len(m.Minter)
		copy(dAtA[i:], m.Minter)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.Minter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MintConstraints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintConstraints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintConstraints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuthz(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthz(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EvaluateAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Minter)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.Constraints) > 0 {
		for _, e := range m.Constraints {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *MintConstraints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	return n
}

func sovAuthz(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuthz(x uint64) (n int) {
	return sovAuthz(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EvaluateAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constraints = append(m.Constraints, &MintConstraints{})
			if err := m.Constraints[len(m.Constraints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintConstraints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintConstraints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintConstraints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthz(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthz
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthz
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthz
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthz        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthz          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthz = fmt.Errorf("proto: unexpected end of group")
)
