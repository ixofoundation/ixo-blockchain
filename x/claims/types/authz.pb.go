// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ixo/claims/v1beta1/authz.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_x_bank_types "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubmitClaimAuthorization struct {
	// address of admin
	Admin       string                    `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	Constraints []*SubmitClaimConstraints `protobuf:"bytes,2,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (m *SubmitClaimAuthorization) Reset()         { *m = SubmitClaimAuthorization{} }
func (m *SubmitClaimAuthorization) String() string { return proto.CompactTextString(m) }
func (*SubmitClaimAuthorization) ProtoMessage()    {}
func (*SubmitClaimAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{0}
}
func (m *SubmitClaimAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitClaimAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitClaimAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitClaimAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitClaimAuthorization.Merge(m, src)
}
func (m *SubmitClaimAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *SubmitClaimAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitClaimAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitClaimAuthorization proto.InternalMessageInfo

func (m *SubmitClaimAuthorization) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *SubmitClaimAuthorization) GetConstraints() []*SubmitClaimConstraints {
	if m != nil {
		return m.Constraints
	}
	return nil
}

type SubmitClaimConstraints struct {
	// collection_id indicates to which Collection this claim belongs
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	AgentQuota   uint64 `protobuf:"varint,2,opt,name=agent_quota,json=agentQuota,proto3" json:"agent_quota,omitempty"`
}

func (m *SubmitClaimConstraints) Reset()         { *m = SubmitClaimConstraints{} }
func (m *SubmitClaimConstraints) String() string { return proto.CompactTextString(m) }
func (*SubmitClaimConstraints) ProtoMessage()    {}
func (*SubmitClaimConstraints) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{1}
}
func (m *SubmitClaimConstraints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitClaimConstraints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitClaimConstraints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitClaimConstraints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitClaimConstraints.Merge(m, src)
}
func (m *SubmitClaimConstraints) XXX_Size() int {
	return m.Size()
}
func (m *SubmitClaimConstraints) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitClaimConstraints.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitClaimConstraints proto.InternalMessageInfo

func (m *SubmitClaimConstraints) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *SubmitClaimConstraints) GetAgentQuota() uint64 {
	if m != nil {
		return m.AgentQuota
	}
	return 0
}

type EvaluateClaimAuthorization struct {
	// address of admin
	Admin       string                      `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	Constraints []*EvaluateClaimConstraints `protobuf:"bytes,2,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (m *EvaluateClaimAuthorization) Reset()         { *m = EvaluateClaimAuthorization{} }
func (m *EvaluateClaimAuthorization) String() string { return proto.CompactTextString(m) }
func (*EvaluateClaimAuthorization) ProtoMessage()    {}
func (*EvaluateClaimAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{2}
}
func (m *EvaluateClaimAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateClaimAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateClaimAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateClaimAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateClaimAuthorization.Merge(m, src)
}
func (m *EvaluateClaimAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateClaimAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateClaimAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateClaimAuthorization proto.InternalMessageInfo

func (m *EvaluateClaimAuthorization) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *EvaluateClaimAuthorization) GetConstraints() []*EvaluateClaimConstraints {
	if m != nil {
		return m.Constraints
	}
	return nil
}

type EvaluateClaimConstraints struct {
	// collection_id indicates to which Collection this claim belongs
	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// either collection_id or claim_ids is needed
	ClaimIds   []string `protobuf:"bytes,2,rep,name=claim_ids,json=claimIds,proto3" json:"claim_ids,omitempty"`
	AgentQuota uint64   `protobuf:"varint,3,opt,name=agent_quota,json=agentQuota,proto3" json:"agent_quota,omitempty"`
	// if null then no before_date validation done
	BeforeDate *time.Time `protobuf:"bytes,4,opt,name=before_date,json=beforeDate,proto3,stdtime" json:"before_date,omitempty"`
	// max custom amount evaluator can change, if empty list must use amount
	// defined in Token payments
	MaxCustomAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,10,rep,name=max_custom_amount,json=maxCustomAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"max_custom_amount"`
}

func (m *EvaluateClaimConstraints) Reset()         { *m = EvaluateClaimConstraints{} }
func (m *EvaluateClaimConstraints) String() string { return proto.CompactTextString(m) }
func (*EvaluateClaimConstraints) ProtoMessage()    {}
func (*EvaluateClaimConstraints) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{3}
}
func (m *EvaluateClaimConstraints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvaluateClaimConstraints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvaluateClaimConstraints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvaluateClaimConstraints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvaluateClaimConstraints.Merge(m, src)
}
func (m *EvaluateClaimConstraints) XXX_Size() int {
	return m.Size()
}
func (m *EvaluateClaimConstraints) XXX_DiscardUnknown() {
	xxx_messageInfo_EvaluateClaimConstraints.DiscardUnknown(m)
}

var xxx_messageInfo_EvaluateClaimConstraints proto.InternalMessageInfo

func (m *EvaluateClaimConstraints) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *EvaluateClaimConstraints) GetClaimIds() []string {
	if m != nil {
		return m.ClaimIds
	}
	return nil
}

func (m *EvaluateClaimConstraints) GetAgentQuota() uint64 {
	if m != nil {
		return m.AgentQuota
	}
	return 0
}

func (m *EvaluateClaimConstraints) GetBeforeDate() *time.Time {
	if m != nil {
		return m.BeforeDate
	}
	return nil
}

func (m *EvaluateClaimConstraints) GetMaxCustomAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MaxCustomAmount
	}
	return nil
}

type WithdrawPaymentAuthorization struct {
	// address of admin
	Admin       string                        `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	Constraints []*WithdrawPaymentConstraints `protobuf:"bytes,2,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (m *WithdrawPaymentAuthorization) Reset()         { *m = WithdrawPaymentAuthorization{} }
func (m *WithdrawPaymentAuthorization) String() string { return proto.CompactTextString(m) }
func (*WithdrawPaymentAuthorization) ProtoMessage()    {}
func (*WithdrawPaymentAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{4}
}
func (m *WithdrawPaymentAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawPaymentAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawPaymentAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawPaymentAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawPaymentAuthorization.Merge(m, src)
}
func (m *WithdrawPaymentAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawPaymentAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawPaymentAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawPaymentAuthorization proto.InternalMessageInfo

func (m *WithdrawPaymentAuthorization) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *WithdrawPaymentAuthorization) GetConstraints() []*WithdrawPaymentConstraints {
	if m != nil {
		return m.Constraints
	}
	return nil
}

type WithdrawPaymentConstraints struct {
	// claim_id the withdrawal is for
	ClaimId string `protobuf:"bytes,1,opt,name=claim_id,json=claimId,proto3" json:"claim_id,omitempty"`
	// Inputs to the multisend tx to run to withdraw payment
	Inputs []github_com_cosmos_cosmos_sdk_x_bank_types.Input `protobuf:"bytes,2,rep,name=inputs,proto3,casttype=github.com/cosmos/cosmos-sdk/x/bank/types.Input" json:"inputs"`
	// Outputs for the multisend tx to run to withdraw payment
	Outputs []github_com_cosmos_cosmos_sdk_x_bank_types.Output `protobuf:"bytes,3,rep,name=outputs,proto3,casttype=github.com/cosmos/cosmos-sdk/x/bank/types.Output" json:"outputs"`
	// payment type to keep track what payment is for and mark claim payment
	// accordingly
	PaymentType PaymentType `protobuf:"varint,4,opt,name=payment_type,json=paymentType,proto3,enum=ixo.claims.v1beta1.PaymentType" json:"payment_type,omitempty"`
	// if empty(nil) then no contract payment
	Contract_1155Payment *Contract1155Payment `protobuf:"bytes,5,opt,name=contract_1155_payment,json=contract1155Payment,proto3" json:"contract_1155_payment,omitempty"`
	// for contract payment
	ToAddress string `protobuf:"bytes,6,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	// for contract payment
	FromAddress string `protobuf:"bytes,7,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	// date that grantee can execute authorization, calculated from created date
	// plus the timeout on Collection payments, if null then none
	ReleaseDate *time.Time `protobuf:"bytes,8,opt,name=release_date,json=releaseDate,proto3,stdtime" json:"release_date,omitempty"`
}

func (m *WithdrawPaymentConstraints) Reset()         { *m = WithdrawPaymentConstraints{} }
func (m *WithdrawPaymentConstraints) String() string { return proto.CompactTextString(m) }
func (*WithdrawPaymentConstraints) ProtoMessage()    {}
func (*WithdrawPaymentConstraints) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b7f6c531e101a6, []int{5}
}
func (m *WithdrawPaymentConstraints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawPaymentConstraints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawPaymentConstraints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawPaymentConstraints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawPaymentConstraints.Merge(m, src)
}
func (m *WithdrawPaymentConstraints) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawPaymentConstraints) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawPaymentConstraints.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawPaymentConstraints proto.InternalMessageInfo

func (m *WithdrawPaymentConstraints) GetClaimId() string {
	if m != nil {
		return m.ClaimId
	}
	return ""
}

func (m *WithdrawPaymentConstraints) GetInputs() []github_com_cosmos_cosmos_sdk_x_bank_types.Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *WithdrawPaymentConstraints) GetOutputs() []github_com_cosmos_cosmos_sdk_x_bank_types.Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *WithdrawPaymentConstraints) GetPaymentType() PaymentType {
	if m != nil {
		return m.PaymentType
	}
	return PaymentType_submission
}

func (m *WithdrawPaymentConstraints) GetContract_1155Payment() *Contract1155Payment {
	if m != nil {
		return m.Contract_1155Payment
	}
	return nil
}

func (m *WithdrawPaymentConstraints) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *WithdrawPaymentConstraints) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *WithdrawPaymentConstraints) GetReleaseDate() *time.Time {
	if m != nil {
		return m.ReleaseDate
	}
	return nil
}

func init() {
	proto.RegisterType((*SubmitClaimAuthorization)(nil), "ixo.claims.v1beta1.SubmitClaimAuthorization")
	proto.RegisterType((*SubmitClaimConstraints)(nil), "ixo.claims.v1beta1.SubmitClaimConstraints")
	proto.RegisterType((*EvaluateClaimAuthorization)(nil), "ixo.claims.v1beta1.EvaluateClaimAuthorization")
	proto.RegisterType((*EvaluateClaimConstraints)(nil), "ixo.claims.v1beta1.EvaluateClaimConstraints")
	proto.RegisterType((*WithdrawPaymentAuthorization)(nil), "ixo.claims.v1beta1.WithdrawPaymentAuthorization")
	proto.RegisterType((*WithdrawPaymentConstraints)(nil), "ixo.claims.v1beta1.WithdrawPaymentConstraints")
}

func init() { proto.RegisterFile("ixo/claims/v1beta1/authz.proto", fileDescriptor_f4b7f6c531e101a6) }

var fileDescriptor_f4b7f6c531e101a6 = []byte{
	// 748 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xdb, 0xf4, 0x27, 0xe3, 0xf6, 0xfb, 0xd4, 0xa1, 0x20, 0x27, 0x54, 0x4e, 0x14, 0x16,
	0x44, 0x88, 0xda, 0x4d, 0x51, 0x01, 0xb1, 0x4b, 0x02, 0x8b, 0x4a, 0x08, 0x8a, 0xa9, 0x84, 0x04,
	0x12, 0xd6, 0xd8, 0x9e, 0x24, 0x43, 0x63, 0x4f, 0xf0, 0x8c, 0xdb, 0xb4, 0x4f, 0x51, 0x16, 0x2c,
	0x78, 0x05, 0xd6, 0x6c, 0x78, 0x83, 0x2e, 0x2b, 0x56, 0xac, 0x5a, 0xd4, 0xbe, 0x05, 0x2b, 0xe4,
	0xf1, 0xb8, 0x49, 0x5b, 0xb7, 0x4a, 0x57, 0xc9, 0xdc, 0x7b, 0xcf, 0x3d, 0x67, 0xce, 0xbd, 0x23,
	0x03, 0x9d, 0x0c, 0xa8, 0xe9, 0xf6, 0x10, 0xf1, 0x99, 0xb9, 0x5d, 0x77, 0x30, 0x47, 0x75, 0x13,
	0x45, 0xbc, 0xbb, 0x67, 0xf4, 0x43, 0xca, 0x29, 0x84, 0x64, 0x40, 0x8d, 0x24, 0x6f, 0xc8, 0x7c,
	0x69, 0xb1, 0x43, 0x3b, 0x54, 0xa4, 0xcd, 0xf8, 0x5f, 0x52, 0x59, 0x2a, 0xba, 0x94, 0xf9, 0x94,
	0xd9, 0x49, 0x22, 0x39, 0xc8, 0x54, 0xb9, 0x43, 0x69, 0xa7, 0x87, 0x4d, 0x71, 0x72, 0xa2, 0xb6,
	0xc9, 0x89, 0x8f, 0x19, 0x47, 0x7e, 0x5f, 0x16, 0xe8, 0x49, 0xb9, 0xe9, 0x20, 0x86, 0xcf, 0x64,
	0xb8, 0x94, 0x04, 0x69, 0x83, 0x0c, 0x95, 0x52, 0xd4, 0x35, 0x05, 0x23, 0x12, 0xaa, 0x5f, 0x14,
	0xa0, 0xbd, 0x8d, 0x1c, 0x9f, 0xf0, 0x56, 0x5c, 0xd5, 0x88, 0x78, 0x97, 0x86, 0x64, 0x0f, 0x71,
	0x42, 0x03, 0xb8, 0x08, 0xa6, 0x90, 0xe7, 0x93, 0x40, 0x53, 0x2a, 0x4a, 0xad, 0x60, 0x25, 0x07,
	0xf8, 0x12, 0xa8, 0x2e, 0x0d, 0x18, 0x0f, 0x11, 0x09, 0x38, 0xd3, 0x26, 0x2a, 0x93, 0x35, 0x75,
	0xf5, 0x81, 0x71, 0xd9, 0x10, 0x63, 0xa4, 0x71, 0x6b, 0x88, 0xb0, 0x46, 0xe1, 0xcf, 0x16, 0x7e,
	0xfd, 0x58, 0x9e, 0x3f, 0x47, 0x5b, 0xfd, 0x08, 0xee, 0x64, 0x23, 0xe1, 0x3d, 0x30, 0xef, 0xd2,
	0x5e, 0x0f, 0xbb, 0x71, 0x9d, 0x4d, 0x3c, 0x29, 0x6c, 0x6e, 0x18, 0x5c, 0xf7, 0x60, 0x19, 0xa8,
	0xa8, 0x83, 0x03, 0x6e, 0x7f, 0x8e, 0x28, 0x47, 0xda, 0x44, 0x45, 0xa9, 0xe5, 0x2d, 0x20, 0x42,
	0x6f, 0xe2, 0x48, 0xf5, 0xab, 0x02, 0x4a, 0x2f, 0xb6, 0x51, 0x2f, 0x42, 0x1c, 0x8f, 0x7d, 0xeb,
	0x57, 0x59, 0xb7, 0x7e, 0x98, 0x75, 0xeb, 0x73, 0xad, 0x6f, 0x72, 0xef, 0x9f, 0x13, 0x40, 0xbb,
	0x0a, 0x3c, 0xde, 0xd5, 0xef, 0x82, 0x82, 0x10, 0x63, 0x13, 0x2f, 0x91, 0x58, 0xb0, 0x66, 0x45,
	0x60, 0xdd, 0x63, 0x17, 0x7d, 0x99, 0xbc, 0xe8, 0x0b, 0x6c, 0x00, 0xd5, 0xc1, 0x6d, 0x1a, 0x62,
	0xdb, 0x43, 0x1c, 0x6b, 0xf9, 0x8a, 0x52, 0x53, 0x57, 0x4b, 0x46, 0xb2, 0xa4, 0x46, 0xba, 0xa4,
	0xc6, 0x66, 0xba, 0xa4, 0xcd, 0xfc, 0xfe, 0x71, 0x59, 0xb1, 0x40, 0x02, 0x7a, 0x8e, 0x38, 0x86,
	0x3b, 0x60, 0xc1, 0x47, 0x03, 0xdb, 0x8d, 0x18, 0xa7, 0xbe, 0x8d, 0x7c, 0x1a, 0x05, 0x5c, 0x03,
	0xc2, 0xab, 0xa2, 0x21, 0x17, 0x2f, 0x5e, 0xe6, 0x33, 0xb3, 0x5a, 0x94, 0x04, 0xcd, 0x95, 0x83,
	0xa3, 0x72, 0xee, 0xfb, 0x71, 0xb9, 0xd6, 0x21, 0xbc, 0x1b, 0x39, 0x86, 0x4b, 0x7d, 0xb9, 0xa5,
	0xf2, 0x67, 0x99, 0x79, 0x5b, 0x26, 0xdf, 0xed, 0x63, 0x26, 0x00, 0xcc, 0xfa, 0xdf, 0x47, 0x83,
	0x96, 0x20, 0x69, 0x08, 0x8e, 0xea, 0x37, 0x05, 0x2c, 0xbd, 0x23, 0xbc, 0xeb, 0x85, 0x68, 0x67,
	0x03, 0xed, 0xfa, 0x38, 0xe0, 0xe3, 0x4c, 0x75, 0x23, 0x6b, 0xaa, 0x46, 0xd6, 0x54, 0x2f, 0x34,
	0xbf, 0xd1, 0x5c, 0xf3, 0xa0, 0x74, 0x35, 0x1c, 0x16, 0xc1, 0x6c, 0x3a, 0x34, 0x29, 0x6e, 0x46,
	0xce, 0x0c, 0x7e, 0x02, 0xd3, 0x24, 0xe8, 0x47, 0x67, 0xca, 0x8a, 0x59, 0xca, 0xd6, 0xe3, 0x8a,
	0xe6, 0x93, 0xd8, 0xc3, 0xbf, 0x47, 0x65, 0xf3, 0x5a, 0x0f, 0x07, 0xa6, 0x83, 0x82, 0xd4, 0x4a,
	0x01, 0xb4, 0x24, 0x03, 0x0c, 0xc0, 0x0c, 0x8d, 0xb8, 0x20, 0x9b, 0x14, 0x64, 0xa5, 0x2c, 0xb2,
	0xd7, 0xa2, 0xa4, 0xf9, 0x54, 0xb2, 0xad, 0x8c, 0xcf, 0x96, 0x20, 0xad, 0x94, 0x04, 0x36, 0xc1,
	0x5c, 0x3f, 0x31, 0xc3, 0x8e, 0x0b, 0xc4, 0xba, 0xfd, 0xb7, 0x5a, 0xce, 0x22, 0x95, 0xa6, 0x6d,
	0xee, 0xf6, 0xb1, 0xa5, 0xf6, 0x87, 0x07, 0xf8, 0x01, 0xdc, 0x76, 0x69, 0xc0, 0x43, 0xe4, 0x72,
	0xbb, 0x5e, 0x5f, 0x5b, 0xb3, 0x65, 0x52, 0x9b, 0x12, 0xbb, 0x7b, 0x3f, 0xab, 0x59, 0x4b, 0x02,
	0xe2, 0x7a, 0xd9, 0xd8, 0xba, 0xe5, 0x5e, 0x0e, 0xc2, 0x25, 0x50, 0xe0, 0xb4, 0xe1, 0x79, 0x21,
	0x66, 0x4c, 0x9b, 0x16, 0x83, 0x19, 0x06, 0x60, 0x05, 0xa8, 0xed, 0x90, 0xfa, 0x69, 0x7e, 0x46,
	0xe4, 0x47, 0x43, 0xb0, 0x05, 0xe6, 0x42, 0xdc, 0xc3, 0x88, 0xc9, 0xf7, 0x34, 0x3b, 0xe6, 0x7b,
	0x52, 0x25, 0x2a, 0x7e, 0x50, 0xcd, 0x8d, 0x83, 0x13, 0x5d, 0x39, 0x3c, 0xd1, 0x95, 0x3f, 0x27,
	0xba, 0xb2, 0x7f, 0xaa, 0xe7, 0x0e, 0x4f, 0xf5, 0xdc, 0xef, 0x53, 0x3d, 0xf7, 0xfe, 0xf1, 0x88,
	0xf5, 0x64, 0x40, 0xdb, 0x34, 0x0a, 0x3c, 0xb1, 0x6f, 0xf1, 0x69, 0xd9, 0xe9, 0x51, 0x77, 0xcb,
	0xed, 0x22, 0x12, 0x98, 0x83, 0xf4, 0x03, 0x20, 0xe6, 0xe0, 0x4c, 0x0b, 0xe2, 0x47, 0xff, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x41, 0x66, 0xc9, 0x97, 0xe2, 0x06, 0x00, 0x00,
}

func (m *SubmitClaimAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitClaimAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitClaimAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Constraints) > 0 {
		for iNdEx := len(m.Constraints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Constraints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitClaimConstraints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitClaimConstraints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitClaimConstraints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AgentQuota != 0 {
		i = encodeVarintAuthz(dAtA, i, uint64(m.AgentQuota))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateClaimAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateClaimAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateClaimAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Constraints) > 0 {
		for iNdEx := len(m.Constraints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Constraints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvaluateClaimConstraints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvaluateClaimConstraints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvaluateClaimConstraints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxCustomAmount) > 0 {
		for iNdEx := len(m.MaxCustomAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxCustomAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.BeforeDate != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.BeforeDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.BeforeDate):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintAuthz(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x22
	}
	if m.AgentQuota != 0 {
		i = encodeVarintAuthz(dAtA, i, uint64(m.AgentQuota))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ClaimIds) > 0 {
		for iNdEx := len(m.ClaimIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClaimIds[iNdEx])
			copy(dAtA[i:], m.ClaimIds[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.ClaimIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawPaymentAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawPaymentAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawPaymentAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Constraints) > 0 {
		for iNdEx := len(m.Constraints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Constraints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawPaymentConstraints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawPaymentConstraints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawPaymentConstraints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReleaseDate != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ReleaseDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReleaseDate):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintAuthz(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x42
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.Contract_1155Payment != nil {
		{
			size, err := m.Contract_1155Payment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PaymentType != 0 {
		i = encodeVarintAuthz(dAtA, i, uint64(m.PaymentType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Outputs) > 0 {
		for iNdEx := len(m.Outputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClaimId) > 0 {
		i -= len(m.ClaimId)
		copy(dAtA[i:], m.ClaimId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.ClaimId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuthz(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthz(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubmitClaimAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.Constraints) > 0 {
		for _, e := range m.Constraints {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *SubmitClaimConstraints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if m.AgentQuota != 0 {
		n += 1 + sovAuthz(uint64(m.AgentQuota))
	}
	return n
}

func (m *EvaluateClaimAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.Constraints) > 0 {
		for _, e := range m.Constraints {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *EvaluateClaimConstraints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.ClaimIds) > 0 {
		for _, s := range m.ClaimIds {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	if m.AgentQuota != 0 {
		n += 1 + sovAuthz(uint64(m.AgentQuota))
	}
	if m.BeforeDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.BeforeDate)
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.MaxCustomAmount) > 0 {
		for _, e := range m.MaxCustomAmount {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *WithdrawPaymentAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.Constraints) > 0 {
		for _, e := range m.Constraints {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *WithdrawPaymentConstraints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClaimId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	if m.PaymentType != 0 {
		n += 1 + sovAuthz(uint64(m.PaymentType))
	}
	if m.Contract_1155Payment != nil {
		l = m.Contract_1155Payment.Size()
		n += 1 + l + sovAuthz(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if m.ReleaseDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReleaseDate)
		n += 1 + l + sovAuthz(uint64(l))
	}
	return n
}

func sovAuthz(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuthz(x uint64) (n int) {
	return sovAuthz(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubmitClaimAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitClaimAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitClaimAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constraints = append(m.Constraints, &SubmitClaimConstraints{})
			if err := m.Constraints[len(m.Constraints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitClaimConstraints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitClaimConstraints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitClaimConstraints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentQuota", wireType)
			}
			m.AgentQuota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentQuota |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateClaimAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateClaimAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateClaimAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constraints = append(m.Constraints, &EvaluateClaimConstraints{})
			if err := m.Constraints[len(m.Constraints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvaluateClaimConstraints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvaluateClaimConstraints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvaluateClaimConstraints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimIds = append(m.ClaimIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentQuota", wireType)
			}
			m.AgentQuota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgentQuota |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BeforeDate == nil {
				m.BeforeDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.BeforeDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCustomAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxCustomAmount = append(m.MaxCustomAmount, types.Coin{})
			if err := m.MaxCustomAmount[len(m.MaxCustomAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawPaymentAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawPaymentAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawPaymentAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constraints = append(m.Constraints, &WithdrawPaymentConstraints{})
			if err := m.Constraints[len(m.Constraints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawPaymentConstraints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawPaymentConstraints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawPaymentConstraints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, github_com_cosmos_cosmos_sdk_x_bank_types.Input{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, github_com_cosmos_cosmos_sdk_x_bank_types.Output{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			m.PaymentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentType |= PaymentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract_1155Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contract_1155Payment == nil {
				m.Contract_1155Payment = &Contract1155Payment{}
			}
			if err := m.Contract_1155Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReleaseDate == nil {
				m.ReleaseDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ReleaseDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthz(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthz
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthz
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthz
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthz        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthz          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthz = fmt.Errorf("proto: unexpected end of group")
)
