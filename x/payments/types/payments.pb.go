// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ixo/payments/v1/payments.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PaymentTemplate contains details about a payment, with no info about the payer or payee.
type PaymentTemplate struct {
	Id             string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	PaymentAmount  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=payment_amount,json=paymentAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"payment_amount" yaml:"payment_amount"`
	PaymentMinimum github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=payment_minimum,json=paymentMinimum,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"payment_minimum" yaml:"payment_minimum"`
	PaymentMaximum github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=payment_maximum,json=paymentMaximum,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"payment_maximum" yaml:"payment_maximum"`
	Discounts      []Discount                               `protobuf:"bytes,5,rep,name=discounts,proto3" json:"discounts" yaml:"discounts"`
}

func (m *PaymentTemplate) Reset()         { *m = PaymentTemplate{} }
func (m *PaymentTemplate) String() string { return proto.CompactTextString(m) }
func (*PaymentTemplate) ProtoMessage()    {}
func (*PaymentTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac35418992af194a, []int{0}
}
func (m *PaymentTemplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentTemplate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentTemplate.Merge(m, src)
}
func (m *PaymentTemplate) XXX_Size() int {
	return m.Size()
}
func (m *PaymentTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentTemplate proto.InternalMessageInfo

func (m *PaymentTemplate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentTemplate) GetPaymentAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PaymentAmount
	}
	return nil
}

func (m *PaymentTemplate) GetPaymentMinimum() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PaymentMinimum
	}
	return nil
}

func (m *PaymentTemplate) GetPaymentMaximum() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PaymentMaximum
	}
	return nil
}

func (m *PaymentTemplate) GetDiscounts() []Discount {
	if m != nil {
		return m.Discounts
	}
	return nil
}

// Discount contains details about a discount which can be granted to payers.
type Discount struct {
	Id      github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"id" yaml:"id"`
	Percent github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,2,opt,name=percent,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"percent" yaml:"percent"`
}

func (m *Discount) Reset()         { *m = Discount{} }
func (m *Discount) String() string { return proto.CompactTextString(m) }
func (*Discount) ProtoMessage()    {}
func (*Discount) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac35418992af194a, []int{1}
}
func (m *Discount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Discount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Discount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Discount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Discount.Merge(m, src)
}
func (m *Discount) XXX_Size() int {
	return m.Size()
}
func (m *Discount) XXX_DiscardUnknown() {
	xxx_messageInfo_Discount.DiscardUnknown(m)
}

var xxx_messageInfo_Discount proto.InternalMessageInfo

// DistributionShare specifies the share of a specific payment an address will receive.
type DistributionShare struct {
	Address    string                                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Percentage github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=percentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"percentage" yaml:"percentage"`
}

func (m *DistributionShare) Reset()         { *m = DistributionShare{} }
func (m *DistributionShare) String() string { return proto.CompactTextString(m) }
func (*DistributionShare) ProtoMessage()    {}
func (*DistributionShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac35418992af194a, []int{2}
}
func (m *DistributionShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionShare.Merge(m, src)
}
func (m *DistributionShare) XXX_Size() int {
	return m.Size()
}
func (m *DistributionShare) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionShare.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionShare proto.InternalMessageInfo

func (m *DistributionShare) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// PaymentContract specifies an agreement between a payer and payee/s which can be invoked
// once or multiple times to effect payment/s.
type PaymentContract struct {
	Id                string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	PaymentTemplateId string                                   `protobuf:"bytes,2,opt,name=payment_template_id,json=paymentTemplateId,proto3" json:"payment_template_id,omitempty" yaml:"payment_template_id"`
	Creator           string                                   `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
	Payer             string                                   `protobuf:"bytes,4,opt,name=payer,proto3" json:"payer,omitempty" yaml:"payer"`
	Recipients        []DistributionShare                      `protobuf:"bytes,5,rep,name=recipients,proto3" json:"recipients" yaml:"recipients"`
	CumulativePay     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=cumulative_pay,json=cumulativePay,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"cumulative_pay" yaml:"cumulative_pay"`
	CurrentRemainder  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=current_remainder,json=currentRemainder,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"current_remainder" yaml:"current_remainder"`
	CanDeauthorise    bool                                     `protobuf:"varint,8,opt,name=can_deauthorise,json=canDeauthorise,proto3" json:"can_deauthorise,omitempty" yaml:"can_deauthorise"`
	Authorised        bool                                     `protobuf:"varint,9,opt,name=authorised,proto3" json:"authorised,omitempty" yaml:"authorised"`
	DiscountId        github_com_cosmos_cosmos_sdk_types.Uint  `protobuf:"bytes,10,opt,name=discount_id,json=discountId,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"discount_id" yaml:"discount_id"`
}

func (m *PaymentContract) Reset()         { *m = PaymentContract{} }
func (m *PaymentContract) String() string { return proto.CompactTextString(m) }
func (*PaymentContract) ProtoMessage()    {}
func (*PaymentContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac35418992af194a, []int{3}
}
func (m *PaymentContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentContract.Merge(m, src)
}
func (m *PaymentContract) XXX_Size() int {
	return m.Size()
}
func (m *PaymentContract) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentContract.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentContract proto.InternalMessageInfo

func (m *PaymentContract) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentContract) GetPaymentTemplateId() string {
	if m != nil {
		return m.PaymentTemplateId
	}
	return ""
}

func (m *PaymentContract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *PaymentContract) GetPayer() string {
	if m != nil {
		return m.Payer
	}
	return ""
}

func (m *PaymentContract) GetRecipients() []DistributionShare {
	if m != nil {
		return m.Recipients
	}
	return nil
}

func (m *PaymentContract) GetCumulativePay() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CumulativePay
	}
	return nil
}

func (m *PaymentContract) GetCurrentRemainder() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CurrentRemainder
	}
	return nil
}

func (m *PaymentContract) GetCanDeauthorise() bool {
	if m != nil {
		return m.CanDeauthorise
	}
	return false
}

func (m *PaymentContract) GetAuthorised() bool {
	if m != nil {
		return m.Authorised
	}
	return false
}

// Subscription specifies details of a payment to be effected periodically.
type Subscription struct {
	Id                 string                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	PaymentContractId  string                                  `protobuf:"bytes,2,opt,name=payment_contract_id,json=paymentContractId,proto3" json:"payment_contract_id,omitempty" yaml:"payment_contract_id"`
	PeriodsSoFar       github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=periods_so_far,json=periodsSoFar,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"periods_so_far" yaml:"periods_so_far"`
	MaxPeriods         github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=max_periods,json=maxPeriods,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"max_periods" yaml:"max_periods"`
	PeriodsAccumulated github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,5,opt,name=periods_accumulated,json=periodsAccumulated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"periods_accumulated" yaml:"periods_accumulated"`
	Period             *types1.Any                             `protobuf:"bytes,6,opt,name=period,proto3" json:"period,omitempty" yaml:"period"`
}

func (m *Subscription) Reset()         { *m = Subscription{} }
func (m *Subscription) String() string { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()    {}
func (*Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac35418992af194a, []int{4}
}
func (m *Subscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscription.Merge(m, src)
}
func (m *Subscription) XXX_Size() int {
	return m.Size()
}
func (m *Subscription) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscription.DiscardUnknown(m)
}

var xxx_messageInfo_Subscription proto.InternalMessageInfo

// BlockPeriod implements the Period interface and specifies a period in terms of number
// of blocks.
type BlockPeriod struct {
	PeriodLength     int64 `protobuf:"varint,1,opt,name=period_length,json=periodLength,proto3" json:"period_length,omitempty" yaml:"period_length"`
	PeriodStartBlock int64 `protobuf:"varint,2,opt,name=period_start_block,json=periodStartBlock,proto3" json:"period_start_block,omitempty" yaml:"period_start_block"`
}

func (m *BlockPeriod) Reset()         { *m = BlockPeriod{} }
func (m *BlockPeriod) String() string { return proto.CompactTextString(m) }
func (*BlockPeriod) ProtoMessage()    {}
func (*BlockPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac35418992af194a, []int{5}
}
func (m *BlockPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockPeriod.Merge(m, src)
}
func (m *BlockPeriod) XXX_Size() int {
	return m.Size()
}
func (m *BlockPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_BlockPeriod proto.InternalMessageInfo

func (m *BlockPeriod) GetPeriodLength() int64 {
	if m != nil {
		return m.PeriodLength
	}
	return 0
}

func (m *BlockPeriod) GetPeriodStartBlock() int64 {
	if m != nil {
		return m.PeriodStartBlock
	}
	return 0
}

// TimePeriod implements the Period interface and specifies a period in terms of time.
type TimePeriod struct {
	PeriodDurationNs time.Duration `protobuf:"bytes,1,opt,name=period_duration_ns,json=periodDurationNs,proto3,stdduration" json:"period_duration_ns" yaml:"period_duration_ns"`
	PeriodStartTime  time.Time     `protobuf:"bytes,2,opt,name=period_start_time,json=periodStartTime,proto3,stdtime" json:"period_start_time" yaml:"period_start_time"`
}

func (m *TimePeriod) Reset()         { *m = TimePeriod{} }
func (m *TimePeriod) String() string { return proto.CompactTextString(m) }
func (*TimePeriod) ProtoMessage()    {}
func (*TimePeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac35418992af194a, []int{6}
}
func (m *TimePeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimePeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimePeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimePeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimePeriod.Merge(m, src)
}
func (m *TimePeriod) XXX_Size() int {
	return m.Size()
}
func (m *TimePeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_TimePeriod.DiscardUnknown(m)
}

var xxx_messageInfo_TimePeriod proto.InternalMessageInfo

func (m *TimePeriod) GetPeriodDurationNs() time.Duration {
	if m != nil {
		return m.PeriodDurationNs
	}
	return 0
}

func (m *TimePeriod) GetPeriodStartTime() time.Time {
	if m != nil {
		return m.PeriodStartTime
	}
	return time.Time{}
}

// TestPeriod implements the Period interface and is identical to BlockPeriod, except it
// ignores the context in periodEnded() and periodStarted().
type TestPeriod struct {
	PeriodLength     int64 `protobuf:"varint,1,opt,name=period_length,json=periodLength,proto3" json:"period_length,omitempty" yaml:"period_length"`
	PeriodStartBlock int64 `protobuf:"varint,2,opt,name=period_start_block,json=periodStartBlock,proto3" json:"period_start_block,omitempty" yaml:"period_start_block"`
}

func (m *TestPeriod) Reset()         { *m = TestPeriod{} }
func (m *TestPeriod) String() string { return proto.CompactTextString(m) }
func (*TestPeriod) ProtoMessage()    {}
func (*TestPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac35418992af194a, []int{7}
}
func (m *TestPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestPeriod.Merge(m, src)
}
func (m *TestPeriod) XXX_Size() int {
	return m.Size()
}
func (m *TestPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_TestPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_TestPeriod proto.InternalMessageInfo

func (m *TestPeriod) GetPeriodLength() int64 {
	if m != nil {
		return m.PeriodLength
	}
	return 0
}

func (m *TestPeriod) GetPeriodStartBlock() int64 {
	if m != nil {
		return m.PeriodStartBlock
	}
	return 0
}

func init() {
	proto.RegisterType((*PaymentTemplate)(nil), "ixo.payments.v1.PaymentTemplate")
	proto.RegisterType((*Discount)(nil), "ixo.payments.v1.Discount")
	proto.RegisterType((*DistributionShare)(nil), "ixo.payments.v1.DistributionShare")
	proto.RegisterType((*PaymentContract)(nil), "ixo.payments.v1.PaymentContract")
	proto.RegisterType((*Subscription)(nil), "ixo.payments.v1.Subscription")
	proto.RegisterType((*BlockPeriod)(nil), "ixo.payments.v1.BlockPeriod")
	proto.RegisterType((*TimePeriod)(nil), "ixo.payments.v1.TimePeriod")
	proto.RegisterType((*TestPeriod)(nil), "ixo.payments.v1.TestPeriod")
}

func init() { proto.RegisterFile("ixo/payments/v1/payments.proto", fileDescriptor_ac35418992af194a) }

var fileDescriptor_ac35418992af194a = []byte{
	// 1109 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xbf, 0x6f, 0xe4, 0x44,
	0x14, 0x8e, 0xf3, 0x3b, 0x93, 0x9f, 0x3b, 0x97, 0x20, 0x67, 0xa5, 0x5b, 0x47, 0x23, 0x38, 0x52,
	0x70, 0xb6, 0x12, 0x84, 0x84, 0x4e, 0x20, 0x88, 0x13, 0x10, 0x81, 0xdc, 0x29, 0x38, 0xa1, 0x39,
	0x09, 0x59, 0xb3, 0xf6, 0x64, 0x33, 0xba, 0xb5, 0xc7, 0x1a, 0x8f, 0xa3, 0xdd, 0x86, 0x1a, 0x09,
	0x09, 0x5d, 0x41, 0x71, 0x48, 0x14, 0x54, 0x14, 0xb4, 0x50, 0x53, 0x5f, 0x79, 0x25, 0xa2, 0xf0,
	0xa1, 0xa4, 0xa3, 0xdc, 0xbf, 0x00, 0x79, 0x3c, 0x5e, 0xdb, 0x1b, 0x44, 0x6e, 0x53, 0x5d, 0x75,
	0x3b, 0xf3, 0xde, 0xfb, 0xde, 0xf7, 0x9e, 0xbf, 0xf7, 0x6e, 0x02, 0x5a, 0xb4, 0xc7, 0xac, 0x08,
	0xf7, 0x03, 0x12, 0x8a, 0xd8, 0xba, 0xd8, 0x19, 0xfe, 0x36, 0x23, 0xce, 0x04, 0x83, 0xab, 0xb4,
	0xc7, 0xcc, 0xe1, 0xdd, 0xc5, 0x4e, 0x73, 0xbd, 0xc3, 0x3a, 0x4c, 0xda, 0xac, 0xec, 0x57, 0xee,
	0xd6, 0xdc, 0xec, 0x30, 0xd6, 0xe9, 0x12, 0x4b, 0x9e, 0xda, 0xc9, 0x99, 0x85, 0xc3, 0xbe, 0x32,
	0xb5, 0x46, 0x4d, 0x7e, 0xc2, 0xb1, 0xa0, 0x2c, 0x54, 0x76, 0x63, 0xd4, 0x2e, 0x68, 0x40, 0x62,
	0x81, 0x83, 0xa8, 0x00, 0xf0, 0x58, 0x1c, 0xb0, 0xd8, 0x6a, 0xe3, 0x98, 0x58, 0x17, 0x3b, 0x6d,
	0x22, 0xf0, 0x8e, 0xe5, 0x31, 0xaa, 0x00, 0xd0, 0x6f, 0xd3, 0x60, 0xf5, 0x38, 0x67, 0x78, 0x4a,
	0x82, 0xa8, 0x8b, 0x05, 0x81, 0x77, 0xc1, 0x24, 0xf5, 0x75, 0x6d, 0x4b, 0xdb, 0x5e, 0xb0, 0x97,
	0x07, 0xa9, 0xb1, 0xd0, 0xc7, 0x41, 0xf7, 0x01, 0xa2, 0x3e, 0x72, 0x26, 0xa9, 0x0f, 0xbf, 0xd3,
	0xc0, 0x8a, 0x2a, 0xca, 0xc5, 0x01, 0x4b, 0x42, 0xa1, 0x4f, 0x6e, 0x4d, 0x6d, 0x2f, 0xee, 0x6e,
	0x9a, 0x79, 0x32, 0x33, 0x4b, 0x66, 0xaa, 0x64, 0xe6, 0x3e, 0xa3, 0xa1, 0x7d, 0xf8, 0x3c, 0x35,
	0x26, 0x06, 0xa9, 0xb1, 0x91, 0x43, 0xd5, 0xc3, 0xd1, 0xaf, 0x2f, 0x8d, 0xed, 0x0e, 0x15, 0xe7,
	0x49, 0xdb, 0xf4, 0x58, 0x60, 0x29, 0xca, 0xf9, 0x3f, 0xf7, 0x63, 0xff, 0x89, 0x25, 0xfa, 0x11,
	0x89, 0x25, 0x52, 0xec, 0x2c, 0xab, 0xe0, 0x3d, 0x19, 0x0b, 0xbf, 0xd7, 0xc0, 0x6a, 0x01, 0x17,
	0xd0, 0x90, 0x06, 0x49, 0xa0, 0x4f, 0xdd, 0x44, 0xe7, 0x73, 0x45, 0xe7, 0x8d, 0x3a, 0x1d, 0x15,
	0x3f, 0x1e, 0x9f, 0xa2, 0x17, 0x0f, 0xf3, 0xe0, 0x3a, 0x21, 0xdc, 0x93, 0x84, 0xa6, 0x6f, 0x4b,
	0x28, 0x8f, 0xbf, 0x25, 0xa1, 0x3c, 0x18, 0x7e, 0x09, 0x16, 0x7c, 0x1a, 0x7b, 0x59, 0xb7, 0x62,
	0x7d, 0x46, 0x31, 0x19, 0x51, 0xa6, 0x79, 0xa0, 0x3c, 0x6c, 0x5d, 0x31, 0x59, 0xcb, 0x99, 0x0c,
	0x23, 0x91, 0x53, 0xa2, 0xa0, 0xdf, 0x35, 0x30, 0x5f, 0x44, 0xc0, 0xa3, 0x8a, 0x5c, 0x3e, 0xc8,
	0xa2, 0xff, 0x4a, 0x8d, 0xb7, 0x5f, 0x81, 0xed, 0x57, 0x34, 0x14, 0xd7, 0xd5, 0xf5, 0x18, 0xcc,
	0x45, 0x84, 0x7b, 0x44, 0xaa, 0x2a, 0x83, 0xfc, 0x58, 0x41, 0xde, 0x7b, 0x05, 0xc8, 0x03, 0xe2,
	0x0d, 0x52, 0x63, 0x45, 0x35, 0x31, 0x87, 0x41, 0x4e, 0x01, 0x88, 0x7e, 0xd1, 0x40, 0xe3, 0x80,
	0xc6, 0x82, 0xd3, 0x76, 0x92, 0x0d, 0xd1, 0xc9, 0x39, 0xe6, 0x04, 0xbe, 0x03, 0xe6, 0xb0, 0xef,
	0x73, 0x12, 0xc7, 0xaa, 0x08, 0x58, 0x62, 0x28, 0x03, 0x72, 0x0a, 0x17, 0xe8, 0x01, 0xa0, 0xe0,
	0x70, 0x87, 0x28, 0x8a, 0xfb, 0x63, 0x53, 0x6c, 0xd4, 0x28, 0xe2, 0x0e, 0x41, 0x4e, 0x05, 0x16,
	0xfd, 0x31, 0x3b, 0x9c, 0xca, 0x7d, 0x16, 0x0a, 0x8e, 0x3d, 0x71, 0xd3, 0x54, 0x3e, 0x02, 0x77,
	0x0a, 0xd5, 0x08, 0x35, 0xc8, 0x2e, 0xf5, 0x15, 0xc1, 0xd6, 0x20, 0x35, 0x9a, 0x75, 0x69, 0x55,
	0x9c, 0x90, 0xd3, 0x88, 0xea, 0x2b, 0xe0, 0xd0, 0xcf, 0xba, 0xe2, 0x71, 0x82, 0x05, 0xe3, 0xfa,
	0xd4, 0x68, 0x57, 0x94, 0x01, 0x39, 0x85, 0x0b, 0xbc, 0x07, 0x66, 0x22, 0xdc, 0x27, 0x5c, 0x9f,
	0x96, 0xbe, 0x6b, 0x83, 0xd4, 0x58, 0x1a, 0xe6, 0x23, 0x1c, 0x39, 0xb9, 0x19, 0x7e, 0x0d, 0x00,
	0x27, 0x1e, 0x8d, 0x28, 0x29, 0xc5, 0x88, 0xfe, 0x4b, 0x8c, 0xf5, 0x6f, 0x64, 0x6f, 0x2a, 0x55,
	0xaa, 0xbe, 0x95, 0x18, 0xc8, 0xa9, 0x00, 0xca, 0xd5, 0xe4, 0x25, 0x41, 0xd2, 0xc5, 0x82, 0x5e,
	0x10, 0x37, 0xc2, 0x7d, 0x7d, 0x76, 0xcc, 0xd5, 0x54, 0x0f, 0x1f, 0x73, 0x35, 0x95, 0xc1, 0xc7,
	0xb8, 0x0f, 0x7f, 0xd0, 0x40, 0xc3, 0x4b, 0x38, 0xcf, 0xda, 0xcd, 0x49, 0x80, 0x69, 0xe8, 0x13,
	0xae, 0xcf, 0xdd, 0x44, 0xe8, 0x48, 0x11, 0xd2, 0x0b, 0x42, 0x23, 0x08, 0xe3, 0x71, 0x5a, 0x53,
	0xf1, 0x4e, 0x11, 0x0e, 0xf7, 0xc1, 0xaa, 0x87, 0x43, 0xd7, 0x27, 0x38, 0x11, 0xe7, 0x8c, 0xd3,
	0x98, 0xe8, 0xf3, 0x5b, 0xda, 0xf6, 0xbc, 0xdd, 0x2c, 0x17, 0xd0, 0x88, 0x03, 0x72, 0x56, 0x3c,
	0x1c, 0x1e, 0x94, 0x17, 0xf0, 0x3d, 0x00, 0x86, 0x07, 0x5f, 0x5f, 0x90, 0xf1, 0x1b, 0xe5, 0x07,
	0x2a, 0x6d, 0xc8, 0xa9, 0x38, 0xc2, 0x33, 0xb0, 0x58, 0x6c, 0x91, 0x4c, 0x9d, 0x40, 0xaa, 0xe5,
	0x93, 0xf1, 0x97, 0x06, 0xac, 0x6f, 0x27, 0x29, 0x62, 0x50, 0x9c, 0x0e, 0x7d, 0xf4, 0xd3, 0x34,
	0x58, 0x3a, 0x49, 0xda, 0xb1, 0xc7, 0x69, 0x94, 0xa9, 0x68, 0x8c, 0xe9, 0xf1, 0xd4, 0xc0, 0xfd,
	0xef, 0xf4, 0x54, 0x9c, 0xca, 0xe9, 0x29, 0x46, 0xf5, 0xd0, 0x87, 0x21, 0x58, 0x89, 0x08, 0xa7,
	0xcc, 0x8f, 0xdd, 0x98, 0xb9, 0x67, 0xb8, 0x18, 0xa2, 0xcf, 0xc6, 0x2f, 0x75, 0x63, 0xb8, 0x2a,
	0x2a, 0x70, 0xc8, 0x59, 0x52, 0x17, 0x27, 0xec, 0x53, 0xcc, 0xb3, 0xbe, 0x06, 0xb8, 0xe7, 0xaa,
	0x3b, 0x35, 0x85, 0xb7, 0xef, 0x6b, 0x05, 0x0b, 0x39, 0x20, 0xc0, 0xbd, 0xe3, 0xfc, 0x00, 0xbf,
	0x01, 0x77, 0x0a, 0x22, 0xd8, 0x53, 0x6a, 0x27, 0xbe, 0x3e, 0x23, 0xf3, 0x3d, 0x1c, 0x3f, 0x5f,
	0xb3, 0x5e, 0x5c, 0x05, 0x13, 0x39, 0x50, 0xdd, 0xee, 0x95, 0x97, 0xf0, 0x23, 0x30, 0x9b, 0xdf,
	0xea, 0xb3, 0x5b, 0xda, 0xf6, 0xe2, 0xee, 0xba, 0x99, 0x3f, 0x80, 0xcc, 0xe2, 0x01, 0x64, 0xee,
	0x85, 0x7d, 0xbb, 0x31, 0x48, 0x8d, 0xe5, 0x2a, 0x32, 0x72, 0x54, 0xd8, 0x83, 0xe9, 0x6f, 0x7f,
	0x36, 0x26, 0xd0, 0x8f, 0x1a, 0x58, 0xb4, 0xbb, 0xcc, 0x7b, 0x92, 0xd7, 0x05, 0x3f, 0x04, 0xcb,
	0xb9, 0xdd, 0xed, 0x92, 0xb0, 0x23, 0xce, 0xa5, 0x50, 0xa6, 0x6c, 0x7d, 0x90, 0x1a, 0xeb, 0x55,
	0x1c, 0x65, 0x1e, 0x76, 0xff, 0x48, 0x1e, 0xe1, 0x17, 0x40, 0x71, 0x75, 0x63, 0x81, 0xb9, 0x70,
	0xdb, 0x19, 0xb4, 0x14, 0xcf, 0x94, 0x7d, 0x77, 0x90, 0x1a, 0x9b, 0x35, 0x8c, 0x8a, 0x0f, 0x72,
	0xd6, 0xf2, 0xcb, 0x93, 0xec, 0x4e, 0x32, 0x42, 0xff, 0x68, 0x00, 0x9c, 0xd2, 0x80, 0x28, 0x6a,
	0xe1, 0x10, 0xbb, 0x78, 0xfa, 0xb9, 0x61, 0xfe, 0x1f, 0x55, 0xb6, 0x44, 0x46, 0xab, 0x3f, 0x50,
	0x3e, 0xf6, 0x5b, 0x6a, 0x89, 0xd4, 0x53, 0x57, 0x20, 0xd0, 0xb3, 0x97, 0x86, 0x56, 0xa4, 0x2f,
	0xc2, 0x1e, 0xc5, 0xb0, 0x0b, 0x1a, 0x35, 0x9e, 0xd9, 0x83, 0x52, 0x96, 0xb2, 0xb8, 0xdb, 0xbc,
	0x96, 0xee, 0xb4, 0x78, 0x6d, 0xda, 0x6f, 0xd6, 0x97, 0xd6, 0x35, 0x08, 0xf4, 0x34, 0x4b, 0xb7,
	0x5a, 0xa9, 0x36, 0x8b, 0x45, 0xcf, 0xb2, 0x62, 0x49, 0x2c, 0x5e, 0xbf, 0xef, 0x60, 0x3b, 0xcf,
	0x2f, 0x5b, 0xda, 0x8b, 0xcb, 0x96, 0xf6, 0xf7, 0x65, 0x4b, 0x7b, 0x7a, 0xd5, 0x9a, 0x78, 0x71,
	0xd5, 0x9a, 0xf8, 0xf3, 0xaa, 0x35, 0xf1, 0xf8, 0xfd, 0x8a, 0xbe, 0x69, 0x8f, 0x9d, 0xb1, 0x24,
	0xf4, 0x65, 0xfb, 0xb2, 0xd3, 0x7d, 0x09, 0xe8, 0x9d, 0x63, 0x1a, 0x5a, 0xbd, 0xf2, 0x8f, 0x03,
	0xa9, 0xfa, 0xf6, 0xac, 0xec, 0xdc, 0xbb, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x13, 0x63, 0x75,
	0xc4, 0x39, 0x0c, 0x00, 0x00,
}

func (m *PaymentTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentTemplate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentTemplate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Discounts) > 0 {
		for iNdEx := len(m.Discounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Discounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPayments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PaymentMaximum) > 0 {
		for iNdEx := len(m.PaymentMaximum) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentMaximum[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPayments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PaymentMinimum) > 0 {
		for iNdEx := len(m.PaymentMinimum) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentMinimum[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPayments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PaymentAmount) > 0 {
		for iNdEx := len(m.PaymentAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPayments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPayments(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Discount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Discount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Discount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Percent.Size()
		i -= size
		if _, err := m.Percent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPayments(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Id.Size()
		i -= size
		if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPayments(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DistributionShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Percentage.Size()
		i -= size
		if _, err := m.Percentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPayments(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPayments(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DiscountId.Size()
		i -= size
		if _, err := m.DiscountId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPayments(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.Authorised {
		i--
		if m.Authorised {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.CanDeauthorise {
		i--
		if m.CanDeauthorise {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.CurrentRemainder) > 0 {
		for iNdEx := len(m.CurrentRemainder) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentRemainder[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPayments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.CumulativePay) > 0 {
		for iNdEx := len(m.CumulativePay) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CumulativePay[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPayments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Recipients) > 0 {
		for iNdEx := len(m.Recipients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Recipients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPayments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Payer) > 0 {
		i -= len(m.Payer)
		copy(dAtA[i:], m.Payer)
		i = encodeVarintPayments(dAtA, i, uint64(len(m.Payer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPayments(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PaymentTemplateId) > 0 {
		i -= len(m.PaymentTemplateId)
		copy(dAtA[i:], m.PaymentTemplateId)
		i = encodeVarintPayments(dAtA, i, uint64(len(m.PaymentTemplateId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPayments(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Subscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Period != nil {
		{
			size, err := m.Period.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPayments(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.PeriodsAccumulated.Size()
		i -= size
		if _, err := m.PeriodsAccumulated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPayments(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MaxPeriods.Size()
		i -= size
		if _, err := m.MaxPeriods.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPayments(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.PeriodsSoFar.Size()
		i -= size
		if _, err := m.PeriodsSoFar.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPayments(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.PaymentContractId) > 0 {
		i -= len(m.PaymentContractId)
		copy(dAtA[i:], m.PaymentContractId)
		i = encodeVarintPayments(dAtA, i, uint64(len(m.PaymentContractId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPayments(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeriodStartBlock != 0 {
		i = encodeVarintPayments(dAtA, i, uint64(m.PeriodStartBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.PeriodLength != 0 {
		i = encodeVarintPayments(dAtA, i, uint64(m.PeriodLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TimePeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimePeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimePeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.PeriodStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.PeriodStartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintPayments(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	n3, err3 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.PeriodDurationNs, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.PeriodDurationNs):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintPayments(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TestPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeriodStartBlock != 0 {
		i = encodeVarintPayments(dAtA, i, uint64(m.PeriodStartBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.PeriodLength != 0 {
		i = encodeVarintPayments(dAtA, i, uint64(m.PeriodLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPayments(dAtA []byte, offset int, v uint64) int {
	offset -= sovPayments(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PaymentTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPayments(uint64(l))
	}
	if len(m.PaymentAmount) > 0 {
		for _, e := range m.PaymentAmount {
			l = e.Size()
			n += 1 + l + sovPayments(uint64(l))
		}
	}
	if len(m.PaymentMinimum) > 0 {
		for _, e := range m.PaymentMinimum {
			l = e.Size()
			n += 1 + l + sovPayments(uint64(l))
		}
	}
	if len(m.PaymentMaximum) > 0 {
		for _, e := range m.PaymentMaximum {
			l = e.Size()
			n += 1 + l + sovPayments(uint64(l))
		}
	}
	if len(m.Discounts) > 0 {
		for _, e := range m.Discounts {
			l = e.Size()
			n += 1 + l + sovPayments(uint64(l))
		}
	}
	return n
}

func (m *Discount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovPayments(uint64(l))
	l = m.Percent.Size()
	n += 1 + l + sovPayments(uint64(l))
	return n
}

func (m *DistributionShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPayments(uint64(l))
	}
	l = m.Percentage.Size()
	n += 1 + l + sovPayments(uint64(l))
	return n
}

func (m *PaymentContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPayments(uint64(l))
	}
	l = len(m.PaymentTemplateId)
	if l > 0 {
		n += 1 + l + sovPayments(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPayments(uint64(l))
	}
	l = len(m.Payer)
	if l > 0 {
		n += 1 + l + sovPayments(uint64(l))
	}
	if len(m.Recipients) > 0 {
		for _, e := range m.Recipients {
			l = e.Size()
			n += 1 + l + sovPayments(uint64(l))
		}
	}
	if len(m.CumulativePay) > 0 {
		for _, e := range m.CumulativePay {
			l = e.Size()
			n += 1 + l + sovPayments(uint64(l))
		}
	}
	if len(m.CurrentRemainder) > 0 {
		for _, e := range m.CurrentRemainder {
			l = e.Size()
			n += 1 + l + sovPayments(uint64(l))
		}
	}
	if m.CanDeauthorise {
		n += 2
	}
	if m.Authorised {
		n += 2
	}
	l = m.DiscountId.Size()
	n += 1 + l + sovPayments(uint64(l))
	return n
}

func (m *Subscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPayments(uint64(l))
	}
	l = len(m.PaymentContractId)
	if l > 0 {
		n += 1 + l + sovPayments(uint64(l))
	}
	l = m.PeriodsSoFar.Size()
	n += 1 + l + sovPayments(uint64(l))
	l = m.MaxPeriods.Size()
	n += 1 + l + sovPayments(uint64(l))
	l = m.PeriodsAccumulated.Size()
	n += 1 + l + sovPayments(uint64(l))
	if m.Period != nil {
		l = m.Period.Size()
		n += 1 + l + sovPayments(uint64(l))
	}
	return n
}

func (m *BlockPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeriodLength != 0 {
		n += 1 + sovPayments(uint64(m.PeriodLength))
	}
	if m.PeriodStartBlock != 0 {
		n += 1 + sovPayments(uint64(m.PeriodStartBlock))
	}
	return n
}

func (m *TimePeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.PeriodDurationNs)
	n += 1 + l + sovPayments(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.PeriodStartTime)
	n += 1 + l + sovPayments(uint64(l))
	return n
}

func (m *TestPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeriodLength != 0 {
		n += 1 + sovPayments(uint64(m.PeriodLength))
	}
	if m.PeriodStartBlock != 0 {
		n += 1 + sovPayments(uint64(m.PeriodStartBlock))
	}
	return n
}

func sovPayments(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPayments(x uint64) (n int) {
	return sovPayments(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PaymentTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAmount = append(m.PaymentAmount, types.Coin{})
			if err := m.PaymentAmount[len(m.PaymentAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMinimum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentMinimum = append(m.PaymentMinimum, types.Coin{})
			if err := m.PaymentMinimum[len(m.PaymentMinimum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMaximum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentMaximum = append(m.PaymentMaximum, types.Coin{})
			if err := m.PaymentMaximum[len(m.PaymentMaximum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Discounts = append(m.Discounts, Discount{})
			if err := m.Discounts[len(m.Discounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Discount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Discount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Discount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Percent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributionShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Percentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTemplateId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentTemplateId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipients = append(m.Recipients, DistributionShare{})
			if err := m.Recipients[len(m.Recipients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativePay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CumulativePay = append(m.CumulativePay, types.Coin{})
			if err := m.CumulativePay[len(m.CumulativePay)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRemainder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentRemainder = append(m.CurrentRemainder, types.Coin{})
			if err := m.CurrentRemainder[len(m.CurrentRemainder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanDeauthorise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanDeauthorise = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorised", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Authorised = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DiscountId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodsSoFar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PeriodsSoFar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPeriods", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPeriods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodsAccumulated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PeriodsAccumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Period == nil {
				m.Period = &types1.Any{}
			}
			if err := m.Period.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodLength", wireType)
			}
			m.PeriodLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodStartBlock", wireType)
			}
			m.PeriodStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodStartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimePeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimePeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimePeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodDurationNs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.PeriodDurationNs, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.PeriodStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodLength", wireType)
			}
			m.PeriodLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodStartBlock", wireType)
			}
			m.PeriodStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodStartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPayments(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPayments
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPayments
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPayments
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPayments
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPayments        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPayments          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPayments = fmt.Errorf("proto: unexpected end of group")
)
