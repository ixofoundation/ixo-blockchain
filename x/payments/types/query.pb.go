// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ixo/payments/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryPaymentTemplateRequest is the request type for the Query/PaymentTemplate RPC method.
type QueryPaymentTemplateRequest struct {
	PaymentTemplateId string `protobuf:"bytes,1,opt,name=payment_template_id,json=paymentTemplateId,proto3" json:"payment_template_id,omitempty" yaml:"payment_template_id"`
}

func (m *QueryPaymentTemplateRequest) Reset()         { *m = QueryPaymentTemplateRequest{} }
func (m *QueryPaymentTemplateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentTemplateRequest) ProtoMessage()    {}
func (*QueryPaymentTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95b7437f261afd68, []int{0}
}
func (m *QueryPaymentTemplateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentTemplateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentTemplateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentTemplateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentTemplateRequest.Merge(m, src)
}
func (m *QueryPaymentTemplateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentTemplateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentTemplateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentTemplateRequest proto.InternalMessageInfo

func (m *QueryPaymentTemplateRequest) GetPaymentTemplateId() string {
	if m != nil {
		return m.PaymentTemplateId
	}
	return ""
}

// QueryPaymentTemplateResponse is the response type for the Query/PaymentTemplate RPC method.
type QueryPaymentTemplateResponse struct {
	PaymentTemplate PaymentTemplate `protobuf:"bytes,1,opt,name=payment_template,json=paymentTemplate,proto3" json:"payment_template" yaml:"payment_template"`
}

func (m *QueryPaymentTemplateResponse) Reset()         { *m = QueryPaymentTemplateResponse{} }
func (m *QueryPaymentTemplateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentTemplateResponse) ProtoMessage()    {}
func (*QueryPaymentTemplateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95b7437f261afd68, []int{1}
}
func (m *QueryPaymentTemplateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentTemplateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentTemplateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentTemplateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentTemplateResponse.Merge(m, src)
}
func (m *QueryPaymentTemplateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentTemplateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentTemplateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentTemplateResponse proto.InternalMessageInfo

func (m *QueryPaymentTemplateResponse) GetPaymentTemplate() PaymentTemplate {
	if m != nil {
		return m.PaymentTemplate
	}
	return PaymentTemplate{}
}

// QueryPaymentContractRequest is the request type for the Query/PaymentContract RPC method.
type QueryPaymentContractRequest struct {
	PaymentContractId string `protobuf:"bytes,1,opt,name=payment_contract_id,json=paymentContractId,proto3" json:"payment_contract_id,omitempty" yaml:"payment_contract_id"`
}

func (m *QueryPaymentContractRequest) Reset()         { *m = QueryPaymentContractRequest{} }
func (m *QueryPaymentContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentContractRequest) ProtoMessage()    {}
func (*QueryPaymentContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95b7437f261afd68, []int{2}
}
func (m *QueryPaymentContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentContractRequest.Merge(m, src)
}
func (m *QueryPaymentContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentContractRequest proto.InternalMessageInfo

func (m *QueryPaymentContractRequest) GetPaymentContractId() string {
	if m != nil {
		return m.PaymentContractId
	}
	return ""
}

// QueryPaymentContractResponse is the response type for the Query/PaymentContract RPC method.
type QueryPaymentContractResponse struct {
	PaymentContract PaymentContract `protobuf:"bytes,1,opt,name=payment_contract,json=paymentContract,proto3" json:"payment_contract" yaml:"payment_contract"`
}

func (m *QueryPaymentContractResponse) Reset()         { *m = QueryPaymentContractResponse{} }
func (m *QueryPaymentContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentContractResponse) ProtoMessage()    {}
func (*QueryPaymentContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95b7437f261afd68, []int{3}
}
func (m *QueryPaymentContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentContractResponse.Merge(m, src)
}
func (m *QueryPaymentContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentContractResponse proto.InternalMessageInfo

func (m *QueryPaymentContractResponse) GetPaymentContract() PaymentContract {
	if m != nil {
		return m.PaymentContract
	}
	return PaymentContract{}
}

// QueryPaymentContractsByIdPrefixRequest is the request type for the Query/PaymentContractsByIdPrefix RPC method.
type QueryPaymentContractsByIdPrefixRequest struct {
	PaymentContractsIdPrefix string `protobuf:"bytes,1,opt,name=payment_contracts_id_prefix,json=paymentContractsIdPrefix,proto3" json:"payment_contracts_id_prefix,omitempty" yaml:"payment_contracts_id_prefix"`
}

func (m *QueryPaymentContractsByIdPrefixRequest) Reset() {
	*m = QueryPaymentContractsByIdPrefixRequest{}
}
func (m *QueryPaymentContractsByIdPrefixRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentContractsByIdPrefixRequest) ProtoMessage()    {}
func (*QueryPaymentContractsByIdPrefixRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95b7437f261afd68, []int{4}
}
func (m *QueryPaymentContractsByIdPrefixRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentContractsByIdPrefixRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentContractsByIdPrefixRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentContractsByIdPrefixRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentContractsByIdPrefixRequest.Merge(m, src)
}
func (m *QueryPaymentContractsByIdPrefixRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentContractsByIdPrefixRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentContractsByIdPrefixRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentContractsByIdPrefixRequest proto.InternalMessageInfo

func (m *QueryPaymentContractsByIdPrefixRequest) GetPaymentContractsIdPrefix() string {
	if m != nil {
		return m.PaymentContractsIdPrefix
	}
	return ""
}

// QueryPaymentContractsByIdPrefixResponse is the response type for the Query/PaymentContractsByIdPrefix RPC method.
type QueryPaymentContractsByIdPrefixResponse struct {
	PaymentContracts []PaymentContract `protobuf:"bytes,1,rep,name=payment_contracts,json=paymentContracts,proto3" json:"payment_contracts" yaml:"payment_contracts"`
}

func (m *QueryPaymentContractsByIdPrefixResponse) Reset() {
	*m = QueryPaymentContractsByIdPrefixResponse{}
}
func (m *QueryPaymentContractsByIdPrefixResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPaymentContractsByIdPrefixResponse) ProtoMessage()    {}
func (*QueryPaymentContractsByIdPrefixResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95b7437f261afd68, []int{5}
}
func (m *QueryPaymentContractsByIdPrefixResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaymentContractsByIdPrefixResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaymentContractsByIdPrefixResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaymentContractsByIdPrefixResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaymentContractsByIdPrefixResponse.Merge(m, src)
}
func (m *QueryPaymentContractsByIdPrefixResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaymentContractsByIdPrefixResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaymentContractsByIdPrefixResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaymentContractsByIdPrefixResponse proto.InternalMessageInfo

func (m *QueryPaymentContractsByIdPrefixResponse) GetPaymentContracts() []PaymentContract {
	if m != nil {
		return m.PaymentContracts
	}
	return nil
}

// QuerySubscriptionRequest is the request type for the Query/Subscription RPC method.
type QuerySubscriptionRequest struct {
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty" yaml:"subscription_id"`
}

func (m *QuerySubscriptionRequest) Reset()         { *m = QuerySubscriptionRequest{} }
func (m *QuerySubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubscriptionRequest) ProtoMessage()    {}
func (*QuerySubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95b7437f261afd68, []int{6}
}
func (m *QuerySubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubscriptionRequest.Merge(m, src)
}
func (m *QuerySubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubscriptionRequest proto.InternalMessageInfo

func (m *QuerySubscriptionRequest) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

// QuerySubscriptionResponse is the response type for the Query/Subscription RPC method.
type QuerySubscriptionResponse struct {
	Subscription Subscription `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription" yaml:"subscription"`
}

func (m *QuerySubscriptionResponse) Reset()         { *m = QuerySubscriptionResponse{} }
func (m *QuerySubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubscriptionResponse) ProtoMessage()    {}
func (*QuerySubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95b7437f261afd68, []int{7}
}
func (m *QuerySubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubscriptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubscriptionResponse.Merge(m, src)
}
func (m *QuerySubscriptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubscriptionResponse proto.InternalMessageInfo

func (m *QuerySubscriptionResponse) GetSubscription() Subscription {
	if m != nil {
		return m.Subscription
	}
	return Subscription{}
}

func init() {
	proto.RegisterType((*QueryPaymentTemplateRequest)(nil), "ixo.payments.v1.QueryPaymentTemplateRequest")
	proto.RegisterType((*QueryPaymentTemplateResponse)(nil), "ixo.payments.v1.QueryPaymentTemplateResponse")
	proto.RegisterType((*QueryPaymentContractRequest)(nil), "ixo.payments.v1.QueryPaymentContractRequest")
	proto.RegisterType((*QueryPaymentContractResponse)(nil), "ixo.payments.v1.QueryPaymentContractResponse")
	proto.RegisterType((*QueryPaymentContractsByIdPrefixRequest)(nil), "ixo.payments.v1.QueryPaymentContractsByIdPrefixRequest")
	proto.RegisterType((*QueryPaymentContractsByIdPrefixResponse)(nil), "ixo.payments.v1.QueryPaymentContractsByIdPrefixResponse")
	proto.RegisterType((*QuerySubscriptionRequest)(nil), "ixo.payments.v1.QuerySubscriptionRequest")
	proto.RegisterType((*QuerySubscriptionResponse)(nil), "ixo.payments.v1.QuerySubscriptionResponse")
}

func init() { proto.RegisterFile("ixo/payments/v1/query.proto", fileDescriptor_95b7437f261afd68) }

var fileDescriptor_95b7437f261afd68 = []byte{
	// 645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x3d, 0x6f, 0xd3, 0x40,
	0x18, 0xce, 0x81, 0x8a, 0xc4, 0x51, 0x91, 0xd6, 0x45, 0x10, 0x9c, 0x62, 0x47, 0x37, 0x94, 0x0f,
	0x11, 0x5b, 0x2d, 0x42, 0x54, 0x8c, 0x2e, 0x4b, 0x18, 0x50, 0x31, 0x4c, 0x0c, 0x58, 0x8e, 0xed,
	0xa6, 0x16, 0x89, 0xcf, 0xcd, 0x39, 0x55, 0xac, 0x28, 0x0b, 0x33, 0x12, 0x48, 0x6c, 0x88, 0x95,
	0xff, 0xd2, 0xb1, 0x12, 0x0c, 0x48, 0x48, 0x11, 0x4a, 0xf8, 0x05, 0xf9, 0x05, 0x28, 0x8e, 0xaf,
	0xbe, 0x9c, 0x2f, 0x1f, 0xdd, 0xda, 0x7b, 0xdf, 0x7b, 0x3e, 0xde, 0xbc, 0xcf, 0x19, 0x96, 0xfd,
	0x2e, 0xd6, 0x43, 0x3b, 0x6e, 0x79, 0x41, 0x44, 0xf4, 0xd3, 0x5d, 0xfd, 0xa4, 0xe3, 0xb5, 0x63,
	0x2d, 0x6c, 0xe3, 0x08, 0x4b, 0x45, 0xbf, 0x8b, 0x35, 0x5a, 0xd4, 0x4e, 0x77, 0xe5, 0x5b, 0x0d,
	0xdc, 0xc0, 0x49, 0x4d, 0x9f, 0xfc, 0x35, 0x6d, 0x93, 0xb7, 0x1b, 0x18, 0x37, 0x9a, 0x9e, 0x6e,
	0x87, 0xbe, 0x6e, 0x07, 0x01, 0x8e, 0xec, 0xc8, 0xc7, 0x01, 0x49, 0xab, 0x0a, 0xcf, 0x70, 0x01,
	0x98, 0xd4, 0x51, 0x0b, 0x96, 0x5f, 0x4f, 0x38, 0x0f, 0xa7, 0xc7, 0x6f, 0xbd, 0x56, 0xd8, 0xb4,
	0x23, 0xcf, 0xf4, 0x4e, 0x3a, 0x1e, 0x89, 0xa4, 0x57, 0x70, 0x2b, 0xbd, 0x60, 0x45, 0x69, 0xc9,
	0xf2, 0xdd, 0x12, 0xa8, 0x80, 0x07, 0xd7, 0x0d, 0x65, 0x3c, 0x50, 0xe5, 0xd8, 0x6e, 0x35, 0x9f,
	0x23, 0x41, 0x13, 0x32, 0x37, 0xc3, 0x59, 0xd0, 0x9a, 0x8b, 0x3e, 0x01, 0xb8, 0x2d, 0xe6, 0x23,
	0x21, 0x0e, 0x88, 0x27, 0x35, 0xe1, 0x06, 0x8f, 0x95, 0xb0, 0xdd, 0xd8, 0xab, 0x68, 0xdc, 0x3c,
	0x34, 0x0e, 0xc3, 0x50, 0xcf, 0x06, 0x6a, 0x61, 0x3c, 0x50, 0xef, 0x88, 0x35, 0x21, 0xb3, 0xc8,
	0x09, 0xe2, 0xdd, 0x1f, 0xe0, 0x20, 0x6a, 0xdb, 0x4e, 0x24, 0x70, 0xef, 0xa4, 0xa5, 0x85, 0xee,
	0x99, 0xa6, 0xcc, 0x3d, 0x05, 0x15, 0xb8, 0xcf, 0xf8, 0xf2, 0xee, 0x29, 0xd6, 0x32, 0xf7, 0x14,
	0x63, 0x9e, 0x7b, 0x8a, 0x93, 0xb9, 0xa7, 0x37, 0xd0, 0x67, 0x00, 0x77, 0x44, 0x72, 0x88, 0x11,
	0xd7, 0xdc, 0xc3, 0xb6, 0x77, 0xe4, 0x77, 0xe9, 0x24, 0x3c, 0x58, 0xe6, 0x01, 0x89, 0xe5, 0xbb,
	0x56, 0x98, 0x74, 0xa5, 0x13, 0xd9, 0x19, 0x0f, 0x54, 0x24, 0x66, 0x67, 0x9a, 0x91, 0x59, 0xe2,
	0x84, 0x10, 0xca, 0x86, 0xbe, 0x01, 0x78, 0x7f, 0xa9, 0xa2, 0x74, 0x56, 0x18, 0x6e, 0xe6, 0x58,
	0x4a, 0xa0, 0x72, 0x75, 0xa5, 0x61, 0x55, 0xd2, 0x61, 0x95, 0xe6, 0xc8, 0x45, 0xe6, 0x06, 0x2f,
	0x12, 0x59, 0xb0, 0x94, 0x68, 0x7b, 0xd3, 0xa9, 0x13, 0xa7, 0xed, 0x87, 0x93, 0x98, 0xd1, 0xf9,
	0x1c, 0xc0, 0x22, 0x61, 0x8e, 0xb3, 0x2d, 0x91, 0xc7, 0x03, 0xf5, 0xf6, 0x94, 0x84, 0x6b, 0x40,
	0xe6, 0x4d, 0xf6, 0xa4, 0xe6, 0xa2, 0x1e, 0xbc, 0x2b, 0x20, 0x48, 0xed, 0xbe, 0x87, 0xeb, 0x6c,
	0x7b, 0xba, 0x16, 0xf7, 0x72, 0x4e, 0xd9, 0xcb, 0x46, 0x39, 0xb5, 0xb9, 0x95, 0x57, 0x80, 0xcc,
	0x19, 0xbc, 0xbd, 0x5f, 0x6b, 0x70, 0x2d, 0x61, 0x97, 0x7e, 0x00, 0x58, 0xe4, 0xa2, 0x25, 0x3d,
	0xce, 0xf1, 0x2c, 0x78, 0x35, 0xe4, 0xea, 0x8a, 0xdd, 0x53, 0x6b, 0xe8, 0xe9, 0xc7, 0x9f, 0xff,
	0xbe, 0x5e, 0xd1, 0xa5, 0xaa, 0x3e, 0xf3, 0x58, 0xd1, 0xdc, 0x12, 0xbd, 0x27, 0x78, 0x5e, 0xfa,
	0xac, 0x4e, 0xfa, 0x23, 0x2d, 0xd1, 0xc9, 0xe5, 0x7b, 0x89, 0x4e, 0x3e, 0x9d, 0xf3, 0x74, 0x5e,
	0x2c, 0x4d, 0xa6, 0x93, 0x79, 0x08, 0xfa, 0xd2, 0x1f, 0x00, 0xe5, 0xf9, 0xfb, 0x2c, 0x3d, 0x5b,
	0x49, 0x44, 0x3e, 0x93, 0xf2, 0xfe, 0xe5, 0x2f, 0xa6, 0x46, 0x5e, 0x26, 0x46, 0x5e, 0x48, 0xc6,
	0x1c, 0x23, 0x56, 0x3d, 0xce, 0xf2, 0x9a, 0x77, 0xc5, 0x84, 0xb9, 0x2f, 0x7d, 0x07, 0x70, 0x9d,
	0xdd, 0x39, 0xe9, 0xa1, 0x58, 0x96, 0x20, 0x35, 0xf2, 0xa3, 0x55, 0x5a, 0x17, 0x0f, 0x9f, 0xdd,
	0x61, 0xa2, 0xf7, 0xb8, 0x8c, 0xf5, 0x0d, 0xf3, 0x6c, 0xa8, 0x80, 0xf3, 0xa1, 0x02, 0xfe, 0x0e,
	0x15, 0xf0, 0x65, 0xa4, 0x14, 0xce, 0x47, 0x4a, 0xe1, 0xf7, 0x48, 0x29, 0xbc, 0xdb, 0x6f, 0xf8,
	0xd1, 0x71, 0xa7, 0xae, 0x39, 0xb8, 0x35, 0x81, 0x3c, 0xc2, 0x9d, 0xc0, 0x4d, 0x3e, 0x9d, 0x93,
	0xff, 0xaa, 0xf5, 0x26, 0x76, 0x3e, 0x38, 0xc7, 0xb6, 0x1f, 0xe8, 0x5d, 0x66, 0x25, 0xe3, 0xd0,
	0x23, 0xf5, 0x6b, 0xc9, 0xa7, 0xf3, 0xc9, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x95, 0xf2, 0xeb,
	0xd0, 0xbe, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// PaymentTemplate queries info of a specific payment template.
	PaymentTemplate(ctx context.Context, in *QueryPaymentTemplateRequest, opts ...grpc.CallOption) (*QueryPaymentTemplateResponse, error)
	// PaymentContract queries info of a specific payment contract.
	PaymentContract(ctx context.Context, in *QueryPaymentContractRequest, opts ...grpc.CallOption) (*QueryPaymentContractResponse, error)
	// PaymentContractsByIdPrefix lists all payment contracts having an id with a specific prefix.
	PaymentContractsByIdPrefix(ctx context.Context, in *QueryPaymentContractsByIdPrefixRequest, opts ...grpc.CallOption) (*QueryPaymentContractsByIdPrefixResponse, error)
	// Subscription queries info of a specific Subscription.
	Subscription(ctx context.Context, in *QuerySubscriptionRequest, opts ...grpc.CallOption) (*QuerySubscriptionResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) PaymentTemplate(ctx context.Context, in *QueryPaymentTemplateRequest, opts ...grpc.CallOption) (*QueryPaymentTemplateResponse, error) {
	out := new(QueryPaymentTemplateResponse)
	err := c.cc.Invoke(ctx, "/ixo.payments.v1.Query/PaymentTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentContract(ctx context.Context, in *QueryPaymentContractRequest, opts ...grpc.CallOption) (*QueryPaymentContractResponse, error) {
	out := new(QueryPaymentContractResponse)
	err := c.cc.Invoke(ctx, "/ixo.payments.v1.Query/PaymentContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentContractsByIdPrefix(ctx context.Context, in *QueryPaymentContractsByIdPrefixRequest, opts ...grpc.CallOption) (*QueryPaymentContractsByIdPrefixResponse, error) {
	out := new(QueryPaymentContractsByIdPrefixResponse)
	err := c.cc.Invoke(ctx, "/ixo.payments.v1.Query/PaymentContractsByIdPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Subscription(ctx context.Context, in *QuerySubscriptionRequest, opts ...grpc.CallOption) (*QuerySubscriptionResponse, error) {
	out := new(QuerySubscriptionResponse)
	err := c.cc.Invoke(ctx, "/ixo.payments.v1.Query/Subscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// PaymentTemplate queries info of a specific payment template.
	PaymentTemplate(context.Context, *QueryPaymentTemplateRequest) (*QueryPaymentTemplateResponse, error)
	// PaymentContract queries info of a specific payment contract.
	PaymentContract(context.Context, *QueryPaymentContractRequest) (*QueryPaymentContractResponse, error)
	// PaymentContractsByIdPrefix lists all payment contracts having an id with a specific prefix.
	PaymentContractsByIdPrefix(context.Context, *QueryPaymentContractsByIdPrefixRequest) (*QueryPaymentContractsByIdPrefixResponse, error)
	// Subscription queries info of a specific Subscription.
	Subscription(context.Context, *QuerySubscriptionRequest) (*QuerySubscriptionResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) PaymentTemplate(ctx context.Context, req *QueryPaymentTemplateRequest) (*QueryPaymentTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentTemplate not implemented")
}
func (*UnimplementedQueryServer) PaymentContract(ctx context.Context, req *QueryPaymentContractRequest) (*QueryPaymentContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentContract not implemented")
}
func (*UnimplementedQueryServer) PaymentContractsByIdPrefix(ctx context.Context, req *QueryPaymentContractsByIdPrefixRequest) (*QueryPaymentContractsByIdPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentContractsByIdPrefix not implemented")
}
func (*UnimplementedQueryServer) Subscription(ctx context.Context, req *QuerySubscriptionRequest) (*QuerySubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscription not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_PaymentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPaymentTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.payments.v1.Query/PaymentTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentTemplate(ctx, req.(*QueryPaymentTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPaymentContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.payments.v1.Query/PaymentContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentContract(ctx, req.(*QueryPaymentContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentContractsByIdPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPaymentContractsByIdPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentContractsByIdPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.payments.v1.Query/PaymentContractsByIdPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentContractsByIdPrefix(ctx, req.(*QueryPaymentContractsByIdPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Subscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Subscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ixo.payments.v1.Query/Subscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Subscription(ctx, req.(*QuerySubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ixo.payments.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PaymentTemplate",
			Handler:    _Query_PaymentTemplate_Handler,
		},
		{
			MethodName: "PaymentContract",
			Handler:    _Query_PaymentContract_Handler,
		},
		{
			MethodName: "PaymentContractsByIdPrefix",
			Handler:    _Query_PaymentContractsByIdPrefix_Handler,
		},
		{
			MethodName: "Subscription",
			Handler:    _Query_Subscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ixo/payments/v1/query.proto",
}

func (m *QueryPaymentTemplateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentTemplateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentTemplateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentTemplateId) > 0 {
		i -= len(m.PaymentTemplateId)
		copy(dAtA[i:], m.PaymentTemplateId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PaymentTemplateId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPaymentTemplateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentTemplateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentTemplateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PaymentTemplate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPaymentContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentContractId) > 0 {
		i -= len(m.PaymentContractId)
		copy(dAtA[i:], m.PaymentContractId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PaymentContractId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPaymentContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PaymentContract.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPaymentContractsByIdPrefixRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentContractsByIdPrefixRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentContractsByIdPrefixRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentContractsIdPrefix) > 0 {
		i -= len(m.PaymentContractsIdPrefix)
		copy(dAtA[i:], m.PaymentContractsIdPrefix)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PaymentContractsIdPrefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPaymentContractsByIdPrefixResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaymentContractsByIdPrefixResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaymentContractsByIdPrefixResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentContracts) > 0 {
		for iNdEx := len(m.PaymentContracts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentContracts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionId) > 0 {
		i -= len(m.SubscriptionId)
		copy(dAtA[i:], m.SubscriptionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubscriptionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubscriptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubscriptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubscriptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Subscription.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPaymentTemplateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PaymentTemplateId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPaymentTemplateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PaymentTemplate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPaymentContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PaymentContractId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPaymentContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PaymentContract.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPaymentContractsByIdPrefixRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PaymentContractsIdPrefix)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPaymentContractsByIdPrefixResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentContracts) > 0 {
		for _, e := range m.PaymentContracts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubscriptionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubscriptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Subscription.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPaymentTemplateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentTemplateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentTemplateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTemplateId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentTemplateId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentTemplateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentTemplateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentTemplateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentContract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentContractsByIdPrefixRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentContractsByIdPrefixRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentContractsByIdPrefixRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentContractsIdPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentContractsIdPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaymentContractsByIdPrefixResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaymentContractsByIdPrefixResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaymentContractsByIdPrefixResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentContracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentContracts = append(m.PaymentContracts, PaymentContract{})
			if err := m.PaymentContracts[len(m.PaymentContracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubscriptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubscriptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubscriptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Subscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
