// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ixo/smartaccount/crypto/crypto.proto

package crypto

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PubKey defines an authn public key
type AuthnPubKey struct {
	// The key_id (or credential ID) is a unique identifier for a passkey.
	// This ID is provided by the authenticator when the passkey is created.
	// As it is not possible to retrieve the public key from the authenticator
	// after the passkey is created, if the user loses the public key - id
	// association, the key_id can be used to retrieve the public key.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Store the COSE algorithm identifier. Since authn allows multiple different
	// public key credential algorithm, eg.
	// -7(ES256) - ECDSA with SHA-256 on the P-256 curve
	// -257(RS256) - RSASSA-PKCS1-v1_5 with SHA-256
	// we need to store the algorithm identifier to be able to verify the
	// signature according to the algorithm the public key is using.
	CoseAlgorithm int32 `protobuf:"varint,2,opt,name=cose_algorithm,json=coseAlgorithm,proto3" json:"cose_algorithm,omitempty"`
	// The public key bytes
	Key []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *AuthnPubKey) Reset()      { *m = AuthnPubKey{} }
func (*AuthnPubKey) ProtoMessage() {}
func (*AuthnPubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_e21e0a2358462521, []int{0}
}
func (m *AuthnPubKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthnPubKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthnPubKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthnPubKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthnPubKey.Merge(m, src)
}
func (m *AuthnPubKey) XXX_Size() int {
	return m.Size()
}
func (m *AuthnPubKey) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthnPubKey.DiscardUnknown(m)
}

var xxx_messageInfo_AuthnPubKey proto.InternalMessageInfo

func (m *AuthnPubKey) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *AuthnPubKey) GetCoseAlgorithm() int32 {
	if m != nil {
		return m.CoseAlgorithm
	}
	return 0
}

func (m *AuthnPubKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func init() {
	proto.RegisterType((*AuthnPubKey)(nil), "ixo.smartaccount.crypto.AuthnPubKey")
}

func init() {
	proto.RegisterFile("ixo/smartaccount/crypto/crypto.proto", fileDescriptor_e21e0a2358462521)
}

var fileDescriptor_e21e0a2358462521 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xc9, 0xac, 0xc8, 0xd7,
	0x2f, 0xce, 0x4d, 0x2c, 0x2a, 0x49, 0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0xd1, 0x4f, 0x2e, 0xaa,
	0x2c, 0x28, 0xc9, 0x87, 0x52, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xe2, 0x99, 0x15, 0xf9,
	0x7a, 0xc8, 0xaa, 0xf4, 0x20, 0xd2, 0x52, 0x82, 0x89, 0xb9, 0x99, 0x79, 0xf9, 0xfa, 0x60, 0x12,
	0xa2, 0x56, 0x4a, 0x24, 0x3d, 0x3f, 0x3d, 0x1f, 0xcc, 0xd4, 0x07, 0xb1, 0x20, 0xa2, 0x4a, 0xd3,
	0x18, 0xb9, 0xb8, 0x1d, 0x4b, 0x4b, 0x32, 0xf2, 0x02, 0x4a, 0x93, 0xbc, 0x53, 0x2b, 0x85, 0x44,
	0xb9, 0xd8, 0xb2, 0x53, 0x2b, 0xe3, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x58,
	0xb3, 0x53, 0x2b, 0x3d, 0x53, 0x84, 0x54, 0xb9, 0xf8, 0x92, 0xf3, 0x8b, 0x53, 0xe3, 0x13, 0x73,
	0xd2, 0xf3, 0x8b, 0x32, 0x4b, 0x32, 0x72, 0x25, 0x98, 0x14, 0x18, 0x35, 0x58, 0x83, 0x78, 0x41,
	0xa2, 0x8e, 0x30, 0x41, 0x21, 0x01, 0x2e, 0xe6, 0xec, 0xd4, 0x4a, 0x09, 0x66, 0x05, 0x46, 0x0d,
	0x9e, 0x20, 0x10, 0xd3, 0xca, 0xbc, 0xeb, 0xf9, 0x06, 0x2d, 0x9c, 0x9e, 0x49, 0x04, 0xd9, 0xac,
	0x5b, 0x50, 0x9a, 0x94, 0x9d, 0x5a, 0x39, 0xe9, 0xf9, 0x06, 0x2d, 0x4e, 0x90, 0xdd, 0x69, 0x99,
	0xa9, 0x39, 0x29, 0x4e, 0xf1, 0x37, 0x1e, 0xca, 0x31, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91,
	0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3,
	0xb1, 0x1c, 0x43, 0x94, 0x63, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e,
	0x66, 0x45, 0x7e, 0x5a, 0x7e, 0x69, 0x5e, 0x4a, 0x62, 0x49, 0x66, 0x7e, 0x1e, 0x88, 0xa7, 0x9b,
	0x94, 0x93, 0x9f, 0x9c, 0x9d, 0x9c, 0x91, 0x98, 0x99, 0xa7, 0x5f, 0x66, 0xaa, 0x5f, 0x01, 0xb1,
	0x5a, 0x17, 0xd5, 0xee, 0x24, 0x36, 0x70, 0x00, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x80,
	0x2e, 0xab, 0xee, 0x6a, 0x01, 0x00, 0x00,
}

func (m *AuthnPubKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthnPubKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthnPubKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCrypto(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CoseAlgorithm != 0 {
		i = encodeVarintCrypto(dAtA, i, uint64(m.CoseAlgorithm))
		i--
		dAtA[i] = 0x10
	}
	if len(m.KeyId) > 0 {
		i -= len(m.KeyId)
		copy(dAtA[i:], m.KeyId)
		i = encodeVarintCrypto(dAtA, i, uint64(len(m.KeyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrypto(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrypto(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuthnPubKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovCrypto(uint64(l))
	}
	if m.CoseAlgorithm != 0 {
		n += 1 + sovCrypto(uint64(m.CoseAlgorithm))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCrypto(uint64(l))
	}
	return n
}

func sovCrypto(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrypto(x uint64) (n int) {
	return sovCrypto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthnPubKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrypto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthnPubKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthnPubKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrypto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrypto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrypto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoseAlgorithm", wireType)
			}
			m.CoseAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrypto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoseAlgorithm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrypto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrypto
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrypto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrypto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrypto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrypto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrypto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrypto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrypto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrypto
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrypto
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrypto
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrypto        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrypto          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrypto = fmt.Errorf("proto: unexpected end of group")
)
