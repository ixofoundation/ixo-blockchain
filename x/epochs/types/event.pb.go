// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ixo/epochs/v1beta1/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EpochStartEvent struct {
	// Epoch number, starting from 1.
	EpochNumber int64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	// The start timestamp of the epoch.
	StartTime time.Time `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
}

func (m *EpochStartEvent) Reset()         { *m = EpochStartEvent{} }
func (m *EpochStartEvent) String() string { return proto.CompactTextString(m) }
func (*EpochStartEvent) ProtoMessage()    {}
func (*EpochStartEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_36376c67a8742f5a, []int{0}
}
func (m *EpochStartEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochStartEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochStartEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochStartEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochStartEvent.Merge(m, src)
}
func (m *EpochStartEvent) XXX_Size() int {
	return m.Size()
}
func (m *EpochStartEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochStartEvent.DiscardUnknown(m)
}

var xxx_messageInfo_EpochStartEvent proto.InternalMessageInfo

func (m *EpochStartEvent) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *EpochStartEvent) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

type EpochEndEvent struct {
	// Epoch number, starting from 1.
	EpochNumber int64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
}

func (m *EpochEndEvent) Reset()         { *m = EpochEndEvent{} }
func (m *EpochEndEvent) String() string { return proto.CompactTextString(m) }
func (*EpochEndEvent) ProtoMessage()    {}
func (*EpochEndEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_36376c67a8742f5a, []int{1}
}
func (m *EpochEndEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochEndEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochEndEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochEndEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochEndEvent.Merge(m, src)
}
func (m *EpochEndEvent) XXX_Size() int {
	return m.Size()
}
func (m *EpochEndEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochEndEvent.DiscardUnknown(m)
}

var xxx_messageInfo_EpochEndEvent proto.InternalMessageInfo

func (m *EpochEndEvent) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*EpochStartEvent)(nil), "ixo.epochs.v1beta1.EpochStartEvent")
	proto.RegisterType((*EpochEndEvent)(nil), "ixo.epochs.v1beta1.EpochEndEvent")
}

func init() { proto.RegisterFile("ixo/epochs/v1beta1/event.proto", fileDescriptor_36376c67a8742f5a) }

var fileDescriptor_36376c67a8742f5a = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x63, 0x90, 0x10, 0xb8, 0x20, 0xa4, 0x88, 0xa1, 0xea, 0xe0, 0x94, 0x4e, 0x5d, 0xb0,
	0xd5, 0x22, 0x21, 0xb1, 0x16, 0x65, 0x65, 0x68, 0x99, 0x58, 0xaa, 0x38, 0x75, 0x1d, 0x8b, 0xc6,
	0x17, 0x25, 0x4e, 0x94, 0xbe, 0x45, 0x1f, 0xab, 0x63, 0x47, 0x26, 0x40, 0xc9, 0x8b, 0x20, 0x3b,
	0x64, 0x67, 0xf3, 0xdd, 0x77, 0xf7, 0x7f, 0xd6, 0x61, 0xa2, 0x6a, 0x60, 0x22, 0x83, 0x38, 0x29,
	0x58, 0x35, 0xe3, 0xc2, 0x44, 0x33, 0x26, 0x2a, 0xa1, 0x0d, 0xcd, 0x72, 0x30, 0xe0, 0xfb, 0xaa,
	0x06, 0xda, 0x71, 0xfa, 0xc7, 0x47, 0x77, 0x12, 0x24, 0x38, 0xcc, 0xec, 0xab, 0x9b, 0x1c, 0x05,
	0x12, 0x40, 0xee, 0x04, 0x73, 0x15, 0x2f, 0xb7, 0xcc, 0xa8, 0x54, 0x14, 0x26, 0x4a, 0xb3, 0x6e,
	0x60, 0xb2, 0xc7, 0xb7, 0xa1, 0x0d, 0x5a, 0x99, 0x28, 0x37, 0xa1, 0x75, 0xf8, 0xf7, 0xf8, 0xda,
	0x65, 0xaf, 0x75, 0x99, 0x72, 0x91, 0x0f, 0xd1, 0x18, 0x4d, 0xcf, 0x97, 0x03, 0xd7, 0x7b, 0x75,
	0x2d, 0xff, 0x05, 0xe3, 0xc2, 0x2e, 0xac, 0x6d, 0xdc, 0xf0, 0x6c, 0x8c, 0xa6, 0x83, 0xf9, 0x88,
	0x76, 0x2e, 0xda, 0xbb, 0xe8, 0x5b, 0xef, 0x5a, 0x5c, 0x1e, 0xbf, 0x02, 0xef, 0xf0, 0x1d, 0xa0,
	0xe5, 0x95, 0xdb, 0xb3, 0x64, 0x32, 0xc7, 0x37, 0x4e, 0x1d, 0xea, 0xcd, 0x7f, 0xc5, 0x8b, 0xd5,
	0xb1, 0x21, 0xe8, 0xd4, 0x10, 0xf4, 0xd3, 0x10, 0x74, 0x68, 0x89, 0x77, 0x6a, 0x89, 0xf7, 0xd9,
	0x12, 0xef, 0xfd, 0x59, 0x2a, 0x93, 0x94, 0x9c, 0xc6, 0x90, 0x32, 0x55, 0xc3, 0x16, 0x4a, 0xbd,
	0x89, 0x8c, 0x02, 0x6d, 0xab, 0x07, 0xbe, 0x83, 0xf8, 0x23, 0x4e, 0x22, 0xa5, 0x59, 0xf5, 0xc4,
	0xea, 0xfe, 0xb8, 0x66, 0x9f, 0x89, 0x82, 0x5f, 0xb8, 0x1f, 0x3f, 0xfe, 0x06, 0x00, 0x00, 0xff,
	0xff, 0xd2, 0x97, 0x58, 0x39, 0x77, 0x01, 0x00, 0x00,
}

func (m *EpochStartEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochStartEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochStartEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintEvent(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if m.EpochNumber != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochEndEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochEndEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochEndEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochNumber != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EpochStartEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovEvent(uint64(m.EpochNumber))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EpochEndEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovEvent(uint64(m.EpochNumber))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EpochStartEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochStartEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochStartEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochEndEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochEndEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochEndEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
