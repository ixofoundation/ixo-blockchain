// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ixo/entity/v1beta1/entity.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/ixofoundation/ixo-blockchain/x/iid/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	NftContractAddress string `protobuf:"bytes,1,opt,name=nftContractAddress,proto3" json:"nftContractAddress,omitempty"`
	NftContractMinter  string `protobuf:"bytes,2,opt,name=nftContractMinter,proto3" json:"nftContractMinter,omitempty"`
	CreateSequence     uint64 `protobuf:"varint,3,opt,name=createSequence,proto3" json:"createSequence,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_9631845bd4f69820, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetNftContractAddress() string {
	if m != nil {
		return m.NftContractAddress
	}
	return ""
}

func (m *Params) GetNftContractMinter() string {
	if m != nil {
		return m.NftContractMinter
	}
	return ""
}

func (m *Params) GetCreateSequence() uint64 {
	if m != nil {
		return m.CreateSequence
	}
	return 0
}

type Entity struct {
	// id represents the id for the entity document.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of entity, eg protocol or asset
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Start Date of the Entity as defined by the implementer and interpreted by
	// Client applications
	StartDate *time.Time `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3,stdtime" json:"start_date,omitempty"`
	// End Date of the Entity as defined by the implementer and interpreted by
	// Client applications
	EndDate *time.Time `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3,stdtime" json:"end_date,omitempty"`
	// Status of the Entity as defined by the implementer and interpreted by
	// Client applications
	Status int32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	// Address of the operator through which the Entity was created
	RelayerNode string `protobuf:"bytes,6,opt,name=relayer_node,json=relayerNode,proto3" json:"relayer_node,omitempty"`
	// Credentials of the enitity to be verified
	Credentials []string `protobuf:"bytes,7,rep,name=credentials,proto3" json:"credentials,omitempty"`
	// Used as check whether the credentials of entity is verified
	EntityVerified bool `protobuf:"varint,8,opt,name=entity_verified,json=entityVerified,proto3" json:"entity_verified,omitempty"`
	// Metadata concerning the Entity such as versionId, created, updated and
	// deactivated
	Metadata *EntityMetadata `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// module accounts created for entity
	Accounts []*EntityAccount `protobuf:"bytes,10,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (m *Entity) Reset()         { *m = Entity{} }
func (m *Entity) String() string { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()    {}
func (*Entity) Descriptor() ([]byte, []int) {
	return fileDescriptor_9631845bd4f69820, []int{1}
}
func (m *Entity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entity.Merge(m, src)
}
func (m *Entity) XXX_Size() int {
	return m.Size()
}
func (m *Entity) XXX_DiscardUnknown() {
	xxx_messageInfo_Entity.DiscardUnknown(m)
}

var xxx_messageInfo_Entity proto.InternalMessageInfo

func (m *Entity) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Entity) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Entity) GetStartDate() *time.Time {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *Entity) GetEndDate() *time.Time {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *Entity) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Entity) GetRelayerNode() string {
	if m != nil {
		return m.RelayerNode
	}
	return ""
}

func (m *Entity) GetCredentials() []string {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *Entity) GetEntityVerified() bool {
	if m != nil {
		return m.EntityVerified
	}
	return false
}

func (m *Entity) GetMetadata() *EntityMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Entity) GetAccounts() []*EntityAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type EntityAccount struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *EntityAccount) Reset()         { *m = EntityAccount{} }
func (m *EntityAccount) String() string { return proto.CompactTextString(m) }
func (*EntityAccount) ProtoMessage()    {}
func (*EntityAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_9631845bd4f69820, []int{2}
}
func (m *EntityAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntityAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntityAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntityAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityAccount.Merge(m, src)
}
func (m *EntityAccount) XXX_Size() int {
	return m.Size()
}
func (m *EntityAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityAccount.DiscardUnknown(m)
}

var xxx_messageInfo_EntityAccount proto.InternalMessageInfo

func (m *EntityAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EntityAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// EntityMetadata defines metadata associated to a entity
type EntityMetadata struct {
	VersionId string     `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	Created   *time.Time `protobuf:"bytes,2,opt,name=created,proto3,stdtime" json:"created,omitempty"`
	Updated   *time.Time `protobuf:"bytes,3,opt,name=updated,proto3,stdtime" json:"updated,omitempty"`
}

func (m *EntityMetadata) Reset()         { *m = EntityMetadata{} }
func (m *EntityMetadata) String() string { return proto.CompactTextString(m) }
func (*EntityMetadata) ProtoMessage()    {}
func (*EntityMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_9631845bd4f69820, []int{3}
}
func (m *EntityMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntityMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntityMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntityMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityMetadata.Merge(m, src)
}
func (m *EntityMetadata) XXX_Size() int {
	return m.Size()
}
func (m *EntityMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_EntityMetadata proto.InternalMessageInfo

func (m *EntityMetadata) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

func (m *EntityMetadata) GetCreated() *time.Time {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *EntityMetadata) GetUpdated() *time.Time {
	if m != nil {
		return m.Updated
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "ixo.entity.v1beta1.Params")
	proto.RegisterType((*Entity)(nil), "ixo.entity.v1beta1.Entity")
	proto.RegisterType((*EntityAccount)(nil), "ixo.entity.v1beta1.EntityAccount")
	proto.RegisterType((*EntityMetadata)(nil), "ixo.entity.v1beta1.EntityMetadata")
}

func init() { proto.RegisterFile("ixo/entity/v1beta1/entity.proto", fileDescriptor_9631845bd4f69820) }

var fileDescriptor_9631845bd4f69820 = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xbf, 0x6e, 0x13, 0x4f,
	0x10, 0xce, 0xc6, 0x8e, 0xff, 0x8c, 0x7f, 0x3f, 0x23, 0x56, 0x08, 0x1d, 0x91, 0x38, 0x5f, 0x5c,
	0x80, 0x0b, 0xb8, 0x53, 0x82, 0x44, 0x11, 0x04, 0x28, 0x09, 0x14, 0x14, 0x41, 0xd1, 0x81, 0x28,
	0x68, 0xac, 0xf5, 0xed, 0xd8, 0x59, 0xe1, 0xdb, 0x35, 0x7b, 0x7b, 0x91, 0xf3, 0x12, 0x28, 0x8f,
	0xc0, 0x0b, 0x50, 0xf2, 0x0e, 0x94, 0x29, 0xe9, 0x40, 0x49, 0xc3, 0x63, 0xa0, 0xdb, 0x5d, 0x5b,
	0x09, 0x01, 0x29, 0xdd, 0xcc, 0x37, 0xdf, 0x37, 0x3b, 0x73, 0xf3, 0xe9, 0xa0, 0x27, 0xe6, 0x2a,
	0x41, 0x69, 0x84, 0x39, 0x4e, 0x8e, 0x36, 0x47, 0x68, 0xd8, 0xa6, 0x4f, 0xe3, 0x99, 0x56, 0x46,
	0x51, 0x2a, 0xe6, 0x2a, 0xf6, 0x88, 0x27, 0xac, 0xdf, 0x9a, 0xa8, 0x89, 0xb2, 0xe5, 0xa4, 0x8a,
	0x1c, 0x73, 0xfd, 0x4e, 0xd5, 0x4a, 0x08, 0xbe, 0xec, 0x23, 0x04, 0xf7, 0xa5, 0xde, 0x44, 0xa9,
	0xc9, 0x14, 0x13, 0x9b, 0x8d, 0xca, 0x71, 0x62, 0x44, 0x8e, 0x85, 0x61, 0xf9, 0xcc, 0x11, 0xfa,
	0x9f, 0x08, 0x34, 0x0e, 0x98, 0x66, 0x79, 0x41, 0x63, 0xa0, 0x72, 0x6c, 0xf6, 0x94, 0x34, 0x9a,
	0x65, 0x66, 0x87, 0x73, 0x8d, 0x45, 0x11, 0x90, 0x88, 0x0c, 0xda, 0xe9, 0x5f, 0x2a, 0xf4, 0x01,
	0xdc, 0xbc, 0x80, 0xee, 0x0b, 0x69, 0x50, 0x07, 0xab, 0x96, 0x7e, 0xb5, 0x40, 0xef, 0x41, 0x37,
	0xd3, 0xc8, 0x0c, 0xbe, 0xc1, 0x8f, 0x25, 0xca, 0x0c, 0x83, 0x5a, 0x44, 0x06, 0xf5, 0xf4, 0x0f,
	0xb4, 0xff, 0xb5, 0x06, 0x8d, 0x97, 0x76, 0x6b, 0xda, 0x85, 0x55, 0xc1, 0xfd, 0x00, 0xab, 0x82,
	0x53, 0x0a, 0x75, 0x73, 0x3c, 0x43, 0xff, 0x86, 0x8d, 0xe9, 0x73, 0x80, 0xc2, 0x30, 0x6d, 0x86,
	0x9c, 0x19, 0xd7, 0xb2, 0xb3, 0xb5, 0x1e, 0xbb, 0xad, 0xe3, 0xc5, 0xd6, 0xf1, 0xdb, 0xc5, 0xd6,
	0xbb, 0xf5, 0x93, 0x1f, 0x3d, 0x92, 0xb6, 0xad, 0xe6, 0x05, 0x33, 0x48, 0x9f, 0x40, 0x0b, 0x25,
	0x77, 0xf2, 0xfa, 0x35, 0xe5, 0x4d, 0x94, 0xdc, 0x8a, 0x6f, 0x43, 0xa3, 0x30, 0xcc, 0x94, 0x45,
	0xb0, 0x16, 0x91, 0xc1, 0x5a, 0xea, 0x33, 0xba, 0x01, 0xff, 0x69, 0x9c, 0xb2, 0x63, 0xd4, 0x43,
	0xa9, 0x38, 0x06, 0x0d, 0x3b, 0x71, 0xc7, 0x63, 0xaf, 0x15, 0x47, 0x1a, 0x41, 0x27, 0xd3, 0xc8,
	0xab, 0x03, 0xb3, 0x69, 0x11, 0x34, 0xa3, 0x5a, 0xc5, 0xb8, 0x00, 0xd1, 0xfb, 0x70, 0xc3, 0x9d,
	0x7f, 0x78, 0x84, 0x5a, 0x8c, 0x05, 0xf2, 0xa0, 0x15, 0x91, 0x41, 0x2b, 0xed, 0x3a, 0xf8, 0x9d,
	0x47, 0xe9, 0x33, 0x68, 0xe5, 0x68, 0x18, 0x67, 0x86, 0x05, 0x6d, 0xbb, 0x42, 0x3f, 0xbe, 0x6a,
	0x9e, 0xd8, 0x7d, 0xd5, 0x7d, 0xcf, 0x4c, 0x97, 0x1a, 0xfa, 0x14, 0x5a, 0x2c, 0xcb, 0x54, 0x29,
	0x4d, 0x11, 0x40, 0x54, 0x1b, 0x74, 0xb6, 0x36, 0xfe, 0xad, 0xdf, 0x71, 0xcc, 0x74, 0x29, 0xd9,
	0xae, 0xff, 0xfa, 0xdc, 0x23, 0xfd, 0x3d, 0xf8, 0xff, 0x12, 0xa1, 0xba, 0x96, 0x64, 0x39, 0xfa,
	0xfb, 0xd9, 0x98, 0x06, 0xd0, 0x64, 0xde, 0x57, 0xee, 0x88, 0x8b, 0xd4, 0x37, 0xf9, 0x42, 0xa0,
	0x7b, 0x79, 0x4c, 0x7a, 0x17, 0xe0, 0x08, 0x75, 0x21, 0x94, 0x1c, 0x2e, 0xcd, 0xd0, 0xf6, 0xc8,
	0x2b, 0x4e, 0xb7, 0xa1, 0xe9, 0x0c, 0xc4, 0x6d, 0xc7, 0x6b, 0x5d, 0xcf, 0x0b, 0x2a, 0x6d, 0x39,
	0xe3, 0x56, 0x7b, 0x5d, 0xe3, 0x2c, 0x04, 0x6e, 0xde, 0xdd, 0x83, 0x6f, 0x67, 0x21, 0x39, 0x3d,
	0x0b, 0xc9, 0xcf, 0xb3, 0x90, 0x9c, 0x9c, 0x87, 0x2b, 0xa7, 0xe7, 0xe1, 0xca, 0xf7, 0xf3, 0x70,
	0xe5, 0xfd, 0xe3, 0x89, 0x30, 0x87, 0xe5, 0x28, 0xce, 0x54, 0x9e, 0x88, 0xb9, 0x1a, 0xab, 0x52,
	0x72, 0x66, 0x84, 0x92, 0x55, 0xf6, 0x70, 0x34, 0x55, 0xd9, 0x87, 0xec, 0x90, 0x09, 0x99, 0xcc,
	0x17, 0x3f, 0x81, 0xca, 0xce, 0xc5, 0xa8, 0x61, 0x9f, 0x7e, 0xf4, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x5e, 0xde, 0xec, 0xdd, 0x1f, 0x04, 0x00, 0x00,
}

func (this *Entity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Entity)
	if !ok {
		that2, ok := that.(Entity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.StartDate == nil {
		if this.StartDate != nil {
			return false
		}
	} else if !this.StartDate.Equal(*that1.StartDate) {
		return false
	}
	if that1.EndDate == nil {
		if this.EndDate != nil {
			return false
		}
	} else if !this.EndDate.Equal(*that1.EndDate) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.RelayerNode != that1.RelayerNode {
		return false
	}
	if len(this.Credentials) != len(that1.Credentials) {
		return false
	}
	for i := range this.Credentials {
		if this.Credentials[i] != that1.Credentials[i] {
			return false
		}
	}
	if this.EntityVerified != that1.EntityVerified {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.Accounts) != len(that1.Accounts) {
		return false
	}
	for i := range this.Accounts {
		if !this.Accounts[i].Equal(that1.Accounts[i]) {
			return false
		}
	}
	return true
}
func (this *EntityAccount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntityAccount)
	if !ok {
		that2, ok := that.(EntityAccount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *EntityMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntityMetadata)
	if !ok {
		that2, ok := that.(EntityMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VersionId != that1.VersionId {
		return false
	}
	if that1.Created == nil {
		if this.Created != nil {
			return false
		}
	} else if !this.Created.Equal(*that1.Created) {
		return false
	}
	if that1.Updated == nil {
		if this.Updated != nil {
			return false
		}
	} else if !this.Updated.Equal(*that1.Updated) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateSequence != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.CreateSequence))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NftContractMinter) > 0 {
		i -= len(m.NftContractMinter)
		copy(dAtA[i:], m.NftContractMinter)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.NftContractMinter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftContractAddress) > 0 {
		i -= len(m.NftContractAddress)
		copy(dAtA[i:], m.NftContractAddress)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.NftContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Entity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.EntityVerified {
		i--
		if m.EntityVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Credentials) > 0 {
		for iNdEx := len(m.Credentials) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Credentials[iNdEx])
			copy(dAtA[i:], m.Credentials[iNdEx])
			i = encodeVarintEntity(dAtA, i, uint64(len(m.Credentials[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RelayerNode) > 0 {
		i -= len(m.RelayerNode)
		copy(dAtA[i:], m.RelayerNode)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.RelayerNode)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.EndDate != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintEntity(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x22
	}
	if m.StartDate != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintEntity(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntityAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntityAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntityAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntityMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntityMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntityMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Updated != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Updated, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Updated):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintEntity(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x1a
	}
	if m.Created != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Created):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintEntity(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VersionId) > 0 {
		i -= len(m.VersionId)
		copy(dAtA[i:], m.VersionId)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.VersionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEntity(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftContractAddress)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.NftContractMinter)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.CreateSequence != 0 {
		n += 1 + sovEntity(uint64(m.CreateSequence))
	}
	return n
}

func (m *Entity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.StartDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.EndDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovEntity(uint64(m.Status))
	}
	l = len(m.RelayerNode)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if len(m.Credentials) > 0 {
		for _, s := range m.Credentials {
			l = len(s)
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if m.EntityVerified {
		n += 2
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovEntity(uint64(l))
	}
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	return n
}

func (m *EntityAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *EntityMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VersionId)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Created != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Created)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Updated != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Updated)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func sovEntity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntity(x uint64) (n int) {
	return sovEntity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftContractMinter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftContractMinter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateSequence", wireType)
			}
			m.CreateSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayerNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = append(m.Credentials, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EntityVerified = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &EntityMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &EntityAccount{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntityAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntityMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updated == nil {
				m.Updated = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Updated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEntity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEntity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEntity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEntity = fmt.Errorf("proto: unexpected end of group")
)
