// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ixo/iid/v1beta1/iid.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IidDocument struct {
	// @context is spec for did document.
	Context []*Context `protobuf:"bytes,1,rep,name=context,proto3" json:"@context,omitempty"`
	// id represents the id for the did document.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// A DID controller is an entity that is authorized to make changes to a DID
	// document. cfr. https://www.w3.org/TR/did-core/#did-controller
	Controller []string `protobuf:"bytes,3,rep,name=controller,proto3" json:"controller,omitempty"`
	// A DID document can express verification methods,
	// such as cryptographic public keys, which can be used
	// to authenticate or authorize interactions with the DID subject or
	// associated parties. https://www.w3.org/TR/did-core/#verification-methods
	VerificationMethod []*VerificationMethod `protobuf:"bytes,4,rep,name=verificationMethod,proto3" json:"verificationMethod,omitempty"`
	// Services are used in DID documents to express ways of communicating
	// with the DID subject or associated entities.
	// https://www.w3.org/TR/did-core/#services
	Service []*Service `protobuf:"bytes,5,rep,name=service,proto3" json:"service,omitempty"`
	// NOTE: below this line there are the relationships
	// Authentication represents public key associated with the did document.
	// cfr. https://www.w3.org/TR/did-core/#authentication
	Authentication []string `protobuf:"bytes,6,rep,name=authentication,proto3" json:"authentication,omitempty"`
	// Used to specify how the DID subject is expected to express claims,
	// such as for the purposes of issuing a Verifiable Credential.
	// cfr. https://www.w3.org/TR/did-core/#assertion
	AssertionMethod []string `protobuf:"bytes,7,rep,name=assertionMethod,proto3" json:"assertionMethod,omitempty"`
	// used to specify how an entity can generate encryption material
	// in order to transmit confidential information intended for the DID subject.
	// https://www.w3.org/TR/did-core/#key-agreement
	KeyAgreement []string `protobuf:"bytes,8,rep,name=keyAgreement,proto3" json:"keyAgreement,omitempty"`
	// Used to specify a verification method that might be used by the DID subject
	// to invoke a cryptographic capability, such as the authorization
	// to update the DID Document.
	// https://www.w3.org/TR/did-core/#capability-invocation
	CapabilityInvocation []string `protobuf:"bytes,9,rep,name=capabilityInvocation,proto3" json:"capabilityInvocation,omitempty"`
	// Used to specify a mechanism that might be used by the DID subject
	// to delegate a cryptographic capability to another party.
	// https://www.w3.org/TR/did-core/#capability-delegation
	CapabilityDelegation []string          `protobuf:"bytes,10,rep,name=capabilityDelegation,proto3" json:"capabilityDelegation,omitempty"`
	LinkedResource       []*LinkedResource `protobuf:"bytes,11,rep,name=linkedResource,proto3" json:"linkedResource,omitempty"`
	LinkedClaim          []*LinkedClaim    `protobuf:"bytes,12,rep,name=linkedClaim,proto3" json:"linkedClaim,omitempty"`
	AccordedRight        []*AccordedRight  `protobuf:"bytes,13,rep,name=accordedRight,proto3" json:"accordedRight,omitempty"`
	LinkedEntity         []*LinkedEntity   `protobuf:"bytes,14,rep,name=linkedEntity,proto3" json:"linkedEntity,omitempty"`
	AlsoKnownAs          string            `protobuf:"bytes,15,opt,name=alsoKnownAs,proto3" json:"alsoKnownAs,omitempty"`
	// Metadata concerning the IidDocument such as versionId, created, updated and
	// deactivated
	Metadata *IidMetadata `protobuf:"bytes,16,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *IidDocument) Reset()         { *m = IidDocument{} }
func (m *IidDocument) String() string { return proto.CompactTextString(m) }
func (*IidDocument) ProtoMessage()    {}
func (*IidDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_49fbbae1d42aab68, []int{0}
}
func (m *IidDocument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IidDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IidDocument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IidDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IidDocument.Merge(m, src)
}
func (m *IidDocument) XXX_Size() int {
	return m.Size()
}
func (m *IidDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_IidDocument.DiscardUnknown(m)
}

var xxx_messageInfo_IidDocument proto.InternalMessageInfo

func init() {
	proto.RegisterType((*IidDocument)(nil), "ixo.iid.v1beta1.IidDocument")
}

func init() { proto.RegisterFile("ixo/iid/v1beta1/iid.proto", fileDescriptor_49fbbae1d42aab68) }

var fileDescriptor_49fbbae1d42aab68 = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x41, 0x6f, 0x12, 0x41,
	0x14, 0xc7, 0xd9, 0x56, 0x0b, 0x0c, 0x14, 0xcc, 0xa4, 0x31, 0x63, 0xd5, 0x85, 0xd4, 0xc4, 0x70,
	0x50, 0x36, 0xc5, 0x68, 0x8c, 0x07, 0x23, 0x2d, 0xc6, 0xa0, 0x36, 0x31, 0xd3, 0xc4, 0x83, 0xb7,
	0x61, 0xf7, 0x75, 0x79, 0x61, 0x77, 0x86, 0xec, 0x0e, 0x08, 0xdf, 0xc0, 0xa3, 0x1f, 0xa1, 0x1f,
	0xc7, 0x63, 0x8f, 0x9e, 0x8c, 0x81, 0x4b, 0xe3, 0xa7, 0x30, 0x3b, 0x4b, 0x15, 0x16, 0xb8, 0xcd,
	0xbc, 0xff, 0xef, 0xff, 0x9f, 0x37, 0xb3, 0xfb, 0xc8, 0x3d, 0x9c, 0x28, 0x07, 0xd1, 0x73, 0xc6,
	0xc7, 0x3d, 0xd0, 0xe2, 0x38, 0x59, 0x37, 0x87, 0x91, 0xd2, 0x8a, 0x56, 0x71, 0xa2, 0x9a, 0xc9,
	0x76, 0x21, 0x1d, 0x1e, 0xf8, 0xca, 0x57, 0x46, 0x73, 0x92, 0x55, 0x8a, 0x1d, 0xde, 0xcf, 0x26,
	0xe8, 0xe9, 0x10, 0xe2, 0x54, 0x3c, 0xba, 0xde, 0x23, 0xa5, 0x2e, 0x7a, 0x1d, 0xe5, 0x8e, 0x42,
	0x90, 0x9a, 0xbe, 0x27, 0x79, 0x57, 0x49, 0x0d, 0x13, 0xcd, 0xac, 0xfa, 0x6e, 0xa3, 0xd4, 0x62,
	0xcd, 0xcc, 0x29, 0xcd, 0xd3, 0x54, 0x3f, 0xb9, 0xfb, 0xe7, 0x57, 0x8d, 0xbe, 0x59, 0xd0, 0x4f,
	0x54, 0x88, 0x1a, 0xc2, 0xa1, 0x9e, 0xf2, 0x9b, 0x00, 0x5a, 0x21, 0x3b, 0xe8, 0xb1, 0x9d, 0xba,
	0xd5, 0x28, 0xf2, 0x1d, 0xf4, 0xa8, 0x4d, 0x48, 0x22, 0x45, 0x2a, 0x08, 0x20, 0x62, 0xbb, 0xf5,
	0xdd, 0x46, 0x91, 0x2f, 0x55, 0xe8, 0x39, 0xa1, 0x63, 0x88, 0xf0, 0x02, 0x5d, 0xa1, 0x51, 0xc9,
	0x33, 0xd0, 0x7d, 0xe5, 0xb1, 0x5b, 0xa6, 0x8d, 0x47, 0x6b, 0x6d, 0x7c, 0x5e, 0x43, 0xf9, 0x06,
	0x3b, 0x6d, 0x91, 0x7c, 0x0c, 0xd1, 0x18, 0x5d, 0x60, 0xb7, 0xb7, 0x5c, 0xe8, 0x3c, 0xd5, 0xf9,
	0x0d, 0x48, 0x1f, 0x93, 0x8a, 0x18, 0xe9, 0x3e, 0x48, 0xbd, 0xc8, 0x62, 0x7b, 0xa6, 0xd9, 0x4c,
	0x95, 0x36, 0x48, 0x55, 0xc4, 0x31, 0x44, 0x4b, 0xdd, 0xe6, 0x0d, 0x98, 0x2d, 0xd3, 0x23, 0x52,
	0x1e, 0xc0, 0xb4, 0xed, 0x47, 0x00, 0xc9, 0x33, 0xb3, 0x82, 0xc1, 0x56, 0x6a, 0xb4, 0x45, 0x0e,
	0x5c, 0x31, 0x14, 0x3d, 0x0c, 0x50, 0x4f, 0xbb, 0x72, 0xac, 0x16, 0x67, 0x17, 0x0d, 0xbb, 0x51,
	0x5b, 0xf5, 0x74, 0x20, 0x00, 0x3f, 0xf5, 0x90, 0xac, 0xe7, 0xbf, 0x46, 0xdf, 0x91, 0x4a, 0x80,
	0x72, 0x00, 0x1e, 0x87, 0x58, 0x8d, 0x22, 0x17, 0x58, 0xc9, 0x3c, 0x4c, 0x6d, 0xed, 0x61, 0x3e,
	0xae, 0x60, 0x3c, 0x63, 0xa3, 0xaf, 0x49, 0x29, 0xad, 0x9c, 0x06, 0x02, 0x43, 0x56, 0x36, 0x29,
	0x0f, 0xb6, 0xa4, 0x18, 0x86, 0x2f, 0x1b, 0x68, 0x87, 0xec, 0x0b, 0xd7, 0x55, 0x91, 0x07, 0x1e,
	0x47, 0xbf, 0xaf, 0xd9, 0xbe, 0x49, 0xb0, 0xd7, 0x12, 0xda, 0xcb, 0x14, 0x5f, 0x35, 0xd1, 0x36,
	0x29, 0xa7, 0xa1, 0x6f, 0xa5, 0x46, 0x3d, 0x65, 0x15, 0x13, 0xf2, 0x70, 0x4b, 0x1b, 0x29, 0xc4,
	0x57, 0x2c, 0xb4, 0x4e, 0x4a, 0x22, 0x88, 0xd5, 0x07, 0xa9, 0xbe, 0xca, 0x76, 0xcc, 0xaa, 0xe6,
	0x8f, 0x5d, 0x2e, 0xd1, 0x97, 0xa4, 0x10, 0x82, 0x16, 0x9e, 0xd0, 0x82, 0xdd, 0xa9, 0x5b, 0x1b,
	0xef, 0xd9, 0x45, 0xef, 0x6c, 0xc1, 0xf0, 0x7f, 0xf4, 0xab, 0xc2, 0xb7, 0xcb, 0x5a, 0xee, 0xfa,
	0xb2, 0x66, 0x9d, 0x7c, 0xfa, 0x31, 0xb3, 0xad, 0xab, 0x99, 0x6d, 0xfd, 0x9e, 0xd9, 0xd6, 0xf7,
	0xb9, 0x9d, 0xbb, 0x9a, 0xdb, 0xb9, 0x9f, 0x73, 0x3b, 0xf7, 0xe5, 0x85, 0x8f, 0xba, 0x3f, 0xea,
	0x35, 0x5d, 0x15, 0x3a, 0x38, 0x51, 0x17, 0x6a, 0x24, 0x3d, 0xf3, 0xad, 0x92, 0xdd, 0xd3, 0x5e,
	0xa0, 0xdc, 0x81, 0xdb, 0x17, 0x28, 0x9d, 0xf1, 0x73, 0x67, 0x62, 0x46, 0xd9, 0x8c, 0x70, 0x6f,
	0xcf, 0xcc, 0xf0, 0xb3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x0d, 0x3e, 0x0f, 0x24, 0x04,
	0x00, 0x00,
}

func (this *IidDocument) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IidDocument)
	if !ok {
		that2, ok := that.(IidDocument)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Context) != len(that1.Context) {
		return false
	}
	for i := range this.Context {
		if !this.Context[i].Equal(that1.Context[i]) {
			return false
		}
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Controller) != len(that1.Controller) {
		return false
	}
	for i := range this.Controller {
		if this.Controller[i] != that1.Controller[i] {
			return false
		}
	}
	if len(this.VerificationMethod) != len(that1.VerificationMethod) {
		return false
	}
	for i := range this.VerificationMethod {
		if !this.VerificationMethod[i].Equal(that1.VerificationMethod[i]) {
			return false
		}
	}
	if len(this.Service) != len(that1.Service) {
		return false
	}
	for i := range this.Service {
		if !this.Service[i].Equal(that1.Service[i]) {
			return false
		}
	}
	if len(this.Authentication) != len(that1.Authentication) {
		return false
	}
	for i := range this.Authentication {
		if this.Authentication[i] != that1.Authentication[i] {
			return false
		}
	}
	if len(this.AssertionMethod) != len(that1.AssertionMethod) {
		return false
	}
	for i := range this.AssertionMethod {
		if this.AssertionMethod[i] != that1.AssertionMethod[i] {
			return false
		}
	}
	if len(this.KeyAgreement) != len(that1.KeyAgreement) {
		return false
	}
	for i := range this.KeyAgreement {
		if this.KeyAgreement[i] != that1.KeyAgreement[i] {
			return false
		}
	}
	if len(this.CapabilityInvocation) != len(that1.CapabilityInvocation) {
		return false
	}
	for i := range this.CapabilityInvocation {
		if this.CapabilityInvocation[i] != that1.CapabilityInvocation[i] {
			return false
		}
	}
	if len(this.CapabilityDelegation) != len(that1.CapabilityDelegation) {
		return false
	}
	for i := range this.CapabilityDelegation {
		if this.CapabilityDelegation[i] != that1.CapabilityDelegation[i] {
			return false
		}
	}
	if len(this.LinkedResource) != len(that1.LinkedResource) {
		return false
	}
	for i := range this.LinkedResource {
		if !this.LinkedResource[i].Equal(that1.LinkedResource[i]) {
			return false
		}
	}
	if len(this.LinkedClaim) != len(that1.LinkedClaim) {
		return false
	}
	for i := range this.LinkedClaim {
		if !this.LinkedClaim[i].Equal(that1.LinkedClaim[i]) {
			return false
		}
	}
	if len(this.AccordedRight) != len(that1.AccordedRight) {
		return false
	}
	for i := range this.AccordedRight {
		if !this.AccordedRight[i].Equal(that1.AccordedRight[i]) {
			return false
		}
	}
	if len(this.LinkedEntity) != len(that1.LinkedEntity) {
		return false
	}
	for i := range this.LinkedEntity {
		if !this.LinkedEntity[i].Equal(that1.LinkedEntity[i]) {
			return false
		}
	}
	if this.AlsoKnownAs != that1.AlsoKnownAs {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (m *IidDocument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IidDocument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IidDocument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIid(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.AlsoKnownAs) > 0 {
		i -= len(m.AlsoKnownAs)
		copy(dAtA[i:], m.AlsoKnownAs)
		i = encodeVarintIid(dAtA, i, uint64(len(m.AlsoKnownAs)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.LinkedEntity) > 0 {
		for iNdEx := len(m.LinkedEntity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LinkedEntity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIid(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.AccordedRight) > 0 {
		for iNdEx := len(m.AccordedRight) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccordedRight[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIid(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.LinkedClaim) > 0 {
		for iNdEx := len(m.LinkedClaim) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LinkedClaim[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIid(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.LinkedResource) > 0 {
		for iNdEx := len(m.LinkedResource) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LinkedResource[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIid(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.CapabilityDelegation) > 0 {
		for iNdEx := len(m.CapabilityDelegation) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CapabilityDelegation[iNdEx])
			copy(dAtA[i:], m.CapabilityDelegation[iNdEx])
			i = encodeVarintIid(dAtA, i, uint64(len(m.CapabilityDelegation[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.CapabilityInvocation) > 0 {
		for iNdEx := len(m.CapabilityInvocation) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CapabilityInvocation[iNdEx])
			copy(dAtA[i:], m.CapabilityInvocation[iNdEx])
			i = encodeVarintIid(dAtA, i, uint64(len(m.CapabilityInvocation[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.KeyAgreement) > 0 {
		for iNdEx := len(m.KeyAgreement) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyAgreement[iNdEx])
			copy(dAtA[i:], m.KeyAgreement[iNdEx])
			i = encodeVarintIid(dAtA, i, uint64(len(m.KeyAgreement[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.AssertionMethod) > 0 {
		for iNdEx := len(m.AssertionMethod) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AssertionMethod[iNdEx])
			copy(dAtA[i:], m.AssertionMethod[iNdEx])
			i = encodeVarintIid(dAtA, i, uint64(len(m.AssertionMethod[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Authentication) > 0 {
		for iNdEx := len(m.Authentication) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Authentication[iNdEx])
			copy(dAtA[i:], m.Authentication[iNdEx])
			i = encodeVarintIid(dAtA, i, uint64(len(m.Authentication[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Service) > 0 {
		for iNdEx := len(m.Service) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Service[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIid(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.VerificationMethod) > 0 {
		for iNdEx := len(m.VerificationMethod) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VerificationMethod[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIid(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Controller) > 0 {
		for iNdEx := len(m.Controller) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Controller[iNdEx])
			copy(dAtA[i:], m.Controller[iNdEx])
			i = encodeVarintIid(dAtA, i, uint64(len(m.Controller[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintIid(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Context) > 0 {
		for iNdEx := len(m.Context) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Context[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIid(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintIid(dAtA []byte, offset int, v uint64) int {
	offset -= sovIid(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IidDocument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Context) > 0 {
		for _, e := range m.Context {
			l = e.Size()
			n += 1 + l + sovIid(uint64(l))
		}
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIid(uint64(l))
	}
	if len(m.Controller) > 0 {
		for _, s := range m.Controller {
			l = len(s)
			n += 1 + l + sovIid(uint64(l))
		}
	}
	if len(m.VerificationMethod) > 0 {
		for _, e := range m.VerificationMethod {
			l = e.Size()
			n += 1 + l + sovIid(uint64(l))
		}
	}
	if len(m.Service) > 0 {
		for _, e := range m.Service {
			l = e.Size()
			n += 1 + l + sovIid(uint64(l))
		}
	}
	if len(m.Authentication) > 0 {
		for _, s := range m.Authentication {
			l = len(s)
			n += 1 + l + sovIid(uint64(l))
		}
	}
	if len(m.AssertionMethod) > 0 {
		for _, s := range m.AssertionMethod {
			l = len(s)
			n += 1 + l + sovIid(uint64(l))
		}
	}
	if len(m.KeyAgreement) > 0 {
		for _, s := range m.KeyAgreement {
			l = len(s)
			n += 1 + l + sovIid(uint64(l))
		}
	}
	if len(m.CapabilityInvocation) > 0 {
		for _, s := range m.CapabilityInvocation {
			l = len(s)
			n += 1 + l + sovIid(uint64(l))
		}
	}
	if len(m.CapabilityDelegation) > 0 {
		for _, s := range m.CapabilityDelegation {
			l = len(s)
			n += 1 + l + sovIid(uint64(l))
		}
	}
	if len(m.LinkedResource) > 0 {
		for _, e := range m.LinkedResource {
			l = e.Size()
			n += 1 + l + sovIid(uint64(l))
		}
	}
	if len(m.LinkedClaim) > 0 {
		for _, e := range m.LinkedClaim {
			l = e.Size()
			n += 1 + l + sovIid(uint64(l))
		}
	}
	if len(m.AccordedRight) > 0 {
		for _, e := range m.AccordedRight {
			l = e.Size()
			n += 1 + l + sovIid(uint64(l))
		}
	}
	if len(m.LinkedEntity) > 0 {
		for _, e := range m.LinkedEntity {
			l = e.Size()
			n += 1 + l + sovIid(uint64(l))
		}
	}
	l = len(m.AlsoKnownAs)
	if l > 0 {
		n += 1 + l + sovIid(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 2 + l + sovIid(uint64(l))
	}
	return n
}

func sovIid(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIid(x uint64) (n int) {
	return sovIid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IidDocument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IidDocument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IidDocument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context, &Context{})
			if err := m.Context[len(m.Context)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Controller = append(m.Controller, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationMethod = append(m.VerificationMethod, &VerificationMethod{})
			if err := m.VerificationMethod[len(m.VerificationMethod)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = append(m.Service, &Service{})
			if err := m.Service[len(m.Service)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authentication = append(m.Authentication, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssertionMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssertionMethod = append(m.AssertionMethod, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyAgreement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyAgreement = append(m.KeyAgreement, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapabilityInvocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CapabilityInvocation = append(m.CapabilityInvocation, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapabilityDelegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CapabilityDelegation = append(m.CapabilityDelegation, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkedResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkedResource = append(m.LinkedResource, &LinkedResource{})
			if err := m.LinkedResource[len(m.LinkedResource)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkedClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkedClaim = append(m.LinkedClaim, &LinkedClaim{})
			if err := m.LinkedClaim[len(m.LinkedClaim)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccordedRight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccordedRight = append(m.AccordedRight, &AccordedRight{})
			if err := m.AccordedRight[len(m.AccordedRight)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkedEntity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkedEntity = append(m.LinkedEntity, &LinkedEntity{})
			if err := m.LinkedEntity[len(m.LinkedEntity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlsoKnownAs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlsoKnownAs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &IidMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIid
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIid
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIid
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIid        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIid          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIid = fmt.Errorf("proto: unexpected end of group")
)
