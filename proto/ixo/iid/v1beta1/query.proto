syntax = "proto3";
package ixo.iid.v1beta1;

import "google/api/annotations.proto";
import "ixo/iid/v1beta1/iid.proto";
import "gogoproto/gogo.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/ixofoundation/ixo-blockchain/x/iid/types";

// this line is used by starport scaffolding # 1

// Query defines the gRPC querier service.
service Query {
  // IidDocuments queries all iid documents that match the given status.
  rpc IidDocuments(QueryIidDocumentsRequest) returns (QueryIidDocumentsResponse) {
    option (google.api.http).get = "/ixo/did/dids";
  }
  // IidDocument queries a iid documents with an id.
  rpc IidDocument(QueryIidDocumentRequest) returns (QueryIidDocumentResponse) {
    option (google.api.http).get = "/ixo/did/dids/{id}";
  }

  // MetaData queries a iid documents with an id.
  rpc MetaData(QueryIidMetaDataRequest) returns (QueryIidMetaDataResponse) {
    option (google.api.http).get = "/ixo/did/dids/{id}";
  }
}

// QueryDidDocumentsRequest is request type for Query/DidDocuments RPC method.
message QueryIidDocumentsRequest {
  // status enables to query for validators matching a given status.
  string status = 1;

  // pagination defines an optional pagination for the request.
//  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryDidDocumentsResponse is response type for the Query/DidDocuments RPC method
message QueryIidDocumentsResponse {
  // validators contains all the queried validators.
  repeated IidDocument iidDocuments = 1  [(gogoproto.nullable) = false];

  // pagination defines the pagination in the response.
//  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDidDocumentsRequest is request type for Query/DidDocuments RPC method.
message QueryIidDocumentRequest {
  // status enables to query for validators matching a given status.
  string id = 1;
}

// QueryDidDocumentsResponse is response type for the Query/DidDocuments RPC method
message QueryIidDocumentResponse {
  // validators contains all the queried validators.
  IidDocument iidDocument = 1  [(gogoproto.nullable) = false];
//  DidMetadata didMetadata = 2  [(gogoproto.nullable) = false];
}

message QueryIidMetaDataRequest {
  // status enables to query for validators matching a given status.
  string id = 1;
}

message QueryIidMetaDataResponse {
  // validators contains all the queried validators.
  //IidDocument iidDocument = 1  [(gogoproto.nullable) = false];
    IidMetadata didMetadata = 2  [(gogoproto.nullable) = false];
}
// this line is used by starport scaffolding # 3
