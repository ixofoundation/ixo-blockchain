syntax = "proto3";
package ixo.project.v1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/ixofoundation/ixo-blockchain/x/project/types";

// UpdateProjectStatusDoc contains details required to update a project's status.
message UpdateProjectStatusDoc {
  string status             = 1 [(gogoproto.moretags) = "yaml:\"status\""];
  string eth_funding_txn_id = 2 [(gogoproto.jsontag) = "ethFundingTxnID", (gogoproto.moretags) = "yaml:\"ethFundingTxnID\""];
}

// CreateAgentDoc contains details required to create an agent.
message CreateAgentDoc {
  string agent_did = 1 [(gogoproto.jsontag) = "did", (gogoproto.moretags) = "yaml:\"did\""];
  string role      = 2 [(gogoproto.moretags) = "yaml:\"role\""];
}

// UpdateAgentDoc contains details required to update an agent.
message UpdateAgentDoc {
  string did    = 1 [(gogoproto.moretags) = "yaml:\"did\""];
  string status = 2 [(gogoproto.moretags) = "yaml:\"status\""];
  string role   = 3 [(gogoproto.moretags) = "yaml:\"role\""];
}

// CreateClaimDoc contains details required to create a claim on a project.
message CreateClaimDoc {
  string claim_id          = 1 [(gogoproto.jsontag) = "claimID", (gogoproto.moretags) = "yaml:\"claimID\""];
  string claim_template_id = 2 [(gogoproto.jsontag) = "claimTemplateID", (gogoproto.moretags) = "yaml:\"claimTemplateID\""];
}

// CreateEvaluationDoc contains details required to create an evaluation for a specific claim on a project.
message CreateEvaluationDoc {
  string claim_id = 1 [(gogoproto.jsontag) = "claimID", (gogoproto.moretags) = "yaml:\"claimID\""];
  string status   = 2 [(gogoproto.moretags) = "yaml:\"status\""];
}

// WithdrawFundsDoc contains details required to withdraw funds from a specific project.
message WithdrawFundsDoc {
  string project_did   = 1 [(gogoproto.jsontag) = "projectDid", (gogoproto.moretags) = "yaml:\"projectDid\""];
  string recipient_did = 2 [(gogoproto.jsontag) = "recipientDid", (gogoproto.moretags) = "yaml:\"recipientDid\""];
  string amount        = 3 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"amount\""];
  bool is_refund       = 4 [(gogoproto.jsontag) = "isRefund", (gogoproto.moretags) = "yaml:\"isRefund\""];
}

// ProjectDoc defines a project (or entity) type with all of its parameters.
message ProjectDoc {
  string tx_hash     = 1 [(gogoproto.jsontag) = "txHash", (gogoproto.moretags) = "yaml:\"txHash\""];
  string project_did = 2 [(gogoproto.jsontag) = "projectDid", (gogoproto.moretags) = "yaml:\"projectDid\""];
  string sender_did  = 3 [(gogoproto.jsontag) = "senderDid", (gogoproto.moretags) = "yaml:\"senderDid\""];
  string pub_key     = 4 [(gogoproto.jsontag) = "pubKey", (gogoproto.moretags) = "yaml:\"pubKey\""];
  string status      = 5 [(gogoproto.moretags) = "yaml:\"status\""];
  bytes data         = 6 [(gogoproto.casttype) = "encoding/json.RawMessage", (gogoproto.moretags) = "yaml:\"iid\""];
}

// WithdrawalInfoDoc contains details required to withdraw from a specific project.
message WithdrawalInfoDoc {
  string project_did              = 1 [(gogoproto.jsontag) = "projectDid", (gogoproto.moretags) = "yaml:\"projectDid\""];
  string recipient_did            = 2 [(gogoproto.jsontag) = "recipientDid", (gogoproto.moretags) = "yaml:\"recipientDid\""];
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"amount\""];
}

// Params defines the parameters for the project module.
message Params {
  string ixo_did                                                    = 1 [(gogoproto.moretags) = "yaml:\"ixo_did\""];
  repeated cosmos.base.v1beta1.Coin project_minimum_initial_funding = 2 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.moretags) = "yaml:\"project_minimum_initial_funding\""];
  string oracle_fee_percentage                                      = 3 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"oracle_fee_percentage\""];
  string node_fee_percentage                                        = 4 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"node_fee_percentage\""];
}

// Claim contains details required to start a claim on a project.
message Claim {
  string id          = 1 [(gogoproto.moretags) = "yaml:\"id\""];
  string template_id = 2 [(gogoproto.moretags) = "yaml:\"template_id\""];
  string claimer_did = 3 [(gogoproto.moretags) = "yaml:\"claimer_did\""];
  string status      = 4 [(gogoproto.moretags) = "yaml:\"status\""];
}

// GenesisAccountMap is a type used at genesis that maps a specific project's account names to the accounts' addresses.
message GenesisAccountMap {
  map<string, string> map = 1 [(gogoproto.moretags) = "yaml:\"map\""];
}

// AccountMap maps a specific project's account names to the accounts' addresses.
message AccountMap {
  map<string, string> map = 1 [(gogoproto.moretags) = "yaml:\"map\""];
}

// WithdrawalInfoDocs contains a list of type WithdrawalInfoDoc.
message WithdrawalInfoDocs {
  repeated WithdrawalInfoDoc docs_list = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"docs_list\""];
}

// Claims contains a list of type Claim.
message Claims {
  repeated Claim claims_list = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"claims_list\""];
}