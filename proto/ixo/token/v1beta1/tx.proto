syntax = "proto3";
package ixo.token.v1beta1;

import "gogoproto/gogo.proto";
import "ixo/iid/v1beta1/iid.proto";
import "ixo/token/v1beta1/token.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/ixofoundation/ixo-blockchain/x/token/types";

// Msg defines the project Msg service.
service Msg {
  rpc CreateToken(MsgCreateToken) returns (MsgCreateTokenResponse);
  rpc MintToken(MsgMintToken) returns (MsgMintTokenResponse);
  rpc TransferToken(MsgTransferToken) returns (MsgTransferTokenResponse);
  rpc RetireToken(MsgRetireToken) returns (MsgRetireTokenResponse);
  rpc CancelToken(MsgCancelToken) returns (MsgCancelTokenResponse);
  rpc PauseToken(MsgPauseToken) returns (MsgPauseTokenResponse);
  rpc StopToken(MsgStopToken) returns (MsgStopTokenResponse);
}

message MsgCreateToken {
  // address of minter
  string minter = 1;
  // class is the token protocol entity DID (validated)
  string class = 2
      [ (gogoproto.casttype) =
            "github.com/ixofoundation/ixo-blockchain/x/iid/types.DIDFragment" ];
  // name is the token name, which must be unique (namespace)
  string name = 3;
  // description is any arbitrary description
  string description = 4;
  // image is the image url for the token
  string image = 5;
  // type is the token type (eg ixo1155)
  string token_type = 6;
  // cap is the maximum number of tokens with this name that can be minted, 0 is
  // unlimited
  string cap = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Uint",
    (gogoproto.nullable) = false
  ];
}

message MsgCreateTokenResponse {}

message MsgMintToken {
  // address of minter
  string minter = 1;
  string contract_address = 2;
  // address of owner to mint for
  string owner = 3;
  repeated MintBatch mint_batch = 4;
}

message MintBatch {
  option (gogoproto.equal) = true;

  // name is the token name, which must be unique (namespace), will be verified
  // against Token name provided on msgCreateToken
  string name = 1;
  // index is the unique identifier hexstring that identifies the token
  string index = 2;
  // amount is the number of tokens to mint
  string amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Uint",
    (gogoproto.nullable) = false
  ];
  // did of collection (eg Supamoto Malawi)
  string collection = 4;
  // tokenData is the linkedResources added to tokenMetadata when queried eg
  // (credential link ***.ipfs)
  repeated TokenData token_data = 5;
}

message MsgMintTokenResponse {}

message MsgTransferToken {
  // address of owner
  string owner = 1;
  // address of receiver
  string recipient = 2;
  // all tokens must be in same smart contract
  repeated TokenBatch tokens = 3;
}

message MsgTransferTokenResponse {}

message TokenBatch {
  option (gogoproto.equal) = true;

  // id that identifies the token
  string id = 1;
  // amount is the number of tokens to transfer
  string amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Uint",
    (gogoproto.nullable) = false
  ];
}

message MsgRetireToken {
  // address of owner
  string owner = 1;
  // tokens to retire, all tokens must be in same smart contract
  repeated TokenBatch tokens = 2;
  // jurisdiction is the jurisdiction of the token owner. A jurisdiction has
  // the format: <country-code>[-<sub-national-code>[ <postal-code>]]
  // The country-code must be 2 alphabetic characters, the sub-national-code
  // can be 1-3 alphanumeric characters, and the postal-code can be up to 64
  // alphanumeric characters. Only the country-code is required, while the
  // sub-national-code and postal-code are optional and can be added for
  // increased precision. See the valid format for this below.
  string jurisdiction = 3;
  // reason is any arbitrary string that specifies the reason for retiring
  // tokens.
  string reason = 4;
}

message MsgRetireTokenResponse {}

message MsgCancelToken {
  // address of owner
  string owner = 1;
  // tokens to retire, all tokens must be in same smart contract
  repeated TokenBatch tokens = 2;
  // reason is any arbitrary string that specifies the reason for retiring
  // tokens.
  string reason = 3;
}

message MsgCancelTokenResponse {}

message MsgPauseToken {
  // address of minter
  string minter = 1;
  string contract_address = 2;
  // pause or unpause Token Minting allowance
  bool paused = 3;
}

message MsgPauseTokenResponse {}

message MsgStopToken {
  // address of minter
  string minter = 1;
  string contract_address = 2;
}

message MsgStopTokenResponse {}