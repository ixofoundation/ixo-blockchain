syntax = "proto3";
package ixo.token.v1beta1;

import "gogoproto/gogo.proto";
import "ixo/iid/v1beta1/iid.proto";
import "ixo/token/v1beta1/token.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/ixofoundation/ixo-blockchain/x/token/types";

// Msg defines the project Msg service.
service Msg {
  rpc CreateToken(MsgCreateToken) returns (MsgCreateTokenResponse);

  rpc MintToken(MsgMintToken) returns (MsgMintTokenResponse);

  rpc TransferToken(MsgTransferToken) returns (MsgTransferTokenResponse);
}

message MsgCreateToken {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string minter_did = 1
      [ (gogoproto.casttype) =
            "github.com/ixofoundation/ixo-blockchain/x/iid/types.DIDFragment" ];
  string minter_address = 2;
  // class is the token protocol entity DID (validated)
  string class = 3
      [ (gogoproto.casttype) =
            "github.com/ixofoundation/ixo-blockchain/x/iid/types.DIDFragment" ];
  // name is the token name, which must be unique (namespace)
  string name = 4;
  // description is any arbitrary description
  string description = 5;
  // image is the image url for the token
  string image = 6;
  // type is the token type (eg ixo1155)
  string token_type = 7;
  // cap is the maximum number of tokens with this name that can be minted, 0 is
  // unlimited
  string cap = 8 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Uint",
    (gogoproto.nullable) = false
  ];
}

message MsgCreateTokenResponse {}

message MsgMintToken {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string minter_did = 1
      [ (gogoproto.casttype) =
            "github.com/ixofoundation/ixo-blockchain/x/iid/types.DIDFragment" ];
  string minter_address = 2;
  string contract_address = 3;
  string owner_did = 4
      [ (gogoproto.casttype) =
            "github.com/ixofoundation/ixo-blockchain/x/iid/types.DIDFragment" ];
  repeated MintBatch mintBatch = 5;
}

message MintBatch {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = false;

  // name is the token name, which must be unique (namespace), will be verified
  // against Token name provided on msgCreateToken
  string name = 1;
  // index is the unique identifier hexstring that identifies the token
  string index = 2;
  // amount is the number of tokens to mint
  string amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Uint",
    (gogoproto.nullable) = false
  ];
  // did of collection (eg Supamoto Malawi)
  string collection = 4;
  // tokenData is the linkedResources added to tokenMetadata when queried eg
  // (credential link ***.ipfs)
  repeated TokenData tokenData = 5;
}

message MsgMintTokenResponse {}

message MsgTransferToken {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal) = false;

  string token_did = 1;
  string owner_did = 2;     // The ownersdid used to sign this transaction.
  string owner_address = 3; // The owners address used to sign this transaction.
  string recipient_did = 4;
}

message MsgTransferTokenResponse {}