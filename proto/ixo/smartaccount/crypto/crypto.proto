syntax = "proto3";
package ixo.smartaccount.crypto;

import "amino/amino.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/ixofoundation/ixo-blockchain/v3/x/smart-account/crypto";
option (gogoproto.goproto_stringer_all) = false;

// PubKey defines an authn public key
message AuthnPubKey {
  option (amino.name) = "ixo/smartaccount/crypto/authn-pubkey";
  option (amino.message_encoding) = "key_field";

  // The key_id (or credential ID) is a unique identifier for a passkey.
  // This ID is provided by the authenticator when the passkey is created.
  // As it is not possible to retrieve the public key from the authenticator
  // after the passkey is created, if the user loses the public key - id
  // association, the key_id can be used to retrieve the public key.
  string key_id = 1;
  // Store the COSE algorithm identifier. Since authn allows multiple different
  // public key credential algorithm, eg.
  // -7(ES256) - ECDSA with SHA-256 on the P-256 curve
  // -257(RS256) - RSASSA-PKCS1-v1_5 with SHA-256
  // we need to store the algorithm identifier to be able to verify the
  // signature according to the algorithm the public key is using.
  int32 cose_algorithm = 2;
  // The public key bytes
  bytes key = 3;
  // The relaying party id is the id of the relaying party against which the
  // authn key pair is registered. We store it as binary of sha256 hash.
  bytes relaying_party_id = 4;
}
