syntax = "proto3";
package entity;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/coin.proto";
import "entity/entity.proto";

option go_package = "github.com/ixofoundation/ixo-blockchain/x/entity/types";

// Query defines the gRPC querier service.
service Query {
  rpc EntityList(QueryEntityListRequest) returns (QueryEntityListResponse){
    option (google.api.http).get = "/ixo/entity";
  }

  rpc EntityDoc(QueryEntityDocRequest) returns (QueryEntityDocResponse){
    option (google.api.http).get = "/ixo/entity/{entity_did}";
  }

  rpc EntityConfig(QueryEntityConfigRequest) returns (QueryEntityConfigResponse){
    option (google.api.http).get = "/ixo/entity/config";
  }

  // // ProjectAccounts lists a specific project's accounts.
  // rpc ProjectAccounts(QueryProjectAccountsRequest) returns (QueryProjectAccountsResponse){
  //   option (google.api.http).get = "/ixo/projectAccounts/{project_did}";
  // }

  // // ProjectTx lists a specific project's transactions.
  // rpc ProjectTx(QueryProjectTxRequest) returns (QueryProjectTxResponse){
  //   option (google.api.http).get = "/ixo/projectTxs/{project_did}";
  // }

  // // Params queries the paramaters of x/project module.
  // rpc Params(QueryParamsRequest) returns (QueryParamsResponse){
  //   option (google.api.http).get = "/ixo/projectParams";
  // }
}

message QueryEntityListRequest {
  string entity_type = 1 [(gogoproto.moretags) = "yaml:\"entity_type\""];
  string entity_status = 2 [(gogoproto.moretags) = "yaml:\"entity_status\""];
}

// // QueryProjectDocResponse is the response type for the Query/ProjectDoc RPC method.
message QueryEntityListResponse {
  // ProjectDoc project_doc = 1 [(gogoproto.moretags) = "yaml:\"project_doc\""];
}

// QueryProjectDocRequest is the request type for the Query/ProjectDoc RPC method.
message QueryEntityDocRequest {
  string entity_did = 1 [(gogoproto.moretags) = "yaml:\"entity_did\""];
}

// // QueryProjectDocResponse is the response type for the Query/ProjectDoc RPC method.
message QueryEntityDocResponse {
  // ProjectDoc project_doc = 1 [(gogoproto.moretags) = "yaml:\"project_doc\""];
}

message QueryEntityConfigRequest {}

// // QueryProjectDocResponse is the response type for the Query/ProjectDoc RPC method.
message QueryEntityConfigResponse {
  map<string, string> map = 1 [(gogoproto.moretags) = "yaml:\"config\""];
}


// // QueryProjectAccountsRequest is the request type for the Query/ProjectAccounts RPC method.
// message QueryProjectAccountsRequest {
//   string project_did = 1 [(gogoproto.moretags) = "yaml:\"project_did\""];
// }

// // QueryProjectAccountsResponse is the response type for the Query/ProjectAccounts RPC method.
// message QueryProjectAccountsResponse {
//   AccountMap account_map = 1 [(gogoproto.moretags) = "yaml:\"account_map\""];
// }

// // QueryProjectTxRequest is the request type for the Query/ProjectTx RPC method.
// message QueryProjectTxRequest {
//   string project_did = 1 [(gogoproto.moretags) = "yaml:\"project_did\""];
// }

// // QueryProjectTxResponse is the response type for the Query/ProjectTx RPC method.
// message QueryProjectTxResponse {
//   WithdrawalInfoDocs txs = 1 [(gogoproto.moretags) = "yaml:\"txs\""];
// }

// // QueryParamsRequest is the request type for the Query/Params RPC method.
// message QueryParamsRequest {}

// // QueryParamsResponse is the response type for the Query/Params RPC method.
// message QueryParamsResponse {
//   Params params = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"params\""];
// }

