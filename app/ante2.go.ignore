package app

import (
	sdk "github.com/cosmos/cosmos-sdk/types"
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"

	iidkeeper "github.com/ixofoundation/ixo-blockchain/x/iid/keeper"

	wasmtypes "github.com/CosmWasm/wasmd/x/wasm/types"

	txsigning "github.com/cosmos/cosmos-sdk/types/tx/signing"
	authante "github.com/cosmos/cosmos-sdk/x/auth/ante"
	authsigning "github.com/cosmos/cosmos-sdk/x/auth/signing"
	bankkeeper "github.com/cosmos/cosmos-sdk/x/bank/keeper"

	// issuerante "github.com/allinbits/cosmos-cash/v3/x/issuer/ante"
	// issuerkeeper "github.com/allinbits/cosmos-cash/v3/x/issuer/keeper"
	// vcskeeper "github.com/allinbits/cosmos-cash/v3/x/verifiable-credential/keeper"

	authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"
)

type HandlerOptions2 struct {
	AccountKeeper     authante.AccountKeeper
	BankKeeper        bankkeeper.Keeper
	FeegrantKeeper    authante.FeegrantKeeper
	IidKeeper         iidkeeper.Keeper
	wasmConfig        wasmtypes.WasmConfig
	txCounterStoreKey sdk.StoreKey
	SignModeHandler   authsigning.SignModeHandler
	SigGasConsumer    func(meter sdk.GasMeter, sig txsigning.SignatureV2, params authtypes.Params) error
}

type ImposeLegacyDidRestrictionsDecorator struct{}

func NewImposeLegacyDidRestrictionsDecorator(x bool) ImposeLegacyDidRestrictionsDecorator {
	return ImposeLegacyDidRestrictionsDecorator{}
}

func (ImposeLegacyDidRestrictionsDecorator) AnteHandle(ctx sdk.Context, tx sdk.Tx, simulate bool, next sdk.AnteHandler) (newCtx sdk.Context, err error) {
	if false {
		return next(newCtx, tx, simulate)
	}

	//Add msgs must be the same.




	return next(newCtx, tx, simulate)
}

type LegacyMsgDecorator struct{}

func NewLegacyMsgDecorator(x bool) LegacyMsgDecorator {
	return LegacyMsgDecorator{}
}

func (LegacyMsgDecorator) AnteHandle(ctx sdk.Context, tx sdk.Tx, simulate bool, next sdk.AnteHandler) (newCtx sdk.Context, err error) {
	return next(newCtx, tx, simulate)
}

type IidVerificationDecorator struct{}

func NewIidVerificationDecorator() IidVerificationDecorator {
	return IidVerificationDecorator{}
}

func (IidVerificationDecorator) AnteHandle(ctx sdk.Context, tx sdk.Tx, simulate bool, next sdk.AnteHandler) (newCtx sdk.Context, err error) {
	return next(newCtx, tx, simulate)
}

func IxoAnteHandler2(options HandlerOptions) (sdk.AnteHandler, error) {
	if options.AccountKeeper == nil {
		return nil, sdkerrors.Wrap(sdkerrors.ErrLogic, "account keeper is required for ante builder")
	}

	if options.BankKeeper == nil {
		return nil, sdkerrors.Wrap(sdkerrors.ErrLogic, "bank keeper is required for ante builder")
	}

	if options.SignModeHandler == nil {
		return nil, sdkerrors.Wrap(sdkerrors.ErrLogic, "sign mode handler is required for ante builder")
	}

	// var sigGasConsumer = options.SigGasConsumer
	// if sigGasConsumer == nil {
	// 	sigGasConsumer = authante.DefaultSigVerificationGasConsumer
	// }

	legacyDidMsgs := false

	anteDecorators := []sdk.AnteDecorator{
		authante.NewSetUpContextDecorator(),
		NewIidVerificationDecorator(),
		NewImposeLegacyDidRestrictionsDecorator(legacyDidMsgs),
		NewLegacyMsgDecorator(legacyDidMsgs),

		// // libante                                            // outermost AnteDecorator. SetUpContext must be called first
		// wasmkeeper.NewLimitSimulationGasDecorator(options.wasmConfig.SimulationGasLimit), // after setup context to enforce limits early
		// wasmkeeper.NewCountTXDecorator(options.txCounterStoreKey),
		// authante.NewRejectExtensionOptionsDecorator(),
		// // authante.NewMempoolFeeDecorator(),
		// authante.NewValidateBasicDecorator(),
		// authante.NewTxTimeoutHeightDecorator(),
		// authante.NewValidateMemoDecorator(options.AccountKeeper),
		// authante.NewConsumeGasForTxSizeDecorator(options.AccountKeeper),
		// projectante.NewFundProjectDecorator(
		// 	options.IidKeeper,
		// 	options.AccountKeeper,
		// 	options.BankKeeper,
		// 	options.FeegrantKeeper,
		// ),
		// libante.NewIxoFeeHandlerDecorator(
		// 	options.IidKeeper,
		// 	options.AccountKeeper,
		// 	options.BankKeeper,
		// 	authante.NewDeductFeeDecorator(
		// 		options.AccountKeeper,
		// 		options.BankKeeper,
		// 		options.FeegrantKeeper,
		// 	),
		// ),

		// // iidante.NewInjectIidAddress(options.IidKeeper),
		// // iidante.NewIidSetPubKeyDecorator(
		// // 	options.IidKeeper,
		// // ),
		// authante.NewSetPubKeyDecorator(options.AccountKeeper), // SetPubKeyDecorator must be called before all signature verification decorators
		// authante.NewValidateSigCountDecorator(options.AccountKeeper),
		// authante.NewSigGasConsumeDecorator(options.AccountKeeper, options.SigGasConsumer),
		// authante.NewSigVerificationDecorator(options.AccountKeeper, options.SignModeHandler),
		// authante.NewIncrementSequenceDecorator(options.AccountKeeper),
		// iidante.NewIidResolutionDecorator(options.IidKeeper),
	}

	return sdk.ChainAnteDecorators(anteDecorators...), nil
}
